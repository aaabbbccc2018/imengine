// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: files.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "files.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zproto {

namespace {

const ::google::protobuf::Descriptor* FileLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvatarImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Avatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_files_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_files_2eproto() {
  protobuf_AddDesc_files_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "files.proto");
  GOOGLE_CHECK(file != NULL);
  FileLocation_descriptor_ = file->message_type(0);
  static const int FileLocation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, access_hash_),
  };
  FileLocation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileLocation_descriptor_,
      FileLocation::internal_default_instance(),
      FileLocation_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileLocation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLocation, _internal_metadata_));
  AvatarImage_descriptor_ = file->message_type(1);
  static const int AvatarImage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarImage, file_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarImage, file_size_),
  };
  AvatarImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AvatarImage_descriptor_,
      AvatarImage::internal_default_instance(),
      AvatarImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(AvatarImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarImage, _internal_metadata_));
  Avatar_descriptor_ = file->message_type(2);
  static const int Avatar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, small_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, large_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, full_image_),
  };
  Avatar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Avatar_descriptor_,
      Avatar::internal_default_instance(),
      Avatar_offsets_,
      -1,
      -1,
      -1,
      sizeof(Avatar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_files_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileLocation_descriptor_, FileLocation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AvatarImage_descriptor_, AvatarImage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Avatar_descriptor_, Avatar::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_files_2eproto() {
  FileLocation_default_instance_.Shutdown();
  delete FileLocation_reflection_;
  AvatarImage_default_instance_.Shutdown();
  delete AvatarImage_reflection_;
  Avatar_default_instance_.Shutdown();
  delete Avatar_reflection_;
}

void protobuf_InitDefaults_files_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  FileLocation_default_instance_.DefaultConstruct();
  AvatarImage_default_instance_.DefaultConstruct();
  Avatar_default_instance_.DefaultConstruct();
  FileLocation_default_instance_.get_mutable()->InitAsDefaultInstance();
  AvatarImage_default_instance_.get_mutable()->InitAsDefaultInstance();
  Avatar_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_files_2eproto_once_);
void protobuf_InitDefaults_files_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_files_2eproto_once_,
                 &protobuf_InitDefaults_files_2eproto_impl);
}
void protobuf_AddDesc_files_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_files_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013files.proto\022\006zproto\"4\n\014FileLocation\022\017\n"
    "\007file_id\030\001 \001(\003\022\023\n\013access_hash\030\002 \001(\003\"l\n\013A"
    "vatarImage\022+\n\rfile_location\030\001 \001(\0132\024.zpro"
    "to.FileLocation\022\r\n\005width\030\002 \001(\005\022\016\n\006height"
    "\030\003 \001(\005\022\021\n\tfile_size\030\004 \001(\005\"\205\001\n\006Avatar\022(\n\013"
    "small_image\030\001 \001(\0132\023.zproto.AvatarImage\022("
    "\n\013large_image\030\002 \001(\0132\023.zproto.AvatarImage"
    "\022\'\n\nfull_image\030\003 \001(\0132\023.zproto.AvatarImag"
    "eB(\n\027com.zchat.engine.zprotoB\013ZProtoFile"
    "sH\002b\006proto3", 371);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "files.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_files_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_files_2eproto_once_);
void protobuf_AddDesc_files_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_files_2eproto_once_,
                 &protobuf_AddDesc_files_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_files_2eproto {
  StaticDescriptorInitializer_files_2eproto() {
    protobuf_AddDesc_files_2eproto();
  }
} static_descriptor_initializer_files_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileLocation::kFileIdFieldNumber;
const int FileLocation::kAccessHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileLocation::FileLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_files_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.FileLocation)
}

void FileLocation::InitAsDefaultInstance() {
}

FileLocation::FileLocation(const FileLocation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.FileLocation)
}

void FileLocation::SharedCtor() {
  ::memset(&file_id_, 0, reinterpret_cast<char*>(&access_hash_) -
    reinterpret_cast<char*>(&file_id_) + sizeof(access_hash_));
  _cached_size_ = 0;
}

FileLocation::~FileLocation() {
  // @@protoc_insertion_point(destructor:zproto.FileLocation)
  SharedDtor();
}

void FileLocation::SharedDtor() {
}

void FileLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLocation_descriptor_;
}

const FileLocation& FileLocation::default_instance() {
  protobuf_InitDefaults_files_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FileLocation> FileLocation_default_instance_;

FileLocation* FileLocation::New(::google::protobuf::Arena* arena) const {
  FileLocation* n = new FileLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileLocation::UnsafeMergeFrom(const FileLocation& from) {
  MergeFrom(from);
}
void FileLocation::Swap(FileLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileLocation::InternalSwap(FileLocation* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata FileLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLocation_descriptor_;
  metadata.reflection = FileLocation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileLocation

// optional int64 file_id = 1;
void FileLocation::clear_file_id() {
  file_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FileLocation::file_id() const {
  // @@protoc_insertion_point(field_get:zproto.FileLocation.file_id)
  return file_id_;
}
void FileLocation::set_file_id(::google::protobuf::int64 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.FileLocation.file_id)
}

// optional int64 access_hash = 2;
void FileLocation::clear_access_hash() {
  access_hash_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FileLocation::access_hash() const {
  // @@protoc_insertion_point(field_get:zproto.FileLocation.access_hash)
  return access_hash_;
}
void FileLocation::set_access_hash(::google::protobuf::int64 value) {
  
  access_hash_ = value;
  // @@protoc_insertion_point(field_set:zproto.FileLocation.access_hash)
}

inline const FileLocation* FileLocation::internal_default_instance() {
  return &FileLocation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarImage::kFileLocationFieldNumber;
const int AvatarImage::kWidthFieldNumber;
const int AvatarImage::kHeightFieldNumber;
const int AvatarImage::kFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarImage::AvatarImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_files_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.AvatarImage)
}

void AvatarImage::InitAsDefaultInstance() {
  file_location_ = const_cast< ::zproto::FileLocation*>(
      ::zproto::FileLocation::internal_default_instance());
}

AvatarImage::AvatarImage(const AvatarImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.AvatarImage)
}

void AvatarImage::SharedCtor() {
  file_location_ = NULL;
  ::memset(&width_, 0, reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&width_) + sizeof(file_size_));
  _cached_size_ = 0;
}

AvatarImage::~AvatarImage() {
  // @@protoc_insertion_point(destructor:zproto.AvatarImage)
  SharedDtor();
}

void AvatarImage::SharedDtor() {
  if (this != &AvatarImage_default_instance_.get()) {
    delete file_location_;
  }
}

void AvatarImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarImage_descriptor_;
}

const AvatarImage& AvatarImage::default_instance() {
  protobuf_InitDefaults_files_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AvatarImage> AvatarImage_default_instance_;

AvatarImage* AvatarImage::New(::google::protobuf::Arena* arena) const {
  AvatarImage* n = new AvatarImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarImage::UnsafeMergeFrom(const AvatarImage& from) {
  MergeFrom(from);
}
void AvatarImage::Swap(AvatarImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarImage::InternalSwap(AvatarImage* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata AvatarImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarImage_descriptor_;
  metadata.reflection = AvatarImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarImage

// optional .zproto.FileLocation file_location = 1;
bool AvatarImage::has_file_location() const {
  return this != internal_default_instance() && file_location_ != NULL;
}
void AvatarImage::clear_file_location() {
  if (GetArenaNoVirtual() == NULL && file_location_ != NULL) delete file_location_;
  file_location_ = NULL;
}
const ::zproto::FileLocation& AvatarImage::file_location() const {
  // @@protoc_insertion_point(field_get:zproto.AvatarImage.file_location)
  return file_location_ != NULL ? *file_location_
                         : *::zproto::FileLocation::internal_default_instance();
}
::zproto::FileLocation* AvatarImage::mutable_file_location() {
  
  if (file_location_ == NULL) {
    file_location_ = new ::zproto::FileLocation;
  }
  // @@protoc_insertion_point(field_mutable:zproto.AvatarImage.file_location)
  return file_location_;
}
::zproto::FileLocation* AvatarImage::release_file_location() {
  // @@protoc_insertion_point(field_release:zproto.AvatarImage.file_location)
  
  ::zproto::FileLocation* temp = file_location_;
  file_location_ = NULL;
  return temp;
}
void AvatarImage::set_allocated_file_location(::zproto::FileLocation* file_location) {
  delete file_location_;
  file_location_ = file_location;
  if (file_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.AvatarImage.file_location)
}

// optional int32 width = 2;
void AvatarImage::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 AvatarImage::width() const {
  // @@protoc_insertion_point(field_get:zproto.AvatarImage.width)
  return width_;
}
void AvatarImage::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:zproto.AvatarImage.width)
}

// optional int32 height = 3;
void AvatarImage::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 AvatarImage::height() const {
  // @@protoc_insertion_point(field_get:zproto.AvatarImage.height)
  return height_;
}
void AvatarImage::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:zproto.AvatarImage.height)
}

// optional int32 file_size = 4;
void AvatarImage::clear_file_size() {
  file_size_ = 0;
}
::google::protobuf::int32 AvatarImage::file_size() const {
  // @@protoc_insertion_point(field_get:zproto.AvatarImage.file_size)
  return file_size_;
}
void AvatarImage::set_file_size(::google::protobuf::int32 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:zproto.AvatarImage.file_size)
}

inline const AvatarImage* AvatarImage::internal_default_instance() {
  return &AvatarImage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Avatar::kSmallImageFieldNumber;
const int Avatar::kLargeImageFieldNumber;
const int Avatar::kFullImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Avatar::Avatar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_files_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.Avatar)
}

void Avatar::InitAsDefaultInstance() {
  small_image_ = const_cast< ::zproto::AvatarImage*>(
      ::zproto::AvatarImage::internal_default_instance());
  large_image_ = const_cast< ::zproto::AvatarImage*>(
      ::zproto::AvatarImage::internal_default_instance());
  full_image_ = const_cast< ::zproto::AvatarImage*>(
      ::zproto::AvatarImage::internal_default_instance());
}

Avatar::Avatar(const Avatar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.Avatar)
}

void Avatar::SharedCtor() {
  small_image_ = NULL;
  large_image_ = NULL;
  full_image_ = NULL;
  _cached_size_ = 0;
}

Avatar::~Avatar() {
  // @@protoc_insertion_point(destructor:zproto.Avatar)
  SharedDtor();
}

void Avatar::SharedDtor() {
  if (this != &Avatar_default_instance_.get()) {
    delete small_image_;
    delete large_image_;
    delete full_image_;
  }
}

void Avatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_descriptor_;
}

const Avatar& Avatar::default_instance() {
  protobuf_InitDefaults_files_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Avatar> Avatar_default_instance_;

Avatar* Avatar::New(::google::protobuf::Arena* arena) const {
  Avatar* n = new Avatar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Avatar::UnsafeMergeFrom(const Avatar& from) {
  MergeFrom(from);
}
void Avatar::Swap(Avatar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Avatar::InternalSwap(Avatar* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata Avatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_descriptor_;
  metadata.reflection = Avatar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Avatar

// optional .zproto.AvatarImage small_image = 1;
bool Avatar::has_small_image() const {
  return this != internal_default_instance() && small_image_ != NULL;
}
void Avatar::clear_small_image() {
  if (GetArenaNoVirtual() == NULL && small_image_ != NULL) delete small_image_;
  small_image_ = NULL;
}
const ::zproto::AvatarImage& Avatar::small_image() const {
  // @@protoc_insertion_point(field_get:zproto.Avatar.small_image)
  return small_image_ != NULL ? *small_image_
                         : *::zproto::AvatarImage::internal_default_instance();
}
::zproto::AvatarImage* Avatar::mutable_small_image() {
  
  if (small_image_ == NULL) {
    small_image_ = new ::zproto::AvatarImage;
  }
  // @@protoc_insertion_point(field_mutable:zproto.Avatar.small_image)
  return small_image_;
}
::zproto::AvatarImage* Avatar::release_small_image() {
  // @@protoc_insertion_point(field_release:zproto.Avatar.small_image)
  
  ::zproto::AvatarImage* temp = small_image_;
  small_image_ = NULL;
  return temp;
}
void Avatar::set_allocated_small_image(::zproto::AvatarImage* small_image) {
  delete small_image_;
  small_image_ = small_image;
  if (small_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.Avatar.small_image)
}

// optional .zproto.AvatarImage large_image = 2;
bool Avatar::has_large_image() const {
  return this != internal_default_instance() && large_image_ != NULL;
}
void Avatar::clear_large_image() {
  if (GetArenaNoVirtual() == NULL && large_image_ != NULL) delete large_image_;
  large_image_ = NULL;
}
const ::zproto::AvatarImage& Avatar::large_image() const {
  // @@protoc_insertion_point(field_get:zproto.Avatar.large_image)
  return large_image_ != NULL ? *large_image_
                         : *::zproto::AvatarImage::internal_default_instance();
}
::zproto::AvatarImage* Avatar::mutable_large_image() {
  
  if (large_image_ == NULL) {
    large_image_ = new ::zproto::AvatarImage;
  }
  // @@protoc_insertion_point(field_mutable:zproto.Avatar.large_image)
  return large_image_;
}
::zproto::AvatarImage* Avatar::release_large_image() {
  // @@protoc_insertion_point(field_release:zproto.Avatar.large_image)
  
  ::zproto::AvatarImage* temp = large_image_;
  large_image_ = NULL;
  return temp;
}
void Avatar::set_allocated_large_image(::zproto::AvatarImage* large_image) {
  delete large_image_;
  large_image_ = large_image;
  if (large_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.Avatar.large_image)
}

// optional .zproto.AvatarImage full_image = 3;
bool Avatar::has_full_image() const {
  return this != internal_default_instance() && full_image_ != NULL;
}
void Avatar::clear_full_image() {
  if (GetArenaNoVirtual() == NULL && full_image_ != NULL) delete full_image_;
  full_image_ = NULL;
}
const ::zproto::AvatarImage& Avatar::full_image() const {
  // @@protoc_insertion_point(field_get:zproto.Avatar.full_image)
  return full_image_ != NULL ? *full_image_
                         : *::zproto::AvatarImage::internal_default_instance();
}
::zproto::AvatarImage* Avatar::mutable_full_image() {
  
  if (full_image_ == NULL) {
    full_image_ = new ::zproto::AvatarImage;
  }
  // @@protoc_insertion_point(field_mutable:zproto.Avatar.full_image)
  return full_image_;
}
::zproto::AvatarImage* Avatar::release_full_image() {
  // @@protoc_insertion_point(field_release:zproto.Avatar.full_image)
  
  ::zproto::AvatarImage* temp = full_image_;
  full_image_ = NULL;
  return temp;
}
void Avatar::set_allocated_full_image(::zproto::AvatarImage* full_image) {
  delete full_image_;
  full_image_ = full_image;
  if (full_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.Avatar.full_image)
}

inline const Avatar* Avatar::internal_default_instance() {
  return &Avatar_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)
