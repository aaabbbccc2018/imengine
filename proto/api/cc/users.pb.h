// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: users.proto

#ifndef PROTOBUF_users_2eproto__INCLUDED
#define PROTOBUF_users_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
#include "files.pb.h"
// @@protoc_insertion_point(includes)

namespace zproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_users_2eproto();
void protobuf_InitDefaults_users_2eproto();
void protobuf_AssignDesc_users_2eproto();
void protobuf_ShutdownFile_users_2eproto();

class PushUser;
class User;

// ===================================================================

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static const User* internal_default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  inline User* New() const { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User* other);
  void UnsafeMergeFrom(const User& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional int64 access_hash = 2;
  void clear_access_hash();
  static const int kAccessHashFieldNumber = 2;
  ::google::protobuf::int64 access_hash() const;
  void set_access_hash(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::int64 access_hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_users_2eproto_impl();
  friend void  protobuf_AddDesc_users_2eproto_impl();
  friend void protobuf_AssignDesc_users_2eproto();
  friend void protobuf_ShutdownFile_users_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<User> User_default_instance_;

// -------------------------------------------------------------------

class PushUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.PushUser) */ {
 public:
  PushUser();
  virtual ~PushUser();

  PushUser(const PushUser& from);

  inline PushUser& operator=(const PushUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushUser& default_instance();

  static const PushUser* internal_default_instance();

  void Swap(PushUser* other);

  // implements Message ----------------------------------------------

  inline PushUser* New() const { return New(NULL); }

  PushUser* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PushUser* other);
  void UnsafeMergeFrom(const PushUser& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional int64 access_hash = 2;
  void clear_access_hash();
  static const int kAccessHashFieldNumber = 2;
  ::google::protobuf::int64 access_hash() const;
  void set_access_hash(::google::protobuf::int64 value);

  // optional string push_name = 3;
  void clear_push_name();
  static const int kPushNameFieldNumber = 3;
  const ::std::string& push_name() const;
  void set_push_name(const ::std::string& value);
  void set_push_name(const char* value);
  void set_push_name(const char* value, size_t size);
  ::std::string* mutable_push_name();
  ::std::string* release_push_name();
  void set_allocated_push_name(::std::string* push_name);

  // optional .zproto.Avatar push_avatar = 5;
  bool has_push_avatar() const;
  void clear_push_avatar();
  static const int kPushAvatarFieldNumber = 5;
  const ::zproto::Avatar& push_avatar() const;
  ::zproto::Avatar* mutable_push_avatar();
  ::zproto::Avatar* release_push_avatar();
  void set_allocated_push_avatar(::zproto::Avatar* push_avatar);

  // @@protoc_insertion_point(class_scope:zproto.PushUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr push_name_;
  ::zproto::Avatar* push_avatar_;
  ::google::protobuf::int64 access_hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_users_2eproto_impl();
  friend void  protobuf_AddDesc_users_2eproto_impl();
  friend void protobuf_AssignDesc_users_2eproto();
  friend void protobuf_ShutdownFile_users_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PushUser> PushUser_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// optional string uid = 1;
inline void User::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::uid() const {
  // @@protoc_insertion_point(field_get:zproto.User.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.User.uid)
}
inline void User::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.User.uid)
}
inline void User::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.User.uid)
}
inline ::std::string* User::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:zproto.User.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_uid() {
  // @@protoc_insertion_point(field_release:zproto.User.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:zproto.User.uid)
}

// optional int64 access_hash = 2;
inline void User::clear_access_hash() {
  access_hash_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 User::access_hash() const {
  // @@protoc_insertion_point(field_get:zproto.User.access_hash)
  return access_hash_;
}
inline void User::set_access_hash(::google::protobuf::int64 value) {
  
  access_hash_ = value;
  // @@protoc_insertion_point(field_set:zproto.User.access_hash)
}

inline const User* User::internal_default_instance() {
  return &User_default_instance_.get();
}
// -------------------------------------------------------------------

// PushUser

// optional string uid = 1;
inline void PushUser::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushUser::uid() const {
  // @@protoc_insertion_point(field_get:zproto.PushUser.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushUser::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.PushUser.uid)
}
inline void PushUser::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.PushUser.uid)
}
inline void PushUser::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.PushUser.uid)
}
inline ::std::string* PushUser::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:zproto.PushUser.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushUser::release_uid() {
  // @@protoc_insertion_point(field_release:zproto.PushUser.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushUser::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:zproto.PushUser.uid)
}

// optional int64 access_hash = 2;
inline void PushUser::clear_access_hash() {
  access_hash_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PushUser::access_hash() const {
  // @@protoc_insertion_point(field_get:zproto.PushUser.access_hash)
  return access_hash_;
}
inline void PushUser::set_access_hash(::google::protobuf::int64 value) {
  
  access_hash_ = value;
  // @@protoc_insertion_point(field_set:zproto.PushUser.access_hash)
}

// optional string push_name = 3;
inline void PushUser::clear_push_name() {
  push_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushUser::push_name() const {
  // @@protoc_insertion_point(field_get:zproto.PushUser.push_name)
  return push_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushUser::set_push_name(const ::std::string& value) {
  
  push_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.PushUser.push_name)
}
inline void PushUser::set_push_name(const char* value) {
  
  push_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.PushUser.push_name)
}
inline void PushUser::set_push_name(const char* value, size_t size) {
  
  push_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.PushUser.push_name)
}
inline ::std::string* PushUser::mutable_push_name() {
  
  // @@protoc_insertion_point(field_mutable:zproto.PushUser.push_name)
  return push_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushUser::release_push_name() {
  // @@protoc_insertion_point(field_release:zproto.PushUser.push_name)
  
  return push_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushUser::set_allocated_push_name(::std::string* push_name) {
  if (push_name != NULL) {
    
  } else {
    
  }
  push_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_name);
  // @@protoc_insertion_point(field_set_allocated:zproto.PushUser.push_name)
}

// optional .zproto.Avatar push_avatar = 5;
inline bool PushUser::has_push_avatar() const {
  return this != internal_default_instance() && push_avatar_ != NULL;
}
inline void PushUser::clear_push_avatar() {
  if (GetArenaNoVirtual() == NULL && push_avatar_ != NULL) delete push_avatar_;
  push_avatar_ = NULL;
}
inline const ::zproto::Avatar& PushUser::push_avatar() const {
  // @@protoc_insertion_point(field_get:zproto.PushUser.push_avatar)
  return push_avatar_ != NULL ? *push_avatar_
                         : *::zproto::Avatar::internal_default_instance();
}
inline ::zproto::Avatar* PushUser::mutable_push_avatar() {
  
  if (push_avatar_ == NULL) {
    push_avatar_ = new ::zproto::Avatar;
  }
  // @@protoc_insertion_point(field_mutable:zproto.PushUser.push_avatar)
  return push_avatar_;
}
inline ::zproto::Avatar* PushUser::release_push_avatar() {
  // @@protoc_insertion_point(field_release:zproto.PushUser.push_avatar)
  
  ::zproto::Avatar* temp = push_avatar_;
  push_avatar_ = NULL;
  return temp;
}
inline void PushUser::set_allocated_push_avatar(::zproto::Avatar* push_avatar) {
  delete push_avatar_;
  push_avatar_ = push_avatar;
  if (push_avatar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.PushUser.push_avatar)
}

inline const PushUser* PushUser::internal_default_instance() {
  return &PushUser_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_users_2eproto__INCLUDED
