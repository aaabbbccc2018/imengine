// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: files.proto

#ifndef PROTOBUF_files_2eproto__INCLUDED
#define PROTOBUF_files_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace zproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_files_2eproto();
void protobuf_InitDefaults_files_2eproto();
void protobuf_AssignDesc_files_2eproto();
void protobuf_ShutdownFile_files_2eproto();

class Avatar;
class AvatarImage;
class FileLocation;

// ===================================================================

class FileLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.FileLocation) */ {
 public:
  FileLocation();
  virtual ~FileLocation();

  FileLocation(const FileLocation& from);

  inline FileLocation& operator=(const FileLocation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileLocation& default_instance();

  static const FileLocation* internal_default_instance();

  void Swap(FileLocation* other);

  // implements Message ----------------------------------------------

  inline FileLocation* New() const { return New(NULL); }

  FileLocation* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileLocation* other);
  void UnsafeMergeFrom(const FileLocation& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int64 file_id() const;
  void set_file_id(::google::protobuf::int64 value);

  // optional int64 access_hash = 2;
  void clear_access_hash();
  static const int kAccessHashFieldNumber = 2;
  ::google::protobuf::int64 access_hash() const;
  void set_access_hash(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.FileLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 file_id_;
  ::google::protobuf::int64 access_hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_files_2eproto_impl();
  friend void  protobuf_AddDesc_files_2eproto_impl();
  friend void protobuf_AssignDesc_files_2eproto();
  friend void protobuf_ShutdownFile_files_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FileLocation> FileLocation_default_instance_;

// -------------------------------------------------------------------

class AvatarImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.AvatarImage) */ {
 public:
  AvatarImage();
  virtual ~AvatarImage();

  AvatarImage(const AvatarImage& from);

  inline AvatarImage& operator=(const AvatarImage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvatarImage& default_instance();

  static const AvatarImage* internal_default_instance();

  void Swap(AvatarImage* other);

  // implements Message ----------------------------------------------

  inline AvatarImage* New() const { return New(NULL); }

  AvatarImage* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AvatarImage* other);
  void UnsafeMergeFrom(const AvatarImage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.FileLocation file_location = 1;
  bool has_file_location() const;
  void clear_file_location();
  static const int kFileLocationFieldNumber = 1;
  const ::zproto::FileLocation& file_location() const;
  ::zproto::FileLocation* mutable_file_location();
  ::zproto::FileLocation* release_file_location();
  void set_allocated_file_location(::zproto::FileLocation* file_location);

  // optional int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 file_size = 4;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  ::google::protobuf::int32 file_size() const;
  void set_file_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.AvatarImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::FileLocation* file_location_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 file_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_files_2eproto_impl();
  friend void  protobuf_AddDesc_files_2eproto_impl();
  friend void protobuf_AssignDesc_files_2eproto();
  friend void protobuf_ShutdownFile_files_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AvatarImage> AvatarImage_default_instance_;

// -------------------------------------------------------------------

class Avatar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.Avatar) */ {
 public:
  Avatar();
  virtual ~Avatar();

  Avatar(const Avatar& from);

  inline Avatar& operator=(const Avatar& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Avatar& default_instance();

  static const Avatar* internal_default_instance();

  void Swap(Avatar* other);

  // implements Message ----------------------------------------------

  inline Avatar* New() const { return New(NULL); }

  Avatar* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Avatar* other);
  void UnsafeMergeFrom(const Avatar& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.AvatarImage small_image = 1;
  bool has_small_image() const;
  void clear_small_image();
  static const int kSmallImageFieldNumber = 1;
  const ::zproto::AvatarImage& small_image() const;
  ::zproto::AvatarImage* mutable_small_image();
  ::zproto::AvatarImage* release_small_image();
  void set_allocated_small_image(::zproto::AvatarImage* small_image);

  // optional .zproto.AvatarImage large_image = 2;
  bool has_large_image() const;
  void clear_large_image();
  static const int kLargeImageFieldNumber = 2;
  const ::zproto::AvatarImage& large_image() const;
  ::zproto::AvatarImage* mutable_large_image();
  ::zproto::AvatarImage* release_large_image();
  void set_allocated_large_image(::zproto::AvatarImage* large_image);

  // optional .zproto.AvatarImage full_image = 3;
  bool has_full_image() const;
  void clear_full_image();
  static const int kFullImageFieldNumber = 3;
  const ::zproto::AvatarImage& full_image() const;
  ::zproto::AvatarImage* mutable_full_image();
  ::zproto::AvatarImage* release_full_image();
  void set_allocated_full_image(::zproto::AvatarImage* full_image);

  // @@protoc_insertion_point(class_scope:zproto.Avatar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::AvatarImage* small_image_;
  ::zproto::AvatarImage* large_image_;
  ::zproto::AvatarImage* full_image_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_files_2eproto_impl();
  friend void  protobuf_AddDesc_files_2eproto_impl();
  friend void protobuf_AssignDesc_files_2eproto();
  friend void protobuf_ShutdownFile_files_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Avatar> Avatar_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FileLocation

// optional int64 file_id = 1;
inline void FileLocation::clear_file_id() {
  file_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileLocation::file_id() const {
  // @@protoc_insertion_point(field_get:zproto.FileLocation.file_id)
  return file_id_;
}
inline void FileLocation::set_file_id(::google::protobuf::int64 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.FileLocation.file_id)
}

// optional int64 access_hash = 2;
inline void FileLocation::clear_access_hash() {
  access_hash_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileLocation::access_hash() const {
  // @@protoc_insertion_point(field_get:zproto.FileLocation.access_hash)
  return access_hash_;
}
inline void FileLocation::set_access_hash(::google::protobuf::int64 value) {
  
  access_hash_ = value;
  // @@protoc_insertion_point(field_set:zproto.FileLocation.access_hash)
}

inline const FileLocation* FileLocation::internal_default_instance() {
  return &FileLocation_default_instance_.get();
}
// -------------------------------------------------------------------

// AvatarImage

// optional .zproto.FileLocation file_location = 1;
inline bool AvatarImage::has_file_location() const {
  return this != internal_default_instance() && file_location_ != NULL;
}
inline void AvatarImage::clear_file_location() {
  if (GetArenaNoVirtual() == NULL && file_location_ != NULL) delete file_location_;
  file_location_ = NULL;
}
inline const ::zproto::FileLocation& AvatarImage::file_location() const {
  // @@protoc_insertion_point(field_get:zproto.AvatarImage.file_location)
  return file_location_ != NULL ? *file_location_
                         : *::zproto::FileLocation::internal_default_instance();
}
inline ::zproto::FileLocation* AvatarImage::mutable_file_location() {
  
  if (file_location_ == NULL) {
    file_location_ = new ::zproto::FileLocation;
  }
  // @@protoc_insertion_point(field_mutable:zproto.AvatarImage.file_location)
  return file_location_;
}
inline ::zproto::FileLocation* AvatarImage::release_file_location() {
  // @@protoc_insertion_point(field_release:zproto.AvatarImage.file_location)
  
  ::zproto::FileLocation* temp = file_location_;
  file_location_ = NULL;
  return temp;
}
inline void AvatarImage::set_allocated_file_location(::zproto::FileLocation* file_location) {
  delete file_location_;
  file_location_ = file_location;
  if (file_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.AvatarImage.file_location)
}

// optional int32 width = 2;
inline void AvatarImage::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 AvatarImage::width() const {
  // @@protoc_insertion_point(field_get:zproto.AvatarImage.width)
  return width_;
}
inline void AvatarImage::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:zproto.AvatarImage.width)
}

// optional int32 height = 3;
inline void AvatarImage::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 AvatarImage::height() const {
  // @@protoc_insertion_point(field_get:zproto.AvatarImage.height)
  return height_;
}
inline void AvatarImage::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:zproto.AvatarImage.height)
}

// optional int32 file_size = 4;
inline void AvatarImage::clear_file_size() {
  file_size_ = 0;
}
inline ::google::protobuf::int32 AvatarImage::file_size() const {
  // @@protoc_insertion_point(field_get:zproto.AvatarImage.file_size)
  return file_size_;
}
inline void AvatarImage::set_file_size(::google::protobuf::int32 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:zproto.AvatarImage.file_size)
}

inline const AvatarImage* AvatarImage::internal_default_instance() {
  return &AvatarImage_default_instance_.get();
}
// -------------------------------------------------------------------

// Avatar

// optional .zproto.AvatarImage small_image = 1;
inline bool Avatar::has_small_image() const {
  return this != internal_default_instance() && small_image_ != NULL;
}
inline void Avatar::clear_small_image() {
  if (GetArenaNoVirtual() == NULL && small_image_ != NULL) delete small_image_;
  small_image_ = NULL;
}
inline const ::zproto::AvatarImage& Avatar::small_image() const {
  // @@protoc_insertion_point(field_get:zproto.Avatar.small_image)
  return small_image_ != NULL ? *small_image_
                         : *::zproto::AvatarImage::internal_default_instance();
}
inline ::zproto::AvatarImage* Avatar::mutable_small_image() {
  
  if (small_image_ == NULL) {
    small_image_ = new ::zproto::AvatarImage;
  }
  // @@protoc_insertion_point(field_mutable:zproto.Avatar.small_image)
  return small_image_;
}
inline ::zproto::AvatarImage* Avatar::release_small_image() {
  // @@protoc_insertion_point(field_release:zproto.Avatar.small_image)
  
  ::zproto::AvatarImage* temp = small_image_;
  small_image_ = NULL;
  return temp;
}
inline void Avatar::set_allocated_small_image(::zproto::AvatarImage* small_image) {
  delete small_image_;
  small_image_ = small_image;
  if (small_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.Avatar.small_image)
}

// optional .zproto.AvatarImage large_image = 2;
inline bool Avatar::has_large_image() const {
  return this != internal_default_instance() && large_image_ != NULL;
}
inline void Avatar::clear_large_image() {
  if (GetArenaNoVirtual() == NULL && large_image_ != NULL) delete large_image_;
  large_image_ = NULL;
}
inline const ::zproto::AvatarImage& Avatar::large_image() const {
  // @@protoc_insertion_point(field_get:zproto.Avatar.large_image)
  return large_image_ != NULL ? *large_image_
                         : *::zproto::AvatarImage::internal_default_instance();
}
inline ::zproto::AvatarImage* Avatar::mutable_large_image() {
  
  if (large_image_ == NULL) {
    large_image_ = new ::zproto::AvatarImage;
  }
  // @@protoc_insertion_point(field_mutable:zproto.Avatar.large_image)
  return large_image_;
}
inline ::zproto::AvatarImage* Avatar::release_large_image() {
  // @@protoc_insertion_point(field_release:zproto.Avatar.large_image)
  
  ::zproto::AvatarImage* temp = large_image_;
  large_image_ = NULL;
  return temp;
}
inline void Avatar::set_allocated_large_image(::zproto::AvatarImage* large_image) {
  delete large_image_;
  large_image_ = large_image;
  if (large_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.Avatar.large_image)
}

// optional .zproto.AvatarImage full_image = 3;
inline bool Avatar::has_full_image() const {
  return this != internal_default_instance() && full_image_ != NULL;
}
inline void Avatar::clear_full_image() {
  if (GetArenaNoVirtual() == NULL && full_image_ != NULL) delete full_image_;
  full_image_ = NULL;
}
inline const ::zproto::AvatarImage& Avatar::full_image() const {
  // @@protoc_insertion_point(field_get:zproto.Avatar.full_image)
  return full_image_ != NULL ? *full_image_
                         : *::zproto::AvatarImage::internal_default_instance();
}
inline ::zproto::AvatarImage* Avatar::mutable_full_image() {
  
  if (full_image_ == NULL) {
    full_image_ = new ::zproto::AvatarImage;
  }
  // @@protoc_insertion_point(field_mutable:zproto.Avatar.full_image)
  return full_image_;
}
inline ::zproto::AvatarImage* Avatar::release_full_image() {
  // @@protoc_insertion_point(field_release:zproto.Avatar.full_image)
  
  ::zproto::AvatarImage* temp = full_image_;
  full_image_ = NULL;
  return temp;
}
inline void Avatar::set_allocated_full_image(::zproto::AvatarImage* full_image) {
  delete full_image_;
  full_image_ = full_image;
  if (full_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.Avatar.full_image)
}

inline const Avatar* Avatar::internal_default_instance() {
  return &Avatar_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_files_2eproto__INCLUDED
