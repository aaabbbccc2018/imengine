// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging.proto

#ifndef PROTOBUF_messaging_2eproto__INCLUDED
#define PROTOBUF_messaging_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "misc.pb.h"
#include "peers.pb.h"
#include "users.pb.h"
#include "group_base.pb.h"
#include "messaging_base.pb.h"
// @@protoc_insertion_point(includes)

namespace zproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messaging_2eproto();
void protobuf_InitDefaults_messaging_2eproto();
void protobuf_AssignDesc_messaging_2eproto();
void protobuf_ShutdownFile_messaging_2eproto();

class ChatClearNotify;
class ChatDeleteNotify;
class ChatGroupsChangedNotify;
class ClearChatReq;
class DeleteChatReq;
class DeleteMessageReq;
class DialogGroup;
class DialogShort;
class LoadHistoryReq;
class LoadHistoryRsp;
class MessageContentChangedNotify;
class MessageDateChangedNotify;
class MessageDeleteNotify;
class MessageNotify;
class MessageReadByMeNotify;
class MessageReadNotify;
class MessageReadReq;
class MessageReceivedNotify;
class MessageReceivedReq;
class MessageSentNotify;
class SendMessageReq;

// ===================================================================

class SendMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.SendMessageReq) */ {
 public:
  SendMessageReq();
  virtual ~SendMessageReq();

  SendMessageReq(const SendMessageReq& from);

  inline SendMessageReq& operator=(const SendMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageReq& default_instance();

  static const SendMessageReq* internal_default_instance();

  void Swap(SendMessageReq* other);

  // implements Message ----------------------------------------------

  inline SendMessageReq* New() const { return New(NULL); }

  SendMessageReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendMessageReq* other);
  void UnsafeMergeFrom(const SendMessageReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.OutPeer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::OutPeer& peer() const;
  ::zproto::OutPeer* mutable_peer();
  ::zproto::OutPeer* release_peer();
  void set_allocated_peer(::zproto::OutPeer* peer);

  // optional int64 rid = 2;
  void clear_rid();
  static const int kRidFieldNumber = 2;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // optional .zproto.InstantMessage message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::zproto::InstantMessage& message() const;
  ::zproto::InstantMessage* mutable_message();
  ::zproto::InstantMessage* release_message();
  void set_allocated_message(::zproto::InstantMessage* message);

  // optional bytes passthrough_data = 4;
  void clear_passthrough_data();
  static const int kPassthroughDataFieldNumber = 4;
  const ::std::string& passthrough_data() const;
  void set_passthrough_data(const ::std::string& value);
  void set_passthrough_data(const char* value);
  void set_passthrough_data(const void* value, size_t size);
  ::std::string* mutable_passthrough_data();
  ::std::string* release_passthrough_data();
  void set_allocated_passthrough_data(::std::string* passthrough_data);

  // @@protoc_insertion_point(class_scope:zproto.SendMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr passthrough_data_;
  ::zproto::OutPeer* peer_;
  ::zproto::InstantMessage* message_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SendMessageReq> SendMessageReq_default_instance_;

// -------------------------------------------------------------------

class MessageReceivedReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageReceivedReq) */ {
 public:
  MessageReceivedReq();
  virtual ~MessageReceivedReq();

  MessageReceivedReq(const MessageReceivedReq& from);

  inline MessageReceivedReq& operator=(const MessageReceivedReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageReceivedReq& default_instance();

  static const MessageReceivedReq* internal_default_instance();

  void Swap(MessageReceivedReq* other);

  // implements Message ----------------------------------------------

  inline MessageReceivedReq* New() const { return New(NULL); }

  MessageReceivedReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageReceivedReq* other);
  void UnsafeMergeFrom(const MessageReceivedReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.OutPeer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::OutPeer& peer() const;
  ::zproto::OutPeer* mutable_peer();
  ::zproto::OutPeer* release_peer();
  void set_allocated_peer(::zproto::OutPeer* peer);

  // optional int64 date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.MessageReceivedReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::OutPeer* peer_;
  ::google::protobuf::int64 date_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageReceivedReq> MessageReceivedReq_default_instance_;

// -------------------------------------------------------------------

class MessageReadReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageReadReq) */ {
 public:
  MessageReadReq();
  virtual ~MessageReadReq();

  MessageReadReq(const MessageReadReq& from);

  inline MessageReadReq& operator=(const MessageReadReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageReadReq& default_instance();

  static const MessageReadReq* internal_default_instance();

  void Swap(MessageReadReq* other);

  // implements Message ----------------------------------------------

  inline MessageReadReq* New() const { return New(NULL); }

  MessageReadReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageReadReq* other);
  void UnsafeMergeFrom(const MessageReadReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.OutPeer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::OutPeer& peer() const;
  ::zproto::OutPeer* mutable_peer();
  ::zproto::OutPeer* release_peer();
  void set_allocated_peer(::zproto::OutPeer* peer);

  // optional int64 date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.MessageReadReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::OutPeer* peer_;
  ::google::protobuf::int64 date_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageReadReq> MessageReadReq_default_instance_;

// -------------------------------------------------------------------

class DeleteMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.DeleteMessageReq) */ {
 public:
  DeleteMessageReq();
  virtual ~DeleteMessageReq();

  DeleteMessageReq(const DeleteMessageReq& from);

  inline DeleteMessageReq& operator=(const DeleteMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteMessageReq& default_instance();

  static const DeleteMessageReq* internal_default_instance();

  void Swap(DeleteMessageReq* other);

  // implements Message ----------------------------------------------

  inline DeleteMessageReq* New() const { return New(NULL); }

  DeleteMessageReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteMessageReq* other);
  void UnsafeMergeFrom(const DeleteMessageReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.OutPeer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::OutPeer& peer() const;
  ::zproto::OutPeer* mutable_peer();
  ::zproto::OutPeer* release_peer();
  void set_allocated_peer(::zproto::OutPeer* peer);

  // repeated int64 rids = 3;
  int rids_size() const;
  void clear_rids();
  static const int kRidsFieldNumber = 3;
  ::google::protobuf::int64 rids(int index) const;
  void set_rids(int index, ::google::protobuf::int64 value);
  void add_rids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rids();

  // @@protoc_insertion_point(class_scope:zproto.DeleteMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rids_;
  ::zproto::OutPeer* peer_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DeleteMessageReq> DeleteMessageReq_default_instance_;

// -------------------------------------------------------------------

class ClearChatReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ClearChatReq) */ {
 public:
  ClearChatReq();
  virtual ~ClearChatReq();

  ClearChatReq(const ClearChatReq& from);

  inline ClearChatReq& operator=(const ClearChatReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearChatReq& default_instance();

  static const ClearChatReq* internal_default_instance();

  void Swap(ClearChatReq* other);

  // implements Message ----------------------------------------------

  inline ClearChatReq* New() const { return New(NULL); }

  ClearChatReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearChatReq* other);
  void UnsafeMergeFrom(const ClearChatReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.OutPeer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::OutPeer& peer() const;
  ::zproto::OutPeer* mutable_peer();
  ::zproto::OutPeer* release_peer();
  void set_allocated_peer(::zproto::OutPeer* peer);

  // @@protoc_insertion_point(class_scope:zproto.ClearChatReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::OutPeer* peer_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClearChatReq> ClearChatReq_default_instance_;

// -------------------------------------------------------------------

class DeleteChatReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.DeleteChatReq) */ {
 public:
  DeleteChatReq();
  virtual ~DeleteChatReq();

  DeleteChatReq(const DeleteChatReq& from);

  inline DeleteChatReq& operator=(const DeleteChatReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteChatReq& default_instance();

  static const DeleteChatReq* internal_default_instance();

  void Swap(DeleteChatReq* other);

  // implements Message ----------------------------------------------

  inline DeleteChatReq* New() const { return New(NULL); }

  DeleteChatReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteChatReq* other);
  void UnsafeMergeFrom(const DeleteChatReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.OutPeer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::OutPeer& peer() const;
  ::zproto::OutPeer* mutable_peer();
  ::zproto::OutPeer* release_peer();
  void set_allocated_peer(::zproto::OutPeer* peer);

  // @@protoc_insertion_point(class_scope:zproto.DeleteChatReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::OutPeer* peer_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DeleteChatReq> DeleteChatReq_default_instance_;

// -------------------------------------------------------------------

class MessageNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageNotify) */ {
 public:
  MessageNotify();
  virtual ~MessageNotify();

  MessageNotify(const MessageNotify& from);

  inline MessageNotify& operator=(const MessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageNotify& default_instance();

  static const MessageNotify* internal_default_instance();

  void Swap(MessageNotify* other);

  // implements Message ----------------------------------------------

  inline MessageNotify* New() const { return New(NULL); }

  MessageNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageNotify* other);
  void UnsafeMergeFrom(const MessageNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // optional string sender_uid = 2;
  void clear_sender_uid();
  static const int kSenderUidFieldNumber = 2;
  const ::std::string& sender_uid() const;
  void set_sender_uid(const ::std::string& value);
  void set_sender_uid(const char* value);
  void set_sender_uid(const char* value, size_t size);
  ::std::string* mutable_sender_uid();
  ::std::string* release_sender_uid();
  void set_allocated_sender_uid(::std::string* sender_uid);

  // optional int64 date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // optional int64 rid = 4;
  void clear_rid();
  static const int kRidFieldNumber = 4;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // optional .zproto.InstantMessage message = 5;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::zproto::InstantMessage& message() const;
  ::zproto::InstantMessage* mutable_message();
  ::zproto::InstantMessage* release_message();
  void set_allocated_message(::zproto::InstantMessage* message);

  // @@protoc_insertion_point(class_scope:zproto.MessageNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_uid_;
  ::zproto::Peer* peer_;
  ::zproto::InstantMessage* message_;
  ::google::protobuf::int64 date_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageNotify> MessageNotify_default_instance_;

// -------------------------------------------------------------------

class MessageContentChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageContentChangedNotify) */ {
 public:
  MessageContentChangedNotify();
  virtual ~MessageContentChangedNotify();

  MessageContentChangedNotify(const MessageContentChangedNotify& from);

  inline MessageContentChangedNotify& operator=(const MessageContentChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageContentChangedNotify& default_instance();

  static const MessageContentChangedNotify* internal_default_instance();

  void Swap(MessageContentChangedNotify* other);

  // implements Message ----------------------------------------------

  inline MessageContentChangedNotify* New() const { return New(NULL); }

  MessageContentChangedNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageContentChangedNotify* other);
  void UnsafeMergeFrom(const MessageContentChangedNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // optional int64 rid = 2;
  void clear_rid();
  static const int kRidFieldNumber = 2;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // optional .zproto.InstantMessage message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::zproto::InstantMessage& message() const;
  ::zproto::InstantMessage* mutable_message();
  ::zproto::InstantMessage* release_message();
  void set_allocated_message(::zproto::InstantMessage* message);

  // @@protoc_insertion_point(class_scope:zproto.MessageContentChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  ::zproto::InstantMessage* message_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageContentChangedNotify> MessageContentChangedNotify_default_instance_;

// -------------------------------------------------------------------

class MessageDateChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageDateChangedNotify) */ {
 public:
  MessageDateChangedNotify();
  virtual ~MessageDateChangedNotify();

  MessageDateChangedNotify(const MessageDateChangedNotify& from);

  inline MessageDateChangedNotify& operator=(const MessageDateChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageDateChangedNotify& default_instance();

  static const MessageDateChangedNotify* internal_default_instance();

  void Swap(MessageDateChangedNotify* other);

  // implements Message ----------------------------------------------

  inline MessageDateChangedNotify* New() const { return New(NULL); }

  MessageDateChangedNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageDateChangedNotify* other);
  void UnsafeMergeFrom(const MessageDateChangedNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // optional int64 rid = 2;
  void clear_rid();
  static const int kRidFieldNumber = 2;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // optional int64 date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.MessageDateChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  ::google::protobuf::int64 rid_;
  ::google::protobuf::int64 date_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageDateChangedNotify> MessageDateChangedNotify_default_instance_;

// -------------------------------------------------------------------

class MessageSentNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageSentNotify) */ {
 public:
  MessageSentNotify();
  virtual ~MessageSentNotify();

  MessageSentNotify(const MessageSentNotify& from);

  inline MessageSentNotify& operator=(const MessageSentNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageSentNotify& default_instance();

  static const MessageSentNotify* internal_default_instance();

  void Swap(MessageSentNotify* other);

  // implements Message ----------------------------------------------

  inline MessageSentNotify* New() const { return New(NULL); }

  MessageSentNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageSentNotify* other);
  void UnsafeMergeFrom(const MessageSentNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // optional int64 rid = 2;
  void clear_rid();
  static const int kRidFieldNumber = 2;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // optional int64 date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.MessageSentNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  ::google::protobuf::int64 rid_;
  ::google::protobuf::int64 date_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageSentNotify> MessageSentNotify_default_instance_;

// -------------------------------------------------------------------

class MessageReceivedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageReceivedNotify) */ {
 public:
  MessageReceivedNotify();
  virtual ~MessageReceivedNotify();

  MessageReceivedNotify(const MessageReceivedNotify& from);

  inline MessageReceivedNotify& operator=(const MessageReceivedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageReceivedNotify& default_instance();

  static const MessageReceivedNotify* internal_default_instance();

  void Swap(MessageReceivedNotify* other);

  // implements Message ----------------------------------------------

  inline MessageReceivedNotify* New() const { return New(NULL); }

  MessageReceivedNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageReceivedNotify* other);
  void UnsafeMergeFrom(const MessageReceivedNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // optional int64 start_date = 2;
  void clear_start_date();
  static const int kStartDateFieldNumber = 2;
  ::google::protobuf::int64 start_date() const;
  void set_start_date(::google::protobuf::int64 value);

  // optional int64 received_date = 3;
  void clear_received_date();
  static const int kReceivedDateFieldNumber = 3;
  ::google::protobuf::int64 received_date() const;
  void set_received_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.MessageReceivedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  ::google::protobuf::int64 start_date_;
  ::google::protobuf::int64 received_date_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageReceivedNotify> MessageReceivedNotify_default_instance_;

// -------------------------------------------------------------------

class MessageReadNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageReadNotify) */ {
 public:
  MessageReadNotify();
  virtual ~MessageReadNotify();

  MessageReadNotify(const MessageReadNotify& from);

  inline MessageReadNotify& operator=(const MessageReadNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageReadNotify& default_instance();

  static const MessageReadNotify* internal_default_instance();

  void Swap(MessageReadNotify* other);

  // implements Message ----------------------------------------------

  inline MessageReadNotify* New() const { return New(NULL); }

  MessageReadNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageReadNotify* other);
  void UnsafeMergeFrom(const MessageReadNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // optional int64 start_date = 2;
  void clear_start_date();
  static const int kStartDateFieldNumber = 2;
  ::google::protobuf::int64 start_date() const;
  void set_start_date(::google::protobuf::int64 value);

  // optional int64 read_date = 3;
  void clear_read_date();
  static const int kReadDateFieldNumber = 3;
  ::google::protobuf::int64 read_date() const;
  void set_read_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.MessageReadNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  ::google::protobuf::int64 start_date_;
  ::google::protobuf::int64 read_date_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageReadNotify> MessageReadNotify_default_instance_;

// -------------------------------------------------------------------

class MessageReadByMeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageReadByMeNotify) */ {
 public:
  MessageReadByMeNotify();
  virtual ~MessageReadByMeNotify();

  MessageReadByMeNotify(const MessageReadByMeNotify& from);

  inline MessageReadByMeNotify& operator=(const MessageReadByMeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageReadByMeNotify& default_instance();

  static const MessageReadByMeNotify* internal_default_instance();

  void Swap(MessageReadByMeNotify* other);

  // implements Message ----------------------------------------------

  inline MessageReadByMeNotify* New() const { return New(NULL); }

  MessageReadByMeNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageReadByMeNotify* other);
  void UnsafeMergeFrom(const MessageReadByMeNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // optional int64 start_date = 2;
  void clear_start_date();
  static const int kStartDateFieldNumber = 2;
  ::google::protobuf::int64 start_date() const;
  void set_start_date(::google::protobuf::int64 value);

  // optional int32 unread_counter = 3;
  void clear_unread_counter();
  static const int kUnreadCounterFieldNumber = 3;
  ::google::protobuf::int32 unread_counter() const;
  void set_unread_counter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.MessageReadByMeNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  ::google::protobuf::int64 start_date_;
  ::google::protobuf::int32 unread_counter_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageReadByMeNotify> MessageReadByMeNotify_default_instance_;

// -------------------------------------------------------------------

class MessageDeleteNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageDeleteNotify) */ {
 public:
  MessageDeleteNotify();
  virtual ~MessageDeleteNotify();

  MessageDeleteNotify(const MessageDeleteNotify& from);

  inline MessageDeleteNotify& operator=(const MessageDeleteNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageDeleteNotify& default_instance();

  static const MessageDeleteNotify* internal_default_instance();

  void Swap(MessageDeleteNotify* other);

  // implements Message ----------------------------------------------

  inline MessageDeleteNotify* New() const { return New(NULL); }

  MessageDeleteNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageDeleteNotify* other);
  void UnsafeMergeFrom(const MessageDeleteNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // repeated int64 rids = 2;
  int rids_size() const;
  void clear_rids();
  static const int kRidsFieldNumber = 2;
  ::google::protobuf::int64 rids(int index) const;
  void set_rids(int index, ::google::protobuf::int64 value);
  void add_rids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rids();

  // @@protoc_insertion_point(class_scope:zproto.MessageDeleteNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rids_;
  ::zproto::Peer* peer_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageDeleteNotify> MessageDeleteNotify_default_instance_;

// -------------------------------------------------------------------

class ChatClearNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ChatClearNotify) */ {
 public:
  ChatClearNotify();
  virtual ~ChatClearNotify();

  ChatClearNotify(const ChatClearNotify& from);

  inline ChatClearNotify& operator=(const ChatClearNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatClearNotify& default_instance();

  static const ChatClearNotify* internal_default_instance();

  void Swap(ChatClearNotify* other);

  // implements Message ----------------------------------------------

  inline ChatClearNotify* New() const { return New(NULL); }

  ChatClearNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatClearNotify* other);
  void UnsafeMergeFrom(const ChatClearNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // @@protoc_insertion_point(class_scope:zproto.ChatClearNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChatClearNotify> ChatClearNotify_default_instance_;

// -------------------------------------------------------------------

class ChatDeleteNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ChatDeleteNotify) */ {
 public:
  ChatDeleteNotify();
  virtual ~ChatDeleteNotify();

  ChatDeleteNotify(const ChatDeleteNotify& from);

  inline ChatDeleteNotify& operator=(const ChatDeleteNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatDeleteNotify& default_instance();

  static const ChatDeleteNotify* internal_default_instance();

  void Swap(ChatDeleteNotify* other);

  // implements Message ----------------------------------------------

  inline ChatDeleteNotify* New() const { return New(NULL); }

  ChatDeleteNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatDeleteNotify* other);
  void UnsafeMergeFrom(const ChatDeleteNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // @@protoc_insertion_point(class_scope:zproto.ChatDeleteNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChatDeleteNotify> ChatDeleteNotify_default_instance_;

// -------------------------------------------------------------------

class DialogShort : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.DialogShort) */ {
 public:
  DialogShort();
  virtual ~DialogShort();

  DialogShort(const DialogShort& from);

  inline DialogShort& operator=(const DialogShort& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DialogShort& default_instance();

  static const DialogShort* internal_default_instance();

  void Swap(DialogShort* other);

  // implements Message ----------------------------------------------

  inline DialogShort* New() const { return New(NULL); }

  DialogShort* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DialogShort* other);
  void UnsafeMergeFrom(const DialogShort& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* mutable_peer();
  ::zproto::Peer* release_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // optional int32 counter = 2;
  void clear_counter();
  static const int kCounterFieldNumber = 2;
  ::google::protobuf::int32 counter() const;
  void set_counter(::google::protobuf::int32 value);

  // optional int64 date = 4;
  void clear_date();
  static const int kDateFieldNumber = 4;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.DialogShort)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  ::google::protobuf::int64 date_;
  ::google::protobuf::int32 counter_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DialogShort> DialogShort_default_instance_;

// -------------------------------------------------------------------

class DialogGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.DialogGroup) */ {
 public:
  DialogGroup();
  virtual ~DialogGroup();

  DialogGroup(const DialogGroup& from);

  inline DialogGroup& operator=(const DialogGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DialogGroup& default_instance();

  static const DialogGroup* internal_default_instance();

  void Swap(DialogGroup* other);

  // implements Message ----------------------------------------------

  inline DialogGroup* New() const { return New(NULL); }

  DialogGroup* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DialogGroup* other);
  void UnsafeMergeFrom(const DialogGroup& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // repeated .zproto.DialogShort dialogs = 3;
  int dialogs_size() const;
  void clear_dialogs();
  static const int kDialogsFieldNumber = 3;
  const ::zproto::DialogShort& dialogs(int index) const;
  ::zproto::DialogShort* mutable_dialogs(int index);
  ::zproto::DialogShort* add_dialogs();
  ::google::protobuf::RepeatedPtrField< ::zproto::DialogShort >*
      mutable_dialogs();
  const ::google::protobuf::RepeatedPtrField< ::zproto::DialogShort >&
      dialogs() const;

  // @@protoc_insertion_point(class_scope:zproto.DialogGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::DialogShort > dialogs_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DialogGroup> DialogGroup_default_instance_;

// -------------------------------------------------------------------

class ChatGroupsChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ChatGroupsChangedNotify) */ {
 public:
  ChatGroupsChangedNotify();
  virtual ~ChatGroupsChangedNotify();

  ChatGroupsChangedNotify(const ChatGroupsChangedNotify& from);

  inline ChatGroupsChangedNotify& operator=(const ChatGroupsChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupsChangedNotify& default_instance();

  static const ChatGroupsChangedNotify* internal_default_instance();

  void Swap(ChatGroupsChangedNotify* other);

  // implements Message ----------------------------------------------

  inline ChatGroupsChangedNotify* New() const { return New(NULL); }

  ChatGroupsChangedNotify* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatGroupsChangedNotify* other);
  void UnsafeMergeFrom(const ChatGroupsChangedNotify& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.DialogGroup dialogs = 1;
  int dialogs_size() const;
  void clear_dialogs();
  static const int kDialogsFieldNumber = 1;
  const ::zproto::DialogGroup& dialogs(int index) const;
  ::zproto::DialogGroup* mutable_dialogs(int index);
  ::zproto::DialogGroup* add_dialogs();
  ::google::protobuf::RepeatedPtrField< ::zproto::DialogGroup >*
      mutable_dialogs();
  const ::google::protobuf::RepeatedPtrField< ::zproto::DialogGroup >&
      dialogs() const;

  // @@protoc_insertion_point(class_scope:zproto.ChatGroupsChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::DialogGroup > dialogs_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChatGroupsChangedNotify> ChatGroupsChangedNotify_default_instance_;

// -------------------------------------------------------------------

class LoadHistoryReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadHistoryReq) */ {
 public:
  LoadHistoryReq();
  virtual ~LoadHistoryReq();

  LoadHistoryReq(const LoadHistoryReq& from);

  inline LoadHistoryReq& operator=(const LoadHistoryReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadHistoryReq& default_instance();

  static const LoadHistoryReq* internal_default_instance();

  void Swap(LoadHistoryReq* other);

  // implements Message ----------------------------------------------

  inline LoadHistoryReq* New() const { return New(NULL); }

  LoadHistoryReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoadHistoryReq* other);
  void UnsafeMergeFrom(const LoadHistoryReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.OutPeer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::OutPeer& peer() const;
  ::zproto::OutPeer* mutable_peer();
  ::zproto::OutPeer* release_peer();
  void set_allocated_peer(::zproto::OutPeer* peer);

  // optional int64 date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // optional .zproto.ListLoadMode load_mode = 5;
  void clear_load_mode();
  static const int kLoadModeFieldNumber = 5;
  ::zproto::ListLoadMode load_mode() const;
  void set_load_mode(::zproto::ListLoadMode value);

  // optional int32 limit = 4;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // repeated .zproto.UpdateOptimization optimizations = 6;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 6;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // @@protoc_insertion_point(class_scope:zproto.LoadHistoryReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::zproto::OutPeer* peer_;
  ::google::protobuf::int64 date_;
  int load_mode_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LoadHistoryReq> LoadHistoryReq_default_instance_;

// -------------------------------------------------------------------

class LoadHistoryRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadHistoryRsp) */ {
 public:
  LoadHistoryRsp();
  virtual ~LoadHistoryRsp();

  LoadHistoryRsp(const LoadHistoryRsp& from);

  inline LoadHistoryRsp& operator=(const LoadHistoryRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadHistoryRsp& default_instance();

  static const LoadHistoryRsp* internal_default_instance();

  void Swap(LoadHistoryRsp* other);

  // implements Message ----------------------------------------------

  inline LoadHistoryRsp* New() const { return New(NULL); }

  LoadHistoryRsp* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoadHistoryRsp* other);
  void UnsafeMergeFrom(const LoadHistoryRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.MessageContainer history = 1;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 1;
  const ::zproto::MessageContainer& history(int index) const;
  ::zproto::MessageContainer* mutable_history(int index);
  ::zproto::MessageContainer* add_history();
  ::google::protobuf::RepeatedPtrField< ::zproto::MessageContainer >*
      mutable_history();
  const ::google::protobuf::RepeatedPtrField< ::zproto::MessageContainer >&
      history() const;

  // repeated .zproto.User users = 2;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 2;
  const ::zproto::User& users(int index) const;
  ::zproto::User* mutable_users(int index);
  ::zproto::User* add_users();
  ::google::protobuf::RepeatedPtrField< ::zproto::User >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::zproto::User >&
      users() const;

  // repeated .zproto.UserOutPeer user_peers = 4;
  int user_peers_size() const;
  void clear_user_peers();
  static const int kUserPeersFieldNumber = 4;
  const ::zproto::UserOutPeer& user_peers(int index) const;
  ::zproto::UserOutPeer* mutable_user_peers(int index);
  ::zproto::UserOutPeer* add_user_peers();
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
      mutable_user_peers();
  const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
      user_peers() const;

  // repeated .zproto.Group groups = 5;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 5;
  const ::zproto::Group& groups(int index) const;
  ::zproto::Group* mutable_groups(int index);
  ::zproto::Group* add_groups();
  ::google::protobuf::RepeatedPtrField< ::zproto::Group >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::zproto::Group >&
      groups() const;

  // repeated .zproto.GroupOutPeer group_peers = 6;
  int group_peers_size() const;
  void clear_group_peers();
  static const int kGroupPeersFieldNumber = 6;
  const ::zproto::GroupOutPeer& group_peers(int index) const;
  ::zproto::GroupOutPeer* mutable_group_peers(int index);
  ::zproto::GroupOutPeer* add_group_peers();
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer >*
      mutable_group_peers();
  const ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer >&
      group_peers() const;

  // @@protoc_insertion_point(class_scope:zproto.LoadHistoryRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::MessageContainer > history_;
  ::google::protobuf::RepeatedPtrField< ::zproto::User > users_;
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer > user_peers_;
  ::google::protobuf::RepeatedPtrField< ::zproto::Group > groups_;
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer > group_peers_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messaging_2eproto_impl();
  friend void  protobuf_AddDesc_messaging_2eproto_impl();
  friend void protobuf_AssignDesc_messaging_2eproto();
  friend void protobuf_ShutdownFile_messaging_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LoadHistoryRsp> LoadHistoryRsp_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMessageReq

// optional .zproto.OutPeer peer = 1;
inline bool SendMessageReq::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void SendMessageReq::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::OutPeer& SendMessageReq::peer() const {
  // @@protoc_insertion_point(field_get:zproto.SendMessageReq.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::OutPeer::internal_default_instance();
}
inline ::zproto::OutPeer* SendMessageReq::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::OutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.SendMessageReq.peer)
  return peer_;
}
inline ::zproto::OutPeer* SendMessageReq::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.SendMessageReq.peer)
  
  ::zproto::OutPeer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void SendMessageReq::set_allocated_peer(::zproto::OutPeer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.SendMessageReq.peer)
}

// optional int64 rid = 2;
inline void SendMessageReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SendMessageReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.SendMessageReq.rid)
  return rid_;
}
inline void SendMessageReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.SendMessageReq.rid)
}

// optional .zproto.InstantMessage message = 3;
inline bool SendMessageReq::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void SendMessageReq::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::zproto::InstantMessage& SendMessageReq::message() const {
  // @@protoc_insertion_point(field_get:zproto.SendMessageReq.message)
  return message_ != NULL ? *message_
                         : *::zproto::InstantMessage::internal_default_instance();
}
inline ::zproto::InstantMessage* SendMessageReq::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::zproto::InstantMessage;
  }
  // @@protoc_insertion_point(field_mutable:zproto.SendMessageReq.message)
  return message_;
}
inline ::zproto::InstantMessage* SendMessageReq::release_message() {
  // @@protoc_insertion_point(field_release:zproto.SendMessageReq.message)
  
  ::zproto::InstantMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void SendMessageReq::set_allocated_message(::zproto::InstantMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.SendMessageReq.message)
}

// optional bytes passthrough_data = 4;
inline void SendMessageReq::clear_passthrough_data() {
  passthrough_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMessageReq::passthrough_data() const {
  // @@protoc_insertion_point(field_get:zproto.SendMessageReq.passthrough_data)
  return passthrough_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageReq::set_passthrough_data(const ::std::string& value) {
  
  passthrough_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.SendMessageReq.passthrough_data)
}
inline void SendMessageReq::set_passthrough_data(const char* value) {
  
  passthrough_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.SendMessageReq.passthrough_data)
}
inline void SendMessageReq::set_passthrough_data(const void* value, size_t size) {
  
  passthrough_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.SendMessageReq.passthrough_data)
}
inline ::std::string* SendMessageReq::mutable_passthrough_data() {
  
  // @@protoc_insertion_point(field_mutable:zproto.SendMessageReq.passthrough_data)
  return passthrough_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageReq::release_passthrough_data() {
  // @@protoc_insertion_point(field_release:zproto.SendMessageReq.passthrough_data)
  
  return passthrough_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageReq::set_allocated_passthrough_data(::std::string* passthrough_data) {
  if (passthrough_data != NULL) {
    
  } else {
    
  }
  passthrough_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passthrough_data);
  // @@protoc_insertion_point(field_set_allocated:zproto.SendMessageReq.passthrough_data)
}

inline const SendMessageReq* SendMessageReq::internal_default_instance() {
  return &SendMessageReq_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageReceivedReq

// optional .zproto.OutPeer peer = 1;
inline bool MessageReceivedReq::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageReceivedReq::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::OutPeer& MessageReceivedReq::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReceivedReq.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::OutPeer::internal_default_instance();
}
inline ::zproto::OutPeer* MessageReceivedReq::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::OutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageReceivedReq.peer)
  return peer_;
}
inline ::zproto::OutPeer* MessageReceivedReq::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageReceivedReq.peer)
  
  ::zproto::OutPeer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageReceivedReq::set_allocated_peer(::zproto::OutPeer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageReceivedReq.peer)
}

// optional int64 date = 3;
inline void MessageReceivedReq::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageReceivedReq::date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReceivedReq.date)
  return date_;
}
inline void MessageReceivedReq::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageReceivedReq.date)
}

inline const MessageReceivedReq* MessageReceivedReq::internal_default_instance() {
  return &MessageReceivedReq_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageReadReq

// optional .zproto.OutPeer peer = 1;
inline bool MessageReadReq::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageReadReq::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::OutPeer& MessageReadReq::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReadReq.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::OutPeer::internal_default_instance();
}
inline ::zproto::OutPeer* MessageReadReq::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::OutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageReadReq.peer)
  return peer_;
}
inline ::zproto::OutPeer* MessageReadReq::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageReadReq.peer)
  
  ::zproto::OutPeer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageReadReq::set_allocated_peer(::zproto::OutPeer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageReadReq.peer)
}

// optional int64 date = 3;
inline void MessageReadReq::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageReadReq::date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReadReq.date)
  return date_;
}
inline void MessageReadReq::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageReadReq.date)
}

inline const MessageReadReq* MessageReadReq::internal_default_instance() {
  return &MessageReadReq_default_instance_.get();
}
// -------------------------------------------------------------------

// DeleteMessageReq

// optional .zproto.OutPeer peer = 1;
inline bool DeleteMessageReq::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void DeleteMessageReq::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::OutPeer& DeleteMessageReq::peer() const {
  // @@protoc_insertion_point(field_get:zproto.DeleteMessageReq.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::OutPeer::internal_default_instance();
}
inline ::zproto::OutPeer* DeleteMessageReq::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::OutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.DeleteMessageReq.peer)
  return peer_;
}
inline ::zproto::OutPeer* DeleteMessageReq::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.DeleteMessageReq.peer)
  
  ::zproto::OutPeer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void DeleteMessageReq::set_allocated_peer(::zproto::OutPeer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.DeleteMessageReq.peer)
}

// repeated int64 rids = 3;
inline int DeleteMessageReq::rids_size() const {
  return rids_.size();
}
inline void DeleteMessageReq::clear_rids() {
  rids_.Clear();
}
inline ::google::protobuf::int64 DeleteMessageReq::rids(int index) const {
  // @@protoc_insertion_point(field_get:zproto.DeleteMessageReq.rids)
  return rids_.Get(index);
}
inline void DeleteMessageReq::set_rids(int index, ::google::protobuf::int64 value) {
  rids_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.DeleteMessageReq.rids)
}
inline void DeleteMessageReq::add_rids(::google::protobuf::int64 value) {
  rids_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.DeleteMessageReq.rids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DeleteMessageReq::rids() const {
  // @@protoc_insertion_point(field_list:zproto.DeleteMessageReq.rids)
  return rids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DeleteMessageReq::mutable_rids() {
  // @@protoc_insertion_point(field_mutable_list:zproto.DeleteMessageReq.rids)
  return &rids_;
}

inline const DeleteMessageReq* DeleteMessageReq::internal_default_instance() {
  return &DeleteMessageReq_default_instance_.get();
}
// -------------------------------------------------------------------

// ClearChatReq

// optional .zproto.OutPeer peer = 1;
inline bool ClearChatReq::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void ClearChatReq::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::OutPeer& ClearChatReq::peer() const {
  // @@protoc_insertion_point(field_get:zproto.ClearChatReq.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::OutPeer::internal_default_instance();
}
inline ::zproto::OutPeer* ClearChatReq::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::OutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.ClearChatReq.peer)
  return peer_;
}
inline ::zproto::OutPeer* ClearChatReq::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.ClearChatReq.peer)
  
  ::zproto::OutPeer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void ClearChatReq::set_allocated_peer(::zproto::OutPeer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.ClearChatReq.peer)
}

inline const ClearChatReq* ClearChatReq::internal_default_instance() {
  return &ClearChatReq_default_instance_.get();
}
// -------------------------------------------------------------------

// DeleteChatReq

// optional .zproto.OutPeer peer = 1;
inline bool DeleteChatReq::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void DeleteChatReq::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::OutPeer& DeleteChatReq::peer() const {
  // @@protoc_insertion_point(field_get:zproto.DeleteChatReq.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::OutPeer::internal_default_instance();
}
inline ::zproto::OutPeer* DeleteChatReq::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::OutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.DeleteChatReq.peer)
  return peer_;
}
inline ::zproto::OutPeer* DeleteChatReq::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.DeleteChatReq.peer)
  
  ::zproto::OutPeer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void DeleteChatReq::set_allocated_peer(::zproto::OutPeer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.DeleteChatReq.peer)
}

inline const DeleteChatReq* DeleteChatReq::internal_default_instance() {
  return &DeleteChatReq_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageNotify

// optional .zproto.Peer peer = 1;
inline bool MessageNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& MessageNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* MessageNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageNotify.peer)
  return peer_;
}
inline ::zproto::Peer* MessageNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageNotify.peer)
}

// optional string sender_uid = 2;
inline void MessageNotify::clear_sender_uid() {
  sender_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageNotify::sender_uid() const {
  // @@protoc_insertion_point(field_get:zproto.MessageNotify.sender_uid)
  return sender_uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNotify::set_sender_uid(const ::std::string& value) {
  
  sender_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.MessageNotify.sender_uid)
}
inline void MessageNotify::set_sender_uid(const char* value) {
  
  sender_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.MessageNotify.sender_uid)
}
inline void MessageNotify::set_sender_uid(const char* value, size_t size) {
  
  sender_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.MessageNotify.sender_uid)
}
inline ::std::string* MessageNotify::mutable_sender_uid() {
  
  // @@protoc_insertion_point(field_mutable:zproto.MessageNotify.sender_uid)
  return sender_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageNotify::release_sender_uid() {
  // @@protoc_insertion_point(field_release:zproto.MessageNotify.sender_uid)
  
  return sender_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNotify::set_allocated_sender_uid(::std::string* sender_uid) {
  if (sender_uid != NULL) {
    
  } else {
    
  }
  sender_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_uid);
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageNotify.sender_uid)
}

// optional int64 date = 3;
inline void MessageNotify::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageNotify::date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageNotify.date)
  return date_;
}
inline void MessageNotify::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageNotify.date)
}

// optional int64 rid = 4;
inline void MessageNotify::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageNotify::rid() const {
  // @@protoc_insertion_point(field_get:zproto.MessageNotify.rid)
  return rid_;
}
inline void MessageNotify::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageNotify.rid)
}

// optional .zproto.InstantMessage message = 5;
inline bool MessageNotify::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void MessageNotify::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::zproto::InstantMessage& MessageNotify::message() const {
  // @@protoc_insertion_point(field_get:zproto.MessageNotify.message)
  return message_ != NULL ? *message_
                         : *::zproto::InstantMessage::internal_default_instance();
}
inline ::zproto::InstantMessage* MessageNotify::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::zproto::InstantMessage;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageNotify.message)
  return message_;
}
inline ::zproto::InstantMessage* MessageNotify::release_message() {
  // @@protoc_insertion_point(field_release:zproto.MessageNotify.message)
  
  ::zproto::InstantMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void MessageNotify::set_allocated_message(::zproto::InstantMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageNotify.message)
}

inline const MessageNotify* MessageNotify::internal_default_instance() {
  return &MessageNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageContentChangedNotify

// optional .zproto.Peer peer = 1;
inline bool MessageContentChangedNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageContentChangedNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& MessageContentChangedNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContentChangedNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* MessageContentChangedNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageContentChangedNotify.peer)
  return peer_;
}
inline ::zproto::Peer* MessageContentChangedNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageContentChangedNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageContentChangedNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageContentChangedNotify.peer)
}

// optional int64 rid = 2;
inline void MessageContentChangedNotify::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageContentChangedNotify::rid() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContentChangedNotify.rid)
  return rid_;
}
inline void MessageContentChangedNotify::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageContentChangedNotify.rid)
}

// optional .zproto.InstantMessage message = 3;
inline bool MessageContentChangedNotify::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void MessageContentChangedNotify::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::zproto::InstantMessage& MessageContentChangedNotify::message() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContentChangedNotify.message)
  return message_ != NULL ? *message_
                         : *::zproto::InstantMessage::internal_default_instance();
}
inline ::zproto::InstantMessage* MessageContentChangedNotify::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::zproto::InstantMessage;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageContentChangedNotify.message)
  return message_;
}
inline ::zproto::InstantMessage* MessageContentChangedNotify::release_message() {
  // @@protoc_insertion_point(field_release:zproto.MessageContentChangedNotify.message)
  
  ::zproto::InstantMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void MessageContentChangedNotify::set_allocated_message(::zproto::InstantMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageContentChangedNotify.message)
}

inline const MessageContentChangedNotify* MessageContentChangedNotify::internal_default_instance() {
  return &MessageContentChangedNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageDateChangedNotify

// optional .zproto.Peer peer = 1;
inline bool MessageDateChangedNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageDateChangedNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& MessageDateChangedNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageDateChangedNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* MessageDateChangedNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageDateChangedNotify.peer)
  return peer_;
}
inline ::zproto::Peer* MessageDateChangedNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageDateChangedNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageDateChangedNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageDateChangedNotify.peer)
}

// optional int64 rid = 2;
inline void MessageDateChangedNotify::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageDateChangedNotify::rid() const {
  // @@protoc_insertion_point(field_get:zproto.MessageDateChangedNotify.rid)
  return rid_;
}
inline void MessageDateChangedNotify::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageDateChangedNotify.rid)
}

// optional int64 date = 3;
inline void MessageDateChangedNotify::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageDateChangedNotify::date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageDateChangedNotify.date)
  return date_;
}
inline void MessageDateChangedNotify::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageDateChangedNotify.date)
}

inline const MessageDateChangedNotify* MessageDateChangedNotify::internal_default_instance() {
  return &MessageDateChangedNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageSentNotify

// optional .zproto.Peer peer = 1;
inline bool MessageSentNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageSentNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& MessageSentNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageSentNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* MessageSentNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageSentNotify.peer)
  return peer_;
}
inline ::zproto::Peer* MessageSentNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageSentNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageSentNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageSentNotify.peer)
}

// optional int64 rid = 2;
inline void MessageSentNotify::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageSentNotify::rid() const {
  // @@protoc_insertion_point(field_get:zproto.MessageSentNotify.rid)
  return rid_;
}
inline void MessageSentNotify::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageSentNotify.rid)
}

// optional int64 date = 3;
inline void MessageSentNotify::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageSentNotify::date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageSentNotify.date)
  return date_;
}
inline void MessageSentNotify::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageSentNotify.date)
}

inline const MessageSentNotify* MessageSentNotify::internal_default_instance() {
  return &MessageSentNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageReceivedNotify

// optional .zproto.Peer peer = 1;
inline bool MessageReceivedNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageReceivedNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& MessageReceivedNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReceivedNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* MessageReceivedNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageReceivedNotify.peer)
  return peer_;
}
inline ::zproto::Peer* MessageReceivedNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageReceivedNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageReceivedNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageReceivedNotify.peer)
}

// optional int64 start_date = 2;
inline void MessageReceivedNotify::clear_start_date() {
  start_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageReceivedNotify::start_date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReceivedNotify.start_date)
  return start_date_;
}
inline void MessageReceivedNotify::set_start_date(::google::protobuf::int64 value) {
  
  start_date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageReceivedNotify.start_date)
}

// optional int64 received_date = 3;
inline void MessageReceivedNotify::clear_received_date() {
  received_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageReceivedNotify::received_date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReceivedNotify.received_date)
  return received_date_;
}
inline void MessageReceivedNotify::set_received_date(::google::protobuf::int64 value) {
  
  received_date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageReceivedNotify.received_date)
}

inline const MessageReceivedNotify* MessageReceivedNotify::internal_default_instance() {
  return &MessageReceivedNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageReadNotify

// optional .zproto.Peer peer = 1;
inline bool MessageReadNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageReadNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& MessageReadNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReadNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* MessageReadNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageReadNotify.peer)
  return peer_;
}
inline ::zproto::Peer* MessageReadNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageReadNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageReadNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageReadNotify.peer)
}

// optional int64 start_date = 2;
inline void MessageReadNotify::clear_start_date() {
  start_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageReadNotify::start_date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReadNotify.start_date)
  return start_date_;
}
inline void MessageReadNotify::set_start_date(::google::protobuf::int64 value) {
  
  start_date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageReadNotify.start_date)
}

// optional int64 read_date = 3;
inline void MessageReadNotify::clear_read_date() {
  read_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageReadNotify::read_date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReadNotify.read_date)
  return read_date_;
}
inline void MessageReadNotify::set_read_date(::google::protobuf::int64 value) {
  
  read_date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageReadNotify.read_date)
}

inline const MessageReadNotify* MessageReadNotify::internal_default_instance() {
  return &MessageReadNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageReadByMeNotify

// optional .zproto.Peer peer = 1;
inline bool MessageReadByMeNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageReadByMeNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& MessageReadByMeNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReadByMeNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* MessageReadByMeNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageReadByMeNotify.peer)
  return peer_;
}
inline ::zproto::Peer* MessageReadByMeNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageReadByMeNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageReadByMeNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageReadByMeNotify.peer)
}

// optional int64 start_date = 2;
inline void MessageReadByMeNotify::clear_start_date() {
  start_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageReadByMeNotify::start_date() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReadByMeNotify.start_date)
  return start_date_;
}
inline void MessageReadByMeNotify::set_start_date(::google::protobuf::int64 value) {
  
  start_date_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageReadByMeNotify.start_date)
}

// optional int32 unread_counter = 3;
inline void MessageReadByMeNotify::clear_unread_counter() {
  unread_counter_ = 0;
}
inline ::google::protobuf::int32 MessageReadByMeNotify::unread_counter() const {
  // @@protoc_insertion_point(field_get:zproto.MessageReadByMeNotify.unread_counter)
  return unread_counter_;
}
inline void MessageReadByMeNotify::set_unread_counter(::google::protobuf::int32 value) {
  
  unread_counter_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageReadByMeNotify.unread_counter)
}

inline const MessageReadByMeNotify* MessageReadByMeNotify::internal_default_instance() {
  return &MessageReadByMeNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageDeleteNotify

// optional .zproto.Peer peer = 1;
inline bool MessageDeleteNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MessageDeleteNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& MessageDeleteNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.MessageDeleteNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* MessageDeleteNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageDeleteNotify.peer)
  return peer_;
}
inline ::zproto::Peer* MessageDeleteNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageDeleteNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void MessageDeleteNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageDeleteNotify.peer)
}

// repeated int64 rids = 2;
inline int MessageDeleteNotify::rids_size() const {
  return rids_.size();
}
inline void MessageDeleteNotify::clear_rids() {
  rids_.Clear();
}
inline ::google::protobuf::int64 MessageDeleteNotify::rids(int index) const {
  // @@protoc_insertion_point(field_get:zproto.MessageDeleteNotify.rids)
  return rids_.Get(index);
}
inline void MessageDeleteNotify::set_rids(int index, ::google::protobuf::int64 value) {
  rids_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.MessageDeleteNotify.rids)
}
inline void MessageDeleteNotify::add_rids(::google::protobuf::int64 value) {
  rids_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.MessageDeleteNotify.rids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MessageDeleteNotify::rids() const {
  // @@protoc_insertion_point(field_list:zproto.MessageDeleteNotify.rids)
  return rids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MessageDeleteNotify::mutable_rids() {
  // @@protoc_insertion_point(field_mutable_list:zproto.MessageDeleteNotify.rids)
  return &rids_;
}

inline const MessageDeleteNotify* MessageDeleteNotify::internal_default_instance() {
  return &MessageDeleteNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// ChatClearNotify

// optional .zproto.Peer peer = 1;
inline bool ChatClearNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void ChatClearNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& ChatClearNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.ChatClearNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* ChatClearNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.ChatClearNotify.peer)
  return peer_;
}
inline ::zproto::Peer* ChatClearNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.ChatClearNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void ChatClearNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.ChatClearNotify.peer)
}

inline const ChatClearNotify* ChatClearNotify::internal_default_instance() {
  return &ChatClearNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// ChatDeleteNotify

// optional .zproto.Peer peer = 1;
inline bool ChatDeleteNotify::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void ChatDeleteNotify::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& ChatDeleteNotify::peer() const {
  // @@protoc_insertion_point(field_get:zproto.ChatDeleteNotify.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* ChatDeleteNotify::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.ChatDeleteNotify.peer)
  return peer_;
}
inline ::zproto::Peer* ChatDeleteNotify::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.ChatDeleteNotify.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void ChatDeleteNotify::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.ChatDeleteNotify.peer)
}

inline const ChatDeleteNotify* ChatDeleteNotify::internal_default_instance() {
  return &ChatDeleteNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// DialogShort

// optional .zproto.Peer peer = 1;
inline bool DialogShort::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void DialogShort::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::Peer& DialogShort::peer() const {
  // @@protoc_insertion_point(field_get:zproto.DialogShort.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::Peer::internal_default_instance();
}
inline ::zproto::Peer* DialogShort::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.DialogShort.peer)
  return peer_;
}
inline ::zproto::Peer* DialogShort::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.DialogShort.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void DialogShort::set_allocated_peer(::zproto::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.DialogShort.peer)
}

// optional int32 counter = 2;
inline void DialogShort::clear_counter() {
  counter_ = 0;
}
inline ::google::protobuf::int32 DialogShort::counter() const {
  // @@protoc_insertion_point(field_get:zproto.DialogShort.counter)
  return counter_;
}
inline void DialogShort::set_counter(::google::protobuf::int32 value) {
  
  counter_ = value;
  // @@protoc_insertion_point(field_set:zproto.DialogShort.counter)
}

// optional int64 date = 4;
inline void DialogShort::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DialogShort::date() const {
  // @@protoc_insertion_point(field_get:zproto.DialogShort.date)
  return date_;
}
inline void DialogShort::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.DialogShort.date)
}

inline const DialogShort* DialogShort::internal_default_instance() {
  return &DialogShort_default_instance_.get();
}
// -------------------------------------------------------------------

// DialogGroup

// optional string title = 1;
inline void DialogGroup::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DialogGroup::title() const {
  // @@protoc_insertion_point(field_get:zproto.DialogGroup.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DialogGroup::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.DialogGroup.title)
}
inline void DialogGroup::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.DialogGroup.title)
}
inline void DialogGroup::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.DialogGroup.title)
}
inline ::std::string* DialogGroup::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.DialogGroup.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DialogGroup::release_title() {
  // @@protoc_insertion_point(field_release:zproto.DialogGroup.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DialogGroup::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:zproto.DialogGroup.title)
}

// optional string key = 2;
inline void DialogGroup::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DialogGroup::key() const {
  // @@protoc_insertion_point(field_get:zproto.DialogGroup.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DialogGroup::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.DialogGroup.key)
}
inline void DialogGroup::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.DialogGroup.key)
}
inline void DialogGroup::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.DialogGroup.key)
}
inline ::std::string* DialogGroup::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:zproto.DialogGroup.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DialogGroup::release_key() {
  // @@protoc_insertion_point(field_release:zproto.DialogGroup.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DialogGroup::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:zproto.DialogGroup.key)
}

// repeated .zproto.DialogShort dialogs = 3;
inline int DialogGroup::dialogs_size() const {
  return dialogs_.size();
}
inline void DialogGroup::clear_dialogs() {
  dialogs_.Clear();
}
inline const ::zproto::DialogShort& DialogGroup::dialogs(int index) const {
  // @@protoc_insertion_point(field_get:zproto.DialogGroup.dialogs)
  return dialogs_.Get(index);
}
inline ::zproto::DialogShort* DialogGroup::mutable_dialogs(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.DialogGroup.dialogs)
  return dialogs_.Mutable(index);
}
inline ::zproto::DialogShort* DialogGroup::add_dialogs() {
  // @@protoc_insertion_point(field_add:zproto.DialogGroup.dialogs)
  return dialogs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::DialogShort >*
DialogGroup::mutable_dialogs() {
  // @@protoc_insertion_point(field_mutable_list:zproto.DialogGroup.dialogs)
  return &dialogs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::DialogShort >&
DialogGroup::dialogs() const {
  // @@protoc_insertion_point(field_list:zproto.DialogGroup.dialogs)
  return dialogs_;
}

inline const DialogGroup* DialogGroup::internal_default_instance() {
  return &DialogGroup_default_instance_.get();
}
// -------------------------------------------------------------------

// ChatGroupsChangedNotify

// repeated .zproto.DialogGroup dialogs = 1;
inline int ChatGroupsChangedNotify::dialogs_size() const {
  return dialogs_.size();
}
inline void ChatGroupsChangedNotify::clear_dialogs() {
  dialogs_.Clear();
}
inline const ::zproto::DialogGroup& ChatGroupsChangedNotify::dialogs(int index) const {
  // @@protoc_insertion_point(field_get:zproto.ChatGroupsChangedNotify.dialogs)
  return dialogs_.Get(index);
}
inline ::zproto::DialogGroup* ChatGroupsChangedNotify::mutable_dialogs(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.ChatGroupsChangedNotify.dialogs)
  return dialogs_.Mutable(index);
}
inline ::zproto::DialogGroup* ChatGroupsChangedNotify::add_dialogs() {
  // @@protoc_insertion_point(field_add:zproto.ChatGroupsChangedNotify.dialogs)
  return dialogs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::DialogGroup >*
ChatGroupsChangedNotify::mutable_dialogs() {
  // @@protoc_insertion_point(field_mutable_list:zproto.ChatGroupsChangedNotify.dialogs)
  return &dialogs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::DialogGroup >&
ChatGroupsChangedNotify::dialogs() const {
  // @@protoc_insertion_point(field_list:zproto.ChatGroupsChangedNotify.dialogs)
  return dialogs_;
}

inline const ChatGroupsChangedNotify* ChatGroupsChangedNotify::internal_default_instance() {
  return &ChatGroupsChangedNotify_default_instance_.get();
}
// -------------------------------------------------------------------

// LoadHistoryReq

// optional .zproto.OutPeer peer = 1;
inline bool LoadHistoryReq::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void LoadHistoryReq::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::zproto::OutPeer& LoadHistoryReq::peer() const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryReq.peer)
  return peer_ != NULL ? *peer_
                         : *::zproto::OutPeer::internal_default_instance();
}
inline ::zproto::OutPeer* LoadHistoryReq::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::OutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.LoadHistoryReq.peer)
  return peer_;
}
inline ::zproto::OutPeer* LoadHistoryReq::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.LoadHistoryReq.peer)
  
  ::zproto::OutPeer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void LoadHistoryReq::set_allocated_peer(::zproto::OutPeer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.LoadHistoryReq.peer)
}

// optional int64 date = 3;
inline void LoadHistoryReq::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LoadHistoryReq::date() const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryReq.date)
  return date_;
}
inline void LoadHistoryReq::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.LoadHistoryReq.date)
}

// optional .zproto.ListLoadMode load_mode = 5;
inline void LoadHistoryReq::clear_load_mode() {
  load_mode_ = 0;
}
inline ::zproto::ListLoadMode LoadHistoryReq::load_mode() const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryReq.load_mode)
  return static_cast< ::zproto::ListLoadMode >(load_mode_);
}
inline void LoadHistoryReq::set_load_mode(::zproto::ListLoadMode value) {
  
  load_mode_ = value;
  // @@protoc_insertion_point(field_set:zproto.LoadHistoryReq.load_mode)
}

// optional int32 limit = 4;
inline void LoadHistoryReq::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 LoadHistoryReq::limit() const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryReq.limit)
  return limit_;
}
inline void LoadHistoryReq::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:zproto.LoadHistoryReq.limit)
}

// repeated .zproto.UpdateOptimization optimizations = 6;
inline int LoadHistoryReq::optimizations_size() const {
  return optimizations_.size();
}
inline void LoadHistoryReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization LoadHistoryReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void LoadHistoryReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.LoadHistoryReq.optimizations)
}
inline void LoadHistoryReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.LoadHistoryReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
LoadHistoryReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.LoadHistoryReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
LoadHistoryReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadHistoryReq.optimizations)
  return &optimizations_;
}

inline const LoadHistoryReq* LoadHistoryReq::internal_default_instance() {
  return &LoadHistoryReq_default_instance_.get();
}
// -------------------------------------------------------------------

// LoadHistoryRsp

// repeated .zproto.MessageContainer history = 1;
inline int LoadHistoryRsp::history_size() const {
  return history_.size();
}
inline void LoadHistoryRsp::clear_history() {
  history_.Clear();
}
inline const ::zproto::MessageContainer& LoadHistoryRsp::history(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryRsp.history)
  return history_.Get(index);
}
inline ::zproto::MessageContainer* LoadHistoryRsp::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadHistoryRsp.history)
  return history_.Mutable(index);
}
inline ::zproto::MessageContainer* LoadHistoryRsp::add_history() {
  // @@protoc_insertion_point(field_add:zproto.LoadHistoryRsp.history)
  return history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::MessageContainer >*
LoadHistoryRsp::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadHistoryRsp.history)
  return &history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::MessageContainer >&
LoadHistoryRsp::history() const {
  // @@protoc_insertion_point(field_list:zproto.LoadHistoryRsp.history)
  return history_;
}

// repeated .zproto.User users = 2;
inline int LoadHistoryRsp::users_size() const {
  return users_.size();
}
inline void LoadHistoryRsp::clear_users() {
  users_.Clear();
}
inline const ::zproto::User& LoadHistoryRsp::users(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryRsp.users)
  return users_.Get(index);
}
inline ::zproto::User* LoadHistoryRsp::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadHistoryRsp.users)
  return users_.Mutable(index);
}
inline ::zproto::User* LoadHistoryRsp::add_users() {
  // @@protoc_insertion_point(field_add:zproto.LoadHistoryRsp.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::User >*
LoadHistoryRsp::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadHistoryRsp.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::User >&
LoadHistoryRsp::users() const {
  // @@protoc_insertion_point(field_list:zproto.LoadHistoryRsp.users)
  return users_;
}

// repeated .zproto.UserOutPeer user_peers = 4;
inline int LoadHistoryRsp::user_peers_size() const {
  return user_peers_.size();
}
inline void LoadHistoryRsp::clear_user_peers() {
  user_peers_.Clear();
}
inline const ::zproto::UserOutPeer& LoadHistoryRsp::user_peers(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryRsp.user_peers)
  return user_peers_.Get(index);
}
inline ::zproto::UserOutPeer* LoadHistoryRsp::mutable_user_peers(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadHistoryRsp.user_peers)
  return user_peers_.Mutable(index);
}
inline ::zproto::UserOutPeer* LoadHistoryRsp::add_user_peers() {
  // @@protoc_insertion_point(field_add:zproto.LoadHistoryRsp.user_peers)
  return user_peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
LoadHistoryRsp::mutable_user_peers() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadHistoryRsp.user_peers)
  return &user_peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
LoadHistoryRsp::user_peers() const {
  // @@protoc_insertion_point(field_list:zproto.LoadHistoryRsp.user_peers)
  return user_peers_;
}

// repeated .zproto.Group groups = 5;
inline int LoadHistoryRsp::groups_size() const {
  return groups_.size();
}
inline void LoadHistoryRsp::clear_groups() {
  groups_.Clear();
}
inline const ::zproto::Group& LoadHistoryRsp::groups(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryRsp.groups)
  return groups_.Get(index);
}
inline ::zproto::Group* LoadHistoryRsp::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadHistoryRsp.groups)
  return groups_.Mutable(index);
}
inline ::zproto::Group* LoadHistoryRsp::add_groups() {
  // @@protoc_insertion_point(field_add:zproto.LoadHistoryRsp.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::Group >*
LoadHistoryRsp::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadHistoryRsp.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::Group >&
LoadHistoryRsp::groups() const {
  // @@protoc_insertion_point(field_list:zproto.LoadHistoryRsp.groups)
  return groups_;
}

// repeated .zproto.GroupOutPeer group_peers = 6;
inline int LoadHistoryRsp::group_peers_size() const {
  return group_peers_.size();
}
inline void LoadHistoryRsp::clear_group_peers() {
  group_peers_.Clear();
}
inline const ::zproto::GroupOutPeer& LoadHistoryRsp::group_peers(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadHistoryRsp.group_peers)
  return group_peers_.Get(index);
}
inline ::zproto::GroupOutPeer* LoadHistoryRsp::mutable_group_peers(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadHistoryRsp.group_peers)
  return group_peers_.Mutable(index);
}
inline ::zproto::GroupOutPeer* LoadHistoryRsp::add_group_peers() {
  // @@protoc_insertion_point(field_add:zproto.LoadHistoryRsp.group_peers)
  return group_peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer >*
LoadHistoryRsp::mutable_group_peers() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadHistoryRsp.group_peers)
  return &group_peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer >&
LoadHistoryRsp::group_peers() const {
  // @@protoc_insertion_point(field_list:zproto.LoadHistoryRsp.group_peers)
  return group_peers_;
}

inline const LoadHistoryRsp* LoadHistoryRsp::internal_default_instance() {
  return &LoadHistoryRsp_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messaging_2eproto__INCLUDED
