// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zproto {

namespace {

const ::google::protobuf::Descriptor* StartTokenAuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartTokenAuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartTestingAuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartTestingAuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_auth_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_auth_2eproto() {
  protobuf_AddDesc_auth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "auth.proto");
  GOOGLE_CHECK(file != NULL);
  StartTokenAuthReq_descriptor_ = file->message_type(0);
  static const int StartTokenAuthReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTokenAuthReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTokenAuthReq, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTokenAuthReq, api_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTokenAuthReq, device_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTokenAuthReq, device_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTokenAuthReq, time_zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTokenAuthReq, preferred_languages_),
  };
  StartTokenAuthReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartTokenAuthReq_descriptor_,
      StartTokenAuthReq::internal_default_instance(),
      StartTokenAuthReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartTokenAuthReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTokenAuthReq, _internal_metadata_));
  StartTestingAuthReq_descriptor_ = file->message_type(1);
  static const int StartTestingAuthReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTestingAuthReq, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTestingAuthReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTestingAuthReq, device_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTestingAuthReq, device_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTestingAuthReq, time_zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTestingAuthReq, preferred_languages_),
  };
  StartTestingAuthReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartTestingAuthReq_descriptor_,
      StartTestingAuthReq::internal_default_instance(),
      StartTestingAuthReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartTestingAuthReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTestingAuthReq, _internal_metadata_));
  AuthRsp_descriptor_ = file->message_type(2);
  static const int AuthRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRsp, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRsp, config_),
  };
  AuthRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthRsp_descriptor_,
      AuthRsp::internal_default_instance(),
      AuthRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRsp, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_auth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartTokenAuthReq_descriptor_, StartTokenAuthReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartTestingAuthReq_descriptor_, StartTestingAuthReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthRsp_descriptor_, AuthRsp::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_auth_2eproto() {
  StartTokenAuthReq_default_instance_.Shutdown();
  delete StartTokenAuthReq_reflection_;
  StartTestingAuthReq_default_instance_.Shutdown();
  delete StartTestingAuthReq_reflection_;
  AuthRsp_default_instance_.Shutdown();
  delete AuthRsp_reflection_;
}

void protobuf_InitDefaults_auth_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::zproto::protobuf_InitDefaults_misc_2eproto();
  ::zproto::protobuf_InitDefaults_users_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  StartTokenAuthReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StartTestingAuthReq_default_instance_.DefaultConstruct();
  AuthRsp_default_instance_.DefaultConstruct();
  StartTokenAuthReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  StartTestingAuthReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_auth_2eproto_once_);
void protobuf_InitDefaults_auth_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_auth_2eproto_once_,
                 &protobuf_InitDefaults_auth_2eproto_impl);
}
void protobuf_AddDesc_auth_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_auth_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nauth.proto\022\006zproto\032\nmisc.proto\032\013users."
    "proto\"\236\001\n\021StartTokenAuthReq\022\r\n\005token\030\001 \001"
    "(\t\022\016\n\006app_id\030\002 \001(\r\022\017\n\007api_key\030\003 \001(\t\022\023\n\013d"
    "evice_hash\030\004 \001(\014\022\024\n\014device_title\030\005 \001(\t\022\021"
    "\n\ttime_zone\030\006 \001(\t\022\033\n\023preferred_languages"
    "\030\007 \003(\t\"\221\001\n\023StartTestingAuthReq\022\016\n\006app_id"
    "\030\001 \001(\r\022\017\n\007user_id\030\002 \001(\t\022\023\n\013device_hash\030\004"
    " \001(\014\022\024\n\014device_title\030\005 \001(\t\022\021\n\ttime_zone\030"
    "\006 \001(\t\022\033\n\023preferred_languages\030\007 \003(\t\"E\n\007Au"
    "thRsp\022\032\n\004user\030\002 \001(\0132\014.zproto.User\022\036\n\006con"
    "fig\030\003 \001(\0132\016.zproto.ConfigB\'\n\027com.zchat.e"
    "ngine.zprotoB\nZProtoAuthH\002b\006proto3", 474);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "auth.proto", &protobuf_RegisterTypes);
  ::zproto::protobuf_AddDesc_misc_2eproto();
  ::zproto::protobuf_AddDesc_users_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_auth_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_auth_2eproto_once_);
void protobuf_AddDesc_auth_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_auth_2eproto_once_,
                 &protobuf_AddDesc_auth_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_auth_2eproto {
  StaticDescriptorInitializer_auth_2eproto() {
    protobuf_AddDesc_auth_2eproto();
  }
} static_descriptor_initializer_auth_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartTokenAuthReq::kTokenFieldNumber;
const int StartTokenAuthReq::kAppIdFieldNumber;
const int StartTokenAuthReq::kApiKeyFieldNumber;
const int StartTokenAuthReq::kDeviceHashFieldNumber;
const int StartTokenAuthReq::kDeviceTitleFieldNumber;
const int StartTokenAuthReq::kTimeZoneFieldNumber;
const int StartTokenAuthReq::kPreferredLanguagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartTokenAuthReq::StartTokenAuthReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_auth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.StartTokenAuthReq)
}

void StartTokenAuthReq::InitAsDefaultInstance() {
}

StartTokenAuthReq::StartTokenAuthReq(const StartTokenAuthReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.StartTokenAuthReq)
}

void StartTokenAuthReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
  _cached_size_ = 0;
}

StartTokenAuthReq::~StartTokenAuthReq() {
  // @@protoc_insertion_point(destructor:zproto.StartTokenAuthReq)
  SharedDtor();
}

void StartTokenAuthReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartTokenAuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTokenAuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartTokenAuthReq_descriptor_;
}

const StartTokenAuthReq& StartTokenAuthReq::default_instance() {
  protobuf_InitDefaults_auth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StartTokenAuthReq> StartTokenAuthReq_default_instance_;

StartTokenAuthReq* StartTokenAuthReq::New(::google::protobuf::Arena* arena) const {
  StartTokenAuthReq* n = new StartTokenAuthReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartTokenAuthReq::UnsafeMergeFrom(const StartTokenAuthReq& from) {
  MergeFrom(from);
}
void StartTokenAuthReq::Swap(StartTokenAuthReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartTokenAuthReq::InternalSwap(StartTokenAuthReq* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata StartTokenAuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartTokenAuthReq_descriptor_;
  metadata.reflection = StartTokenAuthReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartTokenAuthReq

// optional string token = 1;
void StartTokenAuthReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartTokenAuthReq::token() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.token)
}
void StartTokenAuthReq::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.token)
}
void StartTokenAuthReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.token)
}
::std::string* StartTokenAuthReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTokenAuthReq::release_token() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.token)
}

// optional uint32 app_id = 2;
void StartTokenAuthReq::clear_app_id() {
  app_id_ = 0u;
}
::google::protobuf::uint32 StartTokenAuthReq::app_id() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.app_id)
  return app_id_;
}
void StartTokenAuthReq::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.app_id)
}

// optional string api_key = 3;
void StartTokenAuthReq::clear_api_key() {
  api_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartTokenAuthReq::api_key() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.api_key)
  return api_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_api_key(const ::std::string& value) {
  
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.api_key)
}
void StartTokenAuthReq::set_api_key(const char* value) {
  
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.api_key)
}
void StartTokenAuthReq::set_api_key(const char* value, size_t size) {
  
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.api_key)
}
::std::string* StartTokenAuthReq::mutable_api_key() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.api_key)
  return api_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTokenAuthReq::release_api_key() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.api_key)
  
  return api_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_allocated_api_key(::std::string* api_key) {
  if (api_key != NULL) {
    
  } else {
    
  }
  api_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), api_key);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.api_key)
}

// optional bytes device_hash = 4;
void StartTokenAuthReq::clear_device_hash() {
  device_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartTokenAuthReq::device_hash() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.device_hash)
  return device_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_device_hash(const ::std::string& value) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.device_hash)
}
void StartTokenAuthReq::set_device_hash(const char* value) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.device_hash)
}
void StartTokenAuthReq::set_device_hash(const void* value, size_t size) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.device_hash)
}
::std::string* StartTokenAuthReq::mutable_device_hash() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.device_hash)
  return device_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTokenAuthReq::release_device_hash() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.device_hash)
  
  return device_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_allocated_device_hash(::std::string* device_hash) {
  if (device_hash != NULL) {
    
  } else {
    
  }
  device_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_hash);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.device_hash)
}

// optional string device_title = 5;
void StartTokenAuthReq::clear_device_title() {
  device_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartTokenAuthReq::device_title() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.device_title)
  return device_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_device_title(const ::std::string& value) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.device_title)
}
void StartTokenAuthReq::set_device_title(const char* value) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.device_title)
}
void StartTokenAuthReq::set_device_title(const char* value, size_t size) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.device_title)
}
::std::string* StartTokenAuthReq::mutable_device_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.device_title)
  return device_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTokenAuthReq::release_device_title() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.device_title)
  
  return device_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_allocated_device_title(::std::string* device_title) {
  if (device_title != NULL) {
    
  } else {
    
  }
  device_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_title);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.device_title)
}

// optional string time_zone = 6;
void StartTokenAuthReq::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartTokenAuthReq::time_zone() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.time_zone)
  return time_zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_time_zone(const ::std::string& value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.time_zone)
}
void StartTokenAuthReq::set_time_zone(const char* value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.time_zone)
}
void StartTokenAuthReq::set_time_zone(const char* value, size_t size) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.time_zone)
}
::std::string* StartTokenAuthReq::mutable_time_zone() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTokenAuthReq::release_time_zone() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.time_zone)
  
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTokenAuthReq::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != NULL) {
    
  } else {
    
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.time_zone)
}

// repeated string preferred_languages = 7;
int StartTokenAuthReq::preferred_languages_size() const {
  return preferred_languages_.size();
}
void StartTokenAuthReq::clear_preferred_languages() {
  preferred_languages_.Clear();
}
const ::std::string& StartTokenAuthReq::preferred_languages(int index) const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.preferred_languages)
  return preferred_languages_.Get(index);
}
::std::string* StartTokenAuthReq::mutable_preferred_languages(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.preferred_languages)
  return preferred_languages_.Mutable(index);
}
void StartTokenAuthReq::set_preferred_languages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.preferred_languages)
  preferred_languages_.Mutable(index)->assign(value);
}
void StartTokenAuthReq::set_preferred_languages(int index, const char* value) {
  preferred_languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.preferred_languages)
}
void StartTokenAuthReq::set_preferred_languages(int index, const char* value, size_t size) {
  preferred_languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.preferred_languages)
}
::std::string* StartTokenAuthReq::add_preferred_languages() {
  // @@protoc_insertion_point(field_add_mutable:zproto.StartTokenAuthReq.preferred_languages)
  return preferred_languages_.Add();
}
void StartTokenAuthReq::add_preferred_languages(const ::std::string& value) {
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zproto.StartTokenAuthReq.preferred_languages)
}
void StartTokenAuthReq::add_preferred_languages(const char* value) {
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zproto.StartTokenAuthReq.preferred_languages)
}
void StartTokenAuthReq::add_preferred_languages(const char* value, size_t size) {
  preferred_languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zproto.StartTokenAuthReq.preferred_languages)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StartTokenAuthReq::preferred_languages() const {
  // @@protoc_insertion_point(field_list:zproto.StartTokenAuthReq.preferred_languages)
  return preferred_languages_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StartTokenAuthReq::mutable_preferred_languages() {
  // @@protoc_insertion_point(field_mutable_list:zproto.StartTokenAuthReq.preferred_languages)
  return &preferred_languages_;
}

inline const StartTokenAuthReq* StartTokenAuthReq::internal_default_instance() {
  return &StartTokenAuthReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartTestingAuthReq::kAppIdFieldNumber;
const int StartTestingAuthReq::kUserIdFieldNumber;
const int StartTestingAuthReq::kDeviceHashFieldNumber;
const int StartTestingAuthReq::kDeviceTitleFieldNumber;
const int StartTestingAuthReq::kTimeZoneFieldNumber;
const int StartTestingAuthReq::kPreferredLanguagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartTestingAuthReq::StartTestingAuthReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_auth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.StartTestingAuthReq)
}

void StartTestingAuthReq::InitAsDefaultInstance() {
}

StartTestingAuthReq::StartTestingAuthReq(const StartTestingAuthReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.StartTestingAuthReq)
}

void StartTestingAuthReq::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
  _cached_size_ = 0;
}

StartTestingAuthReq::~StartTestingAuthReq() {
  // @@protoc_insertion_point(destructor:zproto.StartTestingAuthReq)
  SharedDtor();
}

void StartTestingAuthReq::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartTestingAuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTestingAuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartTestingAuthReq_descriptor_;
}

const StartTestingAuthReq& StartTestingAuthReq::default_instance() {
  protobuf_InitDefaults_auth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StartTestingAuthReq> StartTestingAuthReq_default_instance_;

StartTestingAuthReq* StartTestingAuthReq::New(::google::protobuf::Arena* arena) const {
  StartTestingAuthReq* n = new StartTestingAuthReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartTestingAuthReq::UnsafeMergeFrom(const StartTestingAuthReq& from) {
  MergeFrom(from);
}
void StartTestingAuthReq::Swap(StartTestingAuthReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartTestingAuthReq::InternalSwap(StartTestingAuthReq* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata StartTestingAuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartTestingAuthReq_descriptor_;
  metadata.reflection = StartTestingAuthReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartTestingAuthReq

// optional uint32 app_id = 1;
void StartTestingAuthReq::clear_app_id() {
  app_id_ = 0u;
}
::google::protobuf::uint32 StartTestingAuthReq::app_id() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.app_id)
  return app_id_;
}
void StartTestingAuthReq::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.app_id)
}

// optional string user_id = 2;
void StartTestingAuthReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartTestingAuthReq::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTestingAuthReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.user_id)
}
void StartTestingAuthReq::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.user_id)
}
void StartTestingAuthReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.user_id)
}
::std::string* StartTestingAuthReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTestingAuthReq::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.StartTestingAuthReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTestingAuthReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTestingAuthReq.user_id)
}

// optional bytes device_hash = 4;
void StartTestingAuthReq::clear_device_hash() {
  device_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartTestingAuthReq::device_hash() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.device_hash)
  return device_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTestingAuthReq::set_device_hash(const ::std::string& value) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.device_hash)
}
void StartTestingAuthReq::set_device_hash(const char* value) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.device_hash)
}
void StartTestingAuthReq::set_device_hash(const void* value, size_t size) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.device_hash)
}
::std::string* StartTestingAuthReq::mutable_device_hash() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.device_hash)
  return device_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTestingAuthReq::release_device_hash() {
  // @@protoc_insertion_point(field_release:zproto.StartTestingAuthReq.device_hash)
  
  return device_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTestingAuthReq::set_allocated_device_hash(::std::string* device_hash) {
  if (device_hash != NULL) {
    
  } else {
    
  }
  device_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_hash);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTestingAuthReq.device_hash)
}

// optional string device_title = 5;
void StartTestingAuthReq::clear_device_title() {
  device_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartTestingAuthReq::device_title() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.device_title)
  return device_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTestingAuthReq::set_device_title(const ::std::string& value) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.device_title)
}
void StartTestingAuthReq::set_device_title(const char* value) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.device_title)
}
void StartTestingAuthReq::set_device_title(const char* value, size_t size) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.device_title)
}
::std::string* StartTestingAuthReq::mutable_device_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.device_title)
  return device_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTestingAuthReq::release_device_title() {
  // @@protoc_insertion_point(field_release:zproto.StartTestingAuthReq.device_title)
  
  return device_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTestingAuthReq::set_allocated_device_title(::std::string* device_title) {
  if (device_title != NULL) {
    
  } else {
    
  }
  device_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_title);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTestingAuthReq.device_title)
}

// optional string time_zone = 6;
void StartTestingAuthReq::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartTestingAuthReq::time_zone() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.time_zone)
  return time_zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTestingAuthReq::set_time_zone(const ::std::string& value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.time_zone)
}
void StartTestingAuthReq::set_time_zone(const char* value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.time_zone)
}
void StartTestingAuthReq::set_time_zone(const char* value, size_t size) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.time_zone)
}
::std::string* StartTestingAuthReq::mutable_time_zone() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTestingAuthReq::release_time_zone() {
  // @@protoc_insertion_point(field_release:zproto.StartTestingAuthReq.time_zone)
  
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTestingAuthReq::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != NULL) {
    
  } else {
    
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTestingAuthReq.time_zone)
}

// repeated string preferred_languages = 7;
int StartTestingAuthReq::preferred_languages_size() const {
  return preferred_languages_.size();
}
void StartTestingAuthReq::clear_preferred_languages() {
  preferred_languages_.Clear();
}
const ::std::string& StartTestingAuthReq::preferred_languages(int index) const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.preferred_languages)
  return preferred_languages_.Get(index);
}
::std::string* StartTestingAuthReq::mutable_preferred_languages(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.preferred_languages)
  return preferred_languages_.Mutable(index);
}
void StartTestingAuthReq::set_preferred_languages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.preferred_languages)
  preferred_languages_.Mutable(index)->assign(value);
}
void StartTestingAuthReq::set_preferred_languages(int index, const char* value) {
  preferred_languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.preferred_languages)
}
void StartTestingAuthReq::set_preferred_languages(int index, const char* value, size_t size) {
  preferred_languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.preferred_languages)
}
::std::string* StartTestingAuthReq::add_preferred_languages() {
  // @@protoc_insertion_point(field_add_mutable:zproto.StartTestingAuthReq.preferred_languages)
  return preferred_languages_.Add();
}
void StartTestingAuthReq::add_preferred_languages(const ::std::string& value) {
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zproto.StartTestingAuthReq.preferred_languages)
}
void StartTestingAuthReq::add_preferred_languages(const char* value) {
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zproto.StartTestingAuthReq.preferred_languages)
}
void StartTestingAuthReq::add_preferred_languages(const char* value, size_t size) {
  preferred_languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zproto.StartTestingAuthReq.preferred_languages)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StartTestingAuthReq::preferred_languages() const {
  // @@protoc_insertion_point(field_list:zproto.StartTestingAuthReq.preferred_languages)
  return preferred_languages_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StartTestingAuthReq::mutable_preferred_languages() {
  // @@protoc_insertion_point(field_mutable_list:zproto.StartTestingAuthReq.preferred_languages)
  return &preferred_languages_;
}

inline const StartTestingAuthReq* StartTestingAuthReq::internal_default_instance() {
  return &StartTestingAuthReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRsp::kUserFieldNumber;
const int AuthRsp::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRsp::AuthRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_auth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.AuthRsp)
}

void AuthRsp::InitAsDefaultInstance() {
  user_ = const_cast< ::zproto::User*>(
      ::zproto::User::internal_default_instance());
  config_ = const_cast< ::zproto::Config*>(
      ::zproto::Config::internal_default_instance());
}

AuthRsp::AuthRsp(const AuthRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.AuthRsp)
}

void AuthRsp::SharedCtor() {
  user_ = NULL;
  config_ = NULL;
  _cached_size_ = 0;
}

AuthRsp::~AuthRsp() {
  // @@protoc_insertion_point(destructor:zproto.AuthRsp)
  SharedDtor();
}

void AuthRsp::SharedDtor() {
  if (this != &AuthRsp_default_instance_.get()) {
    delete user_;
    delete config_;
  }
}

void AuthRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthRsp_descriptor_;
}

const AuthRsp& AuthRsp::default_instance() {
  protobuf_InitDefaults_auth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthRsp> AuthRsp_default_instance_;

AuthRsp* AuthRsp::New(::google::protobuf::Arena* arena) const {
  AuthRsp* n = new AuthRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRsp::UnsafeMergeFrom(const AuthRsp& from) {
  MergeFrom(from);
}
void AuthRsp::Swap(AuthRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRsp::InternalSwap(AuthRsp* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata AuthRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthRsp_descriptor_;
  metadata.reflection = AuthRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRsp

// optional .zproto.User user = 2;
bool AuthRsp::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void AuthRsp::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::zproto::User& AuthRsp::user() const {
  // @@protoc_insertion_point(field_get:zproto.AuthRsp.user)
  return user_ != NULL ? *user_
                         : *::zproto::User::internal_default_instance();
}
::zproto::User* AuthRsp::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::zproto::User;
  }
  // @@protoc_insertion_point(field_mutable:zproto.AuthRsp.user)
  return user_;
}
::zproto::User* AuthRsp::release_user() {
  // @@protoc_insertion_point(field_release:zproto.AuthRsp.user)
  
  ::zproto::User* temp = user_;
  user_ = NULL;
  return temp;
}
void AuthRsp::set_allocated_user(::zproto::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.AuthRsp.user)
}

// optional .zproto.Config config = 3;
bool AuthRsp::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void AuthRsp::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::zproto::Config& AuthRsp::config() const {
  // @@protoc_insertion_point(field_get:zproto.AuthRsp.config)
  return config_ != NULL ? *config_
                         : *::zproto::Config::internal_default_instance();
}
::zproto::Config* AuthRsp::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::zproto::Config;
  }
  // @@protoc_insertion_point(field_mutable:zproto.AuthRsp.config)
  return config_;
}
::zproto::Config* AuthRsp::release_config() {
  // @@protoc_insertion_point(field_release:zproto.AuthRsp.config)
  
  ::zproto::Config* temp = config_;
  config_ = NULL;
  return temp;
}
void AuthRsp::set_allocated_config(::zproto::Config* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.AuthRsp.config)
}

inline const AuthRsp* AuthRsp::internal_default_instance() {
  return &AuthRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)
