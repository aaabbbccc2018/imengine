// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peers.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "peers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zproto {

namespace {

const ::google::protobuf::Descriptor* Peer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Peer_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutPeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutPeer_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOutPeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOutPeer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupOutPeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupOutPeer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PeerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_peers_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_peers_2eproto() {
  protobuf_AddDesc_peers_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "peers.proto");
  GOOGLE_CHECK(file != NULL);
  Peer_descriptor_ = file->message_type(0);
  static const int Peer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, id_),
  };
  Peer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Peer_descriptor_,
      Peer::internal_default_instance(),
      Peer_offsets_,
      -1,
      -1,
      -1,
      sizeof(Peer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _internal_metadata_));
  OutPeer_descriptor_ = file->message_type(1);
  static const int OutPeer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutPeer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutPeer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutPeer, access_hash_),
  };
  OutPeer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OutPeer_descriptor_,
      OutPeer::internal_default_instance(),
      OutPeer_offsets_,
      -1,
      -1,
      -1,
      sizeof(OutPeer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutPeer, _internal_metadata_));
  UserOutPeer_descriptor_ = file->message_type(2);
  static const int UserOutPeer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOutPeer, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOutPeer, access_hash_),
  };
  UserOutPeer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserOutPeer_descriptor_,
      UserOutPeer::internal_default_instance(),
      UserOutPeer_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserOutPeer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOutPeer, _internal_metadata_));
  GroupOutPeer_descriptor_ = file->message_type(3);
  static const int GroupOutPeer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupOutPeer, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupOutPeer, access_hash_),
  };
  GroupOutPeer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupOutPeer_descriptor_,
      GroupOutPeer::internal_default_instance(),
      GroupOutPeer_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupOutPeer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupOutPeer, _internal_metadata_));
  PeerType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_peers_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Peer_descriptor_, Peer::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OutPeer_descriptor_, OutPeer::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserOutPeer_descriptor_, UserOutPeer::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupOutPeer_descriptor_, GroupOutPeer::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_peers_2eproto() {
  Peer_default_instance_.Shutdown();
  delete Peer_reflection_;
  OutPeer_default_instance_.Shutdown();
  delete OutPeer_reflection_;
  UserOutPeer_default_instance_.Shutdown();
  delete UserOutPeer_reflection_;
  GroupOutPeer_default_instance_.Shutdown();
  delete GroupOutPeer_reflection_;
}

void protobuf_InitDefaults_peers_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Peer_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OutPeer_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserOutPeer_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GroupOutPeer_default_instance_.DefaultConstruct();
  Peer_default_instance_.get_mutable()->InitAsDefaultInstance();
  OutPeer_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserOutPeer_default_instance_.get_mutable()->InitAsDefaultInstance();
  GroupOutPeer_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_peers_2eproto_once_);
void protobuf_InitDefaults_peers_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_peers_2eproto_once_,
                 &protobuf_InitDefaults_peers_2eproto_impl);
}
void protobuf_AddDesc_peers_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_peers_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013peers.proto\022\006zproto\"2\n\004Peer\022\036\n\004type\030\001 "
    "\001(\0162\020.zproto.PeerType\022\n\n\002id\030\002 \001(\t\"J\n\007Out"
    "Peer\022\036\n\004type\030\001 \001(\0162\020.zproto.PeerType\022\n\n\002"
    "id\030\002 \001(\t\022\023\n\013access_hash\030\003 \001(\003\"/\n\013UserOut"
    "Peer\022\013\n\003uid\030\001 \001(\t\022\023\n\013access_hash\030\002 \001(\003\"5"
    "\n\014GroupOutPeer\022\020\n\010group_id\030\001 \001(\t\022\023\n\013acce"
    "ss_hash\030\002 \001(\003*W\n\010PeerType\022\025\n\021PEER_TYPE_P"
    "RIVATE\020\000\022\023\n\017PEER_TYPE_GROUP\020\001\022\037\n\033PEER_TY"
    "PE_ENCRYPTED_PRIVATE\020\002B(\n\027com.zchat.engi"
    "ne.zprotoB\013ZProtoPeersH\002b\006proto3", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "peers.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_peers_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_peers_2eproto_once_);
void protobuf_AddDesc_peers_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_peers_2eproto_once_,
                 &protobuf_AddDesc_peers_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_peers_2eproto {
  StaticDescriptorInitializer_peers_2eproto() {
    protobuf_AddDesc_peers_2eproto();
  }
} static_descriptor_initializer_peers_2eproto_;
const ::google::protobuf::EnumDescriptor* PeerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerType_descriptor_;
}
bool PeerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kTypeFieldNumber;
const int Peer::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_peers_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.Peer)
}

void Peer::InitAsDefaultInstance() {
}

Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.Peer)
}

void Peer::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:zproto.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Peer_descriptor_;
}

const Peer& Peer::default_instance() {
  protobuf_InitDefaults_peers_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Peer> Peer_default_instance_;

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::UnsafeMergeFrom(const Peer& from) {
  MergeFrom(from);
}
void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Peer_descriptor_;
  metadata.reflection = Peer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peer

// optional .zproto.PeerType type = 1;
void Peer::clear_type() {
  type_ = 0;
}
::zproto::PeerType Peer::type() const {
  // @@protoc_insertion_point(field_get:zproto.Peer.type)
  return static_cast< ::zproto::PeerType >(type_);
}
void Peer::set_type(::zproto::PeerType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:zproto.Peer.type)
}

// optional string id = 2;
void Peer::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Peer::id() const {
  // @@protoc_insertion_point(field_get:zproto.Peer.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Peer::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.Peer.id)
}
void Peer::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.Peer.id)
}
void Peer::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.Peer.id)
}
::std::string* Peer::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.Peer.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Peer::release_id() {
  // @@protoc_insertion_point(field_release:zproto.Peer.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Peer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:zproto.Peer.id)
}

inline const Peer* Peer::internal_default_instance() {
  return &Peer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutPeer::kTypeFieldNumber;
const int OutPeer::kIdFieldNumber;
const int OutPeer::kAccessHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutPeer::OutPeer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_peers_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.OutPeer)
}

void OutPeer::InitAsDefaultInstance() {
}

OutPeer::OutPeer(const OutPeer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.OutPeer)
}

void OutPeer::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&access_hash_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&access_hash_) + sizeof(type_));
  _cached_size_ = 0;
}

OutPeer::~OutPeer() {
  // @@protoc_insertion_point(destructor:zproto.OutPeer)
  SharedDtor();
}

void OutPeer::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OutPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutPeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutPeer_descriptor_;
}

const OutPeer& OutPeer::default_instance() {
  protobuf_InitDefaults_peers_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OutPeer> OutPeer_default_instance_;

OutPeer* OutPeer::New(::google::protobuf::Arena* arena) const {
  OutPeer* n = new OutPeer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutPeer::UnsafeMergeFrom(const OutPeer& from) {
  MergeFrom(from);
}
void OutPeer::Swap(OutPeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutPeer::InternalSwap(OutPeer* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata OutPeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutPeer_descriptor_;
  metadata.reflection = OutPeer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OutPeer

// optional .zproto.PeerType type = 1;
void OutPeer::clear_type() {
  type_ = 0;
}
::zproto::PeerType OutPeer::type() const {
  // @@protoc_insertion_point(field_get:zproto.OutPeer.type)
  return static_cast< ::zproto::PeerType >(type_);
}
void OutPeer::set_type(::zproto::PeerType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:zproto.OutPeer.type)
}

// optional string id = 2;
void OutPeer::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OutPeer::id() const {
  // @@protoc_insertion_point(field_get:zproto.OutPeer.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutPeer::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.OutPeer.id)
}
void OutPeer::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.OutPeer.id)
}
void OutPeer::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.OutPeer.id)
}
::std::string* OutPeer::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.OutPeer.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OutPeer::release_id() {
  // @@protoc_insertion_point(field_release:zproto.OutPeer.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OutPeer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:zproto.OutPeer.id)
}

// optional int64 access_hash = 3;
void OutPeer::clear_access_hash() {
  access_hash_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OutPeer::access_hash() const {
  // @@protoc_insertion_point(field_get:zproto.OutPeer.access_hash)
  return access_hash_;
}
void OutPeer::set_access_hash(::google::protobuf::int64 value) {
  
  access_hash_ = value;
  // @@protoc_insertion_point(field_set:zproto.OutPeer.access_hash)
}

inline const OutPeer* OutPeer::internal_default_instance() {
  return &OutPeer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserOutPeer::kUidFieldNumber;
const int UserOutPeer::kAccessHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserOutPeer::UserOutPeer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_peers_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.UserOutPeer)
}

void UserOutPeer::InitAsDefaultInstance() {
}

UserOutPeer::UserOutPeer(const UserOutPeer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.UserOutPeer)
}

void UserOutPeer::SharedCtor() {
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_hash_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

UserOutPeer::~UserOutPeer() {
  // @@protoc_insertion_point(destructor:zproto.UserOutPeer)
  SharedDtor();
}

void UserOutPeer::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserOutPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOutPeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOutPeer_descriptor_;
}

const UserOutPeer& UserOutPeer::default_instance() {
  protobuf_InitDefaults_peers_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserOutPeer> UserOutPeer_default_instance_;

UserOutPeer* UserOutPeer::New(::google::protobuf::Arena* arena) const {
  UserOutPeer* n = new UserOutPeer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserOutPeer::UnsafeMergeFrom(const UserOutPeer& from) {
  MergeFrom(from);
}
void UserOutPeer::Swap(UserOutPeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserOutPeer::InternalSwap(UserOutPeer* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata UserOutPeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOutPeer_descriptor_;
  metadata.reflection = UserOutPeer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserOutPeer

// optional string uid = 1;
void UserOutPeer::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserOutPeer::uid() const {
  // @@protoc_insertion_point(field_get:zproto.UserOutPeer.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserOutPeer::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserOutPeer.uid)
}
void UserOutPeer::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserOutPeer.uid)
}
void UserOutPeer::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserOutPeer.uid)
}
::std::string* UserOutPeer::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserOutPeer.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserOutPeer::release_uid() {
  // @@protoc_insertion_point(field_release:zproto.UserOutPeer.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserOutPeer::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserOutPeer.uid)
}

// optional int64 access_hash = 2;
void UserOutPeer::clear_access_hash() {
  access_hash_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 UserOutPeer::access_hash() const {
  // @@protoc_insertion_point(field_get:zproto.UserOutPeer.access_hash)
  return access_hash_;
}
void UserOutPeer::set_access_hash(::google::protobuf::int64 value) {
  
  access_hash_ = value;
  // @@protoc_insertion_point(field_set:zproto.UserOutPeer.access_hash)
}

inline const UserOutPeer* UserOutPeer::internal_default_instance() {
  return &UserOutPeer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupOutPeer::kGroupIdFieldNumber;
const int GroupOutPeer::kAccessHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupOutPeer::GroupOutPeer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_peers_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.GroupOutPeer)
}

void GroupOutPeer::InitAsDefaultInstance() {
}

GroupOutPeer::GroupOutPeer(const GroupOutPeer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.GroupOutPeer)
}

void GroupOutPeer::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_hash_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

GroupOutPeer::~GroupOutPeer() {
  // @@protoc_insertion_point(destructor:zproto.GroupOutPeer)
  SharedDtor();
}

void GroupOutPeer::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupOutPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupOutPeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupOutPeer_descriptor_;
}

const GroupOutPeer& GroupOutPeer::default_instance() {
  protobuf_InitDefaults_peers_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GroupOutPeer> GroupOutPeer_default_instance_;

GroupOutPeer* GroupOutPeer::New(::google::protobuf::Arena* arena) const {
  GroupOutPeer* n = new GroupOutPeer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupOutPeer::UnsafeMergeFrom(const GroupOutPeer& from) {
  MergeFrom(from);
}
void GroupOutPeer::Swap(GroupOutPeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupOutPeer::InternalSwap(GroupOutPeer* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata GroupOutPeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupOutPeer_descriptor_;
  metadata.reflection = GroupOutPeer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupOutPeer

// optional string group_id = 1;
void GroupOutPeer::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupOutPeer::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupOutPeer.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupOutPeer::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupOutPeer.group_id)
}
void GroupOutPeer::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupOutPeer.group_id)
}
void GroupOutPeer::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupOutPeer.group_id)
}
::std::string* GroupOutPeer::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupOutPeer.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupOutPeer::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupOutPeer.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupOutPeer::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupOutPeer.group_id)
}

// optional int64 access_hash = 2;
void GroupOutPeer::clear_access_hash() {
  access_hash_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GroupOutPeer::access_hash() const {
  // @@protoc_insertion_point(field_get:zproto.GroupOutPeer.access_hash)
  return access_hash_;
}
void GroupOutPeer::set_access_hash(::google::protobuf::int64 value) {
  
  access_hash_ = value;
  // @@protoc_insertion_point(field_set:zproto.GroupOutPeer.access_hash)
}

inline const GroupOutPeer* GroupOutPeer::internal_default_instance() {
  return &GroupOutPeer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)
