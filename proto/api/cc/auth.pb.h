// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef PROTOBUF_auth_2eproto__INCLUDED
#define PROTOBUF_auth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "misc.pb.h"
#include "users.pb.h"
// @@protoc_insertion_point(includes)

namespace zproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_auth_2eproto();
void protobuf_InitDefaults_auth_2eproto();
void protobuf_AssignDesc_auth_2eproto();
void protobuf_ShutdownFile_auth_2eproto();

class AuthRsp;
class StartTestingAuthReq;
class StartTokenAuthReq;

// ===================================================================

class StartTokenAuthReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.StartTokenAuthReq) */ {
 public:
  StartTokenAuthReq();
  virtual ~StartTokenAuthReq();

  StartTokenAuthReq(const StartTokenAuthReq& from);

  inline StartTokenAuthReq& operator=(const StartTokenAuthReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartTokenAuthReq& default_instance();

  static const StartTokenAuthReq* internal_default_instance();

  void Swap(StartTokenAuthReq* other);

  // implements Message ----------------------------------------------

  inline StartTokenAuthReq* New() const { return New(NULL); }

  StartTokenAuthReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartTokenAuthReq* other);
  void UnsafeMergeFrom(const StartTokenAuthReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // optional uint32 app_id = 2;
  void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // optional string api_key = 3;
  void clear_api_key();
  static const int kApiKeyFieldNumber = 3;
  const ::std::string& api_key() const;
  void set_api_key(const ::std::string& value);
  void set_api_key(const char* value);
  void set_api_key(const char* value, size_t size);
  ::std::string* mutable_api_key();
  ::std::string* release_api_key();
  void set_allocated_api_key(::std::string* api_key);

  // optional bytes device_hash = 4;
  void clear_device_hash();
  static const int kDeviceHashFieldNumber = 4;
  const ::std::string& device_hash() const;
  void set_device_hash(const ::std::string& value);
  void set_device_hash(const char* value);
  void set_device_hash(const void* value, size_t size);
  ::std::string* mutable_device_hash();
  ::std::string* release_device_hash();
  void set_allocated_device_hash(::std::string* device_hash);

  // optional string device_title = 5;
  void clear_device_title();
  static const int kDeviceTitleFieldNumber = 5;
  const ::std::string& device_title() const;
  void set_device_title(const ::std::string& value);
  void set_device_title(const char* value);
  void set_device_title(const char* value, size_t size);
  ::std::string* mutable_device_title();
  ::std::string* release_device_title();
  void set_allocated_device_title(::std::string* device_title);

  // optional string time_zone = 6;
  void clear_time_zone();
  static const int kTimeZoneFieldNumber = 6;
  const ::std::string& time_zone() const;
  void set_time_zone(const ::std::string& value);
  void set_time_zone(const char* value);
  void set_time_zone(const char* value, size_t size);
  ::std::string* mutable_time_zone();
  ::std::string* release_time_zone();
  void set_allocated_time_zone(::std::string* time_zone);

  // repeated string preferred_languages = 7;
  int preferred_languages_size() const;
  void clear_preferred_languages();
  static const int kPreferredLanguagesFieldNumber = 7;
  const ::std::string& preferred_languages(int index) const;
  ::std::string* mutable_preferred_languages(int index);
  void set_preferred_languages(int index, const ::std::string& value);
  void set_preferred_languages(int index, const char* value);
  void set_preferred_languages(int index, const char* value, size_t size);
  ::std::string* add_preferred_languages();
  void add_preferred_languages(const ::std::string& value);
  void add_preferred_languages(const char* value);
  void add_preferred_languages(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& preferred_languages() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_preferred_languages();

  // @@protoc_insertion_point(class_scope:zproto.StartTokenAuthReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> preferred_languages_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr api_key_;
  ::google::protobuf::internal::ArenaStringPtr device_hash_;
  ::google::protobuf::internal::ArenaStringPtr device_title_;
  ::google::protobuf::internal::ArenaStringPtr time_zone_;
  ::google::protobuf::uint32 app_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_auth_2eproto_impl();
  friend void  protobuf_AddDesc_auth_2eproto_impl();
  friend void protobuf_AssignDesc_auth_2eproto();
  friend void protobuf_ShutdownFile_auth_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StartTokenAuthReq> StartTokenAuthReq_default_instance_;

// -------------------------------------------------------------------

class StartTestingAuthReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.StartTestingAuthReq) */ {
 public:
  StartTestingAuthReq();
  virtual ~StartTestingAuthReq();

  StartTestingAuthReq(const StartTestingAuthReq& from);

  inline StartTestingAuthReq& operator=(const StartTestingAuthReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartTestingAuthReq& default_instance();

  static const StartTestingAuthReq* internal_default_instance();

  void Swap(StartTestingAuthReq* other);

  // implements Message ----------------------------------------------

  inline StartTestingAuthReq* New() const { return New(NULL); }

  StartTestingAuthReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartTestingAuthReq* other);
  void UnsafeMergeFrom(const StartTestingAuthReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // optional string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional bytes device_hash = 4;
  void clear_device_hash();
  static const int kDeviceHashFieldNumber = 4;
  const ::std::string& device_hash() const;
  void set_device_hash(const ::std::string& value);
  void set_device_hash(const char* value);
  void set_device_hash(const void* value, size_t size);
  ::std::string* mutable_device_hash();
  ::std::string* release_device_hash();
  void set_allocated_device_hash(::std::string* device_hash);

  // optional string device_title = 5;
  void clear_device_title();
  static const int kDeviceTitleFieldNumber = 5;
  const ::std::string& device_title() const;
  void set_device_title(const ::std::string& value);
  void set_device_title(const char* value);
  void set_device_title(const char* value, size_t size);
  ::std::string* mutable_device_title();
  ::std::string* release_device_title();
  void set_allocated_device_title(::std::string* device_title);

  // optional string time_zone = 6;
  void clear_time_zone();
  static const int kTimeZoneFieldNumber = 6;
  const ::std::string& time_zone() const;
  void set_time_zone(const ::std::string& value);
  void set_time_zone(const char* value);
  void set_time_zone(const char* value, size_t size);
  ::std::string* mutable_time_zone();
  ::std::string* release_time_zone();
  void set_allocated_time_zone(::std::string* time_zone);

  // repeated string preferred_languages = 7;
  int preferred_languages_size() const;
  void clear_preferred_languages();
  static const int kPreferredLanguagesFieldNumber = 7;
  const ::std::string& preferred_languages(int index) const;
  ::std::string* mutable_preferred_languages(int index);
  void set_preferred_languages(int index, const ::std::string& value);
  void set_preferred_languages(int index, const char* value);
  void set_preferred_languages(int index, const char* value, size_t size);
  ::std::string* add_preferred_languages();
  void add_preferred_languages(const ::std::string& value);
  void add_preferred_languages(const char* value);
  void add_preferred_languages(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& preferred_languages() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_preferred_languages();

  // @@protoc_insertion_point(class_scope:zproto.StartTestingAuthReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> preferred_languages_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr device_hash_;
  ::google::protobuf::internal::ArenaStringPtr device_title_;
  ::google::protobuf::internal::ArenaStringPtr time_zone_;
  ::google::protobuf::uint32 app_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_auth_2eproto_impl();
  friend void  protobuf_AddDesc_auth_2eproto_impl();
  friend void protobuf_AssignDesc_auth_2eproto();
  friend void protobuf_ShutdownFile_auth_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StartTestingAuthReq> StartTestingAuthReq_default_instance_;

// -------------------------------------------------------------------

class AuthRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.AuthRsp) */ {
 public:
  AuthRsp();
  virtual ~AuthRsp();

  AuthRsp(const AuthRsp& from);

  inline AuthRsp& operator=(const AuthRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthRsp& default_instance();

  static const AuthRsp* internal_default_instance();

  void Swap(AuthRsp* other);

  // implements Message ----------------------------------------------

  inline AuthRsp* New() const { return New(NULL); }

  AuthRsp* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthRsp* other);
  void UnsafeMergeFrom(const AuthRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zproto.User user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::zproto::User& user() const;
  ::zproto::User* mutable_user();
  ::zproto::User* release_user();
  void set_allocated_user(::zproto::User* user);

  // optional .zproto.Config config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::zproto::Config& config() const;
  ::zproto::Config* mutable_config();
  ::zproto::Config* release_config();
  void set_allocated_config(::zproto::Config* config);

  // @@protoc_insertion_point(class_scope:zproto.AuthRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::User* user_;
  ::zproto::Config* config_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_auth_2eproto_impl();
  friend void  protobuf_AddDesc_auth_2eproto_impl();
  friend void protobuf_AssignDesc_auth_2eproto();
  friend void protobuf_ShutdownFile_auth_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthRsp> AuthRsp_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StartTokenAuthReq

// optional string token = 1;
inline void StartTokenAuthReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTokenAuthReq::token() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.token)
}
inline void StartTokenAuthReq::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.token)
}
inline void StartTokenAuthReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.token)
}
inline ::std::string* StartTokenAuthReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTokenAuthReq::release_token() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.token)
}

// optional uint32 app_id = 2;
inline void StartTokenAuthReq::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 StartTokenAuthReq::app_id() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.app_id)
  return app_id_;
}
inline void StartTokenAuthReq::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.app_id)
}

// optional string api_key = 3;
inline void StartTokenAuthReq::clear_api_key() {
  api_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTokenAuthReq::api_key() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.api_key)
  return api_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_api_key(const ::std::string& value) {
  
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.api_key)
}
inline void StartTokenAuthReq::set_api_key(const char* value) {
  
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.api_key)
}
inline void StartTokenAuthReq::set_api_key(const char* value, size_t size) {
  
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.api_key)
}
inline ::std::string* StartTokenAuthReq::mutable_api_key() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.api_key)
  return api_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTokenAuthReq::release_api_key() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.api_key)
  
  return api_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_allocated_api_key(::std::string* api_key) {
  if (api_key != NULL) {
    
  } else {
    
  }
  api_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), api_key);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.api_key)
}

// optional bytes device_hash = 4;
inline void StartTokenAuthReq::clear_device_hash() {
  device_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTokenAuthReq::device_hash() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.device_hash)
  return device_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_device_hash(const ::std::string& value) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.device_hash)
}
inline void StartTokenAuthReq::set_device_hash(const char* value) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.device_hash)
}
inline void StartTokenAuthReq::set_device_hash(const void* value, size_t size) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.device_hash)
}
inline ::std::string* StartTokenAuthReq::mutable_device_hash() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.device_hash)
  return device_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTokenAuthReq::release_device_hash() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.device_hash)
  
  return device_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_allocated_device_hash(::std::string* device_hash) {
  if (device_hash != NULL) {
    
  } else {
    
  }
  device_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_hash);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.device_hash)
}

// optional string device_title = 5;
inline void StartTokenAuthReq::clear_device_title() {
  device_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTokenAuthReq::device_title() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.device_title)
  return device_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_device_title(const ::std::string& value) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.device_title)
}
inline void StartTokenAuthReq::set_device_title(const char* value) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.device_title)
}
inline void StartTokenAuthReq::set_device_title(const char* value, size_t size) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.device_title)
}
inline ::std::string* StartTokenAuthReq::mutable_device_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.device_title)
  return device_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTokenAuthReq::release_device_title() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.device_title)
  
  return device_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_allocated_device_title(::std::string* device_title) {
  if (device_title != NULL) {
    
  } else {
    
  }
  device_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_title);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.device_title)
}

// optional string time_zone = 6;
inline void StartTokenAuthReq::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTokenAuthReq::time_zone() const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.time_zone)
  return time_zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_time_zone(const ::std::string& value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.time_zone)
}
inline void StartTokenAuthReq::set_time_zone(const char* value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.time_zone)
}
inline void StartTokenAuthReq::set_time_zone(const char* value, size_t size) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.time_zone)
}
inline ::std::string* StartTokenAuthReq::mutable_time_zone() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTokenAuthReq::release_time_zone() {
  // @@protoc_insertion_point(field_release:zproto.StartTokenAuthReq.time_zone)
  
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTokenAuthReq::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != NULL) {
    
  } else {
    
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTokenAuthReq.time_zone)
}

// repeated string preferred_languages = 7;
inline int StartTokenAuthReq::preferred_languages_size() const {
  return preferred_languages_.size();
}
inline void StartTokenAuthReq::clear_preferred_languages() {
  preferred_languages_.Clear();
}
inline const ::std::string& StartTokenAuthReq::preferred_languages(int index) const {
  // @@protoc_insertion_point(field_get:zproto.StartTokenAuthReq.preferred_languages)
  return preferred_languages_.Get(index);
}
inline ::std::string* StartTokenAuthReq::mutable_preferred_languages(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.StartTokenAuthReq.preferred_languages)
  return preferred_languages_.Mutable(index);
}
inline void StartTokenAuthReq::set_preferred_languages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zproto.StartTokenAuthReq.preferred_languages)
  preferred_languages_.Mutable(index)->assign(value);
}
inline void StartTokenAuthReq::set_preferred_languages(int index, const char* value) {
  preferred_languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zproto.StartTokenAuthReq.preferred_languages)
}
inline void StartTokenAuthReq::set_preferred_languages(int index, const char* value, size_t size) {
  preferred_languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTokenAuthReq.preferred_languages)
}
inline ::std::string* StartTokenAuthReq::add_preferred_languages() {
  // @@protoc_insertion_point(field_add_mutable:zproto.StartTokenAuthReq.preferred_languages)
  return preferred_languages_.Add();
}
inline void StartTokenAuthReq::add_preferred_languages(const ::std::string& value) {
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zproto.StartTokenAuthReq.preferred_languages)
}
inline void StartTokenAuthReq::add_preferred_languages(const char* value) {
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zproto.StartTokenAuthReq.preferred_languages)
}
inline void StartTokenAuthReq::add_preferred_languages(const char* value, size_t size) {
  preferred_languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zproto.StartTokenAuthReq.preferred_languages)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StartTokenAuthReq::preferred_languages() const {
  // @@protoc_insertion_point(field_list:zproto.StartTokenAuthReq.preferred_languages)
  return preferred_languages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StartTokenAuthReq::mutable_preferred_languages() {
  // @@protoc_insertion_point(field_mutable_list:zproto.StartTokenAuthReq.preferred_languages)
  return &preferred_languages_;
}

inline const StartTokenAuthReq* StartTokenAuthReq::internal_default_instance() {
  return &StartTokenAuthReq_default_instance_.get();
}
// -------------------------------------------------------------------

// StartTestingAuthReq

// optional uint32 app_id = 1;
inline void StartTestingAuthReq::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 StartTestingAuthReq::app_id() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.app_id)
  return app_id_;
}
inline void StartTestingAuthReq::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.app_id)
}

// optional string user_id = 2;
inline void StartTestingAuthReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTestingAuthReq::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTestingAuthReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.user_id)
}
inline void StartTestingAuthReq::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.user_id)
}
inline void StartTestingAuthReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.user_id)
}
inline ::std::string* StartTestingAuthReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTestingAuthReq::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.StartTestingAuthReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTestingAuthReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTestingAuthReq.user_id)
}

// optional bytes device_hash = 4;
inline void StartTestingAuthReq::clear_device_hash() {
  device_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTestingAuthReq::device_hash() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.device_hash)
  return device_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTestingAuthReq::set_device_hash(const ::std::string& value) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.device_hash)
}
inline void StartTestingAuthReq::set_device_hash(const char* value) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.device_hash)
}
inline void StartTestingAuthReq::set_device_hash(const void* value, size_t size) {
  
  device_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.device_hash)
}
inline ::std::string* StartTestingAuthReq::mutable_device_hash() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.device_hash)
  return device_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTestingAuthReq::release_device_hash() {
  // @@protoc_insertion_point(field_release:zproto.StartTestingAuthReq.device_hash)
  
  return device_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTestingAuthReq::set_allocated_device_hash(::std::string* device_hash) {
  if (device_hash != NULL) {
    
  } else {
    
  }
  device_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_hash);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTestingAuthReq.device_hash)
}

// optional string device_title = 5;
inline void StartTestingAuthReq::clear_device_title() {
  device_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTestingAuthReq::device_title() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.device_title)
  return device_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTestingAuthReq::set_device_title(const ::std::string& value) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.device_title)
}
inline void StartTestingAuthReq::set_device_title(const char* value) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.device_title)
}
inline void StartTestingAuthReq::set_device_title(const char* value, size_t size) {
  
  device_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.device_title)
}
inline ::std::string* StartTestingAuthReq::mutable_device_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.device_title)
  return device_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTestingAuthReq::release_device_title() {
  // @@protoc_insertion_point(field_release:zproto.StartTestingAuthReq.device_title)
  
  return device_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTestingAuthReq::set_allocated_device_title(::std::string* device_title) {
  if (device_title != NULL) {
    
  } else {
    
  }
  device_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_title);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTestingAuthReq.device_title)
}

// optional string time_zone = 6;
inline void StartTestingAuthReq::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTestingAuthReq::time_zone() const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.time_zone)
  return time_zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTestingAuthReq::set_time_zone(const ::std::string& value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.time_zone)
}
inline void StartTestingAuthReq::set_time_zone(const char* value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.time_zone)
}
inline void StartTestingAuthReq::set_time_zone(const char* value, size_t size) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.time_zone)
}
inline ::std::string* StartTestingAuthReq::mutable_time_zone() {
  
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTestingAuthReq::release_time_zone() {
  // @@protoc_insertion_point(field_release:zproto.StartTestingAuthReq.time_zone)
  
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTestingAuthReq::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != NULL) {
    
  } else {
    
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:zproto.StartTestingAuthReq.time_zone)
}

// repeated string preferred_languages = 7;
inline int StartTestingAuthReq::preferred_languages_size() const {
  return preferred_languages_.size();
}
inline void StartTestingAuthReq::clear_preferred_languages() {
  preferred_languages_.Clear();
}
inline const ::std::string& StartTestingAuthReq::preferred_languages(int index) const {
  // @@protoc_insertion_point(field_get:zproto.StartTestingAuthReq.preferred_languages)
  return preferred_languages_.Get(index);
}
inline ::std::string* StartTestingAuthReq::mutable_preferred_languages(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.StartTestingAuthReq.preferred_languages)
  return preferred_languages_.Mutable(index);
}
inline void StartTestingAuthReq::set_preferred_languages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zproto.StartTestingAuthReq.preferred_languages)
  preferred_languages_.Mutable(index)->assign(value);
}
inline void StartTestingAuthReq::set_preferred_languages(int index, const char* value) {
  preferred_languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zproto.StartTestingAuthReq.preferred_languages)
}
inline void StartTestingAuthReq::set_preferred_languages(int index, const char* value, size_t size) {
  preferred_languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zproto.StartTestingAuthReq.preferred_languages)
}
inline ::std::string* StartTestingAuthReq::add_preferred_languages() {
  // @@protoc_insertion_point(field_add_mutable:zproto.StartTestingAuthReq.preferred_languages)
  return preferred_languages_.Add();
}
inline void StartTestingAuthReq::add_preferred_languages(const ::std::string& value) {
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zproto.StartTestingAuthReq.preferred_languages)
}
inline void StartTestingAuthReq::add_preferred_languages(const char* value) {
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zproto.StartTestingAuthReq.preferred_languages)
}
inline void StartTestingAuthReq::add_preferred_languages(const char* value, size_t size) {
  preferred_languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zproto.StartTestingAuthReq.preferred_languages)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StartTestingAuthReq::preferred_languages() const {
  // @@protoc_insertion_point(field_list:zproto.StartTestingAuthReq.preferred_languages)
  return preferred_languages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StartTestingAuthReq::mutable_preferred_languages() {
  // @@protoc_insertion_point(field_mutable_list:zproto.StartTestingAuthReq.preferred_languages)
  return &preferred_languages_;
}

inline const StartTestingAuthReq* StartTestingAuthReq::internal_default_instance() {
  return &StartTestingAuthReq_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthRsp

// optional .zproto.User user = 2;
inline bool AuthRsp::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void AuthRsp::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
inline const ::zproto::User& AuthRsp::user() const {
  // @@protoc_insertion_point(field_get:zproto.AuthRsp.user)
  return user_ != NULL ? *user_
                         : *::zproto::User::internal_default_instance();
}
inline ::zproto::User* AuthRsp::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::zproto::User;
  }
  // @@protoc_insertion_point(field_mutable:zproto.AuthRsp.user)
  return user_;
}
inline ::zproto::User* AuthRsp::release_user() {
  // @@protoc_insertion_point(field_release:zproto.AuthRsp.user)
  
  ::zproto::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void AuthRsp::set_allocated_user(::zproto::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.AuthRsp.user)
}

// optional .zproto.Config config = 3;
inline bool AuthRsp::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void AuthRsp::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::zproto::Config& AuthRsp::config() const {
  // @@protoc_insertion_point(field_get:zproto.AuthRsp.config)
  return config_ != NULL ? *config_
                         : *::zproto::Config::internal_default_instance();
}
inline ::zproto::Config* AuthRsp::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::zproto::Config;
  }
  // @@protoc_insertion_point(field_mutable:zproto.AuthRsp.config)
  return config_;
}
inline ::zproto::Config* AuthRsp::release_config() {
  // @@protoc_insertion_point(field_release:zproto.AuthRsp.config)
  
  ::zproto::Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void AuthRsp::set_allocated_config(::zproto::Config* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.AuthRsp.config)
}

inline const AuthRsp* AuthRsp::internal_default_instance() {
  return &AuthRsp_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_auth_2eproto__INCLUDED
