/*
 *  Copyright (c) 2016, https://github.com/nebula-im
 *  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package zproto;

option java_package = "com.zchat.engine.zproto";
option java_outer_classname = "ZProto";
option optimize_for = CODE_SIZE;

import "peers.proto";

message EnumHelper {
  
  // ListLoadMode
  enum ListLoadMode {
    ListLoadMode_NONE = 0;      // proto3必须要填一个值
    FOWRARD = 1;
    BACKWARD = 2;
    BOTH = 3;
  }

  // MessageState
  enum MessageState {
    MessageState_NONE = 0;
    SENT = 1;
    RECEIVED = 2;
    READ = 3;
  }
  
  // 消息类型
  enum MessageType {
    MessageType_NONE = 0;
    TEXT = 1;
    AUDIO = 2;
    VIDEO = 3;
    // ......
  }
}

/*
// 连接认证
message UserToeken {
  string app_key     = 1;       //
  string user_token  = 2;       //
}

// 用户ID信息
message FullUserID {
  uint32 app_id       = 1;      // app_id
  string app_key      = 2;      // app_key
  string app_open_id  = 3;      // app_user_id
  uint32 user_id      = 4;      // user_id
}

// 用户ID信息
message OpenID {
  uint32 app_id       = 1;      // app_id
  string app_open_id  = 3;      // app_user_id
}

message ZUserID {
  uint32 app_id   = 1;      // app_id
  uint32 user_id  = 2;      // app_user_id
}

// Peer
message Peer {
  EnumHelper.PeerType type = 1; // Peer Type
  uint32 id               = 2;  // Peer Id
}

/ *
// Out peer with access hash
message OutPeer {
  EnumHelper.PeerType type = 1;  // Peer Type
  uint32 id = 2;                // Peer Id
  uint64 access_hash = 3;       // Peer access hash
}

// User's out peer
message UserOutPeer {
  uint32 uid = 1;         //   User's id
  uint64 access_hash = 2; //   User's access hash
}

// Group's out peer
message GroupOutPeer {
  uint32 group_id = 1;    //   Group's Id
  uint64 access_hash = 2; //   Group's access hash
}
* /

// 会话ID
message ConversationID {
  uint32_t sender_user_id = 1;
  Peer peer = 2;
};

// *
// 用户信息
message UserInfo {
  UserID uid    = 1;
  string nick   = 2;
  string avatar = 3;
}

struct UserID {
  uint32_t app_id;
  uint32_t user_id;
};

// 用户信息
struct UserInfo {
  UserID      user_id;
  std::string nick;
  std::string avatar;
  
  // META(app_id, user_id, nick, avatar);
};
*/

message UserID {
  uint32 app_id = 1;
  string user_id = 2;
};

message OnlineSessionStatusEntry {
  uint32 app_id = 1;
  string user_id = 2;
};

// 连接认证
message UserToeken {
  string app_key     = 1;       //
  string user_id     = 2;
  string user_token  = 3;       //
}

//// 用户ID信息
//message FullUserID {
//  uint32 app_id   = 1;      // app_id
//  string app_key  = 2;      // app_key
//  string open_id  = 3;      // app_user_id
//  // uint32 user_id  = 4;      // user_id
//}

//// 用户ID信息
//message OpenID {
//  uint32 app_id   = 1;      // app_id
//  string open_id  = 2;      // app_user_id
//}

//message ZUserID {
//  uint32 app_id       = 1;      // app_id
//  uint32 user_id      = 2;      // app_user_id
//}

// 用户信息
message UserInfo {
  uint32 app_id   = 1;
  string user_id    = 2;
  string push_name  = 3;
  string avatar     = 4;
};

// 会话ID
//message ConversationID {
//  uint32 sender_user_id = 1;
//  Peer peer = 2;
//}

message OnlineUser {
  uint32 app_id       = 1;
  string user_id      = 2;
  uint32 server_id    = 3;
  uint64 conn_id      = 4;
}

// 聊天消息内容
message MessageContainer {
  uint64 message_id = 1;                    // 消息ID
  string sender_user_id = 2;                // 发送者
  Peer peer = 3;                            // 接收者
  uint64 client_message_id = 4;             // 客户端消息ID（服务端去重字段）
  uint64 message_seq = 5;                   // 消息序号，也就是消息ID
  EnumHelper.MessageState state = 6;        // 状态
  EnumHelper.MessageType message_type = 7;  // 消息类型
  bytes message_content  = 8;               // 消息内容
  bytes passthrough_data = 9;               // 透传数据
  uint64  updated_at = 10;                  // 创建时间
}

// Conversation from history
message Dialog {
  Peer peer = 1; //   Peer of conversation
}

