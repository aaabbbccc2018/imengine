// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_error_codes.proto

#ifndef PROTOBUF_rpc_5ferror_5fcodes_2eproto__INCLUDED
#define PROTOBUF_rpc_5ferror_5fcodes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
namespace mtproto {
}  // namespace mtproto

namespace mtproto {

namespace protobuf_rpc_5ferror_5fcodes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_rpc_5ferror_5fcodes_2eproto

enum TLRpcErrorCodes {
  ERROR_CODE_OK = 0,
  FILE_MIGRATE_X = 303000,
  PHONE_MIGRATE_X = 303001,
  NETWORK_MIGRATE_X = 303002,
  USER_MIGRATE_X = 303003,
  ERROR_SEE_OTHER = 303,
  FIRSTNAME_INVALID = 400000,
  LASTNAME_INVALID = 400001,
  PHONE_NUMBER_INVALID = 400002,
  PHONE_CODE_HASH_EMPTY = 400003,
  PHONE_CODE_EMPTY = 400004,
  PHONE_CODE_EXPIRED = 400005,
  API_ID_INVALID = 400006,
  PHONE_NUMBER_OCCUPIED = 400007,
  PHONE_NUMBER_UNOCCUPIED = 400008,
  USERS_TOO_FEW = 400009,
  USERS_TOO_MUCH = 400010,
  TYPE_CONSTRUCTOR_INVALID = 400011,
  FILE_PART_INVALID = 400012,
  FILE_PART_X_MISSING = 400013,
  MD5_CHECKSUM_INVALID = 400014,
  PHOTO_INVALID_DIMENSIONS = 400015,
  FIELD_NAME_INVALID = 400016,
  FIELD_NAME_EMPTY = 400017,
  MSG_WAIT_FAILED = 400018,
  PARTICIPANT_VERSION_OUTDATED = 400019,
  USER_RESTRICTED = 400020,
  NAME_NOT_MODIFIED = 400021,
  USER_NOT_MUTUAL_CONTACT = 400022,
  BOT_GROUPS_BLOCKED = 400023,
  FILE_REFERENCE_X = 400500,
  FILE_TOKEN_INVALID = 400501,
  REQUEST_TOKEN_INVALID = 400502,
  PHONE_CODE_INVALID = 400025,
  PHONE_NUMBER_BANNED = 400030,
  SESSION_PASSWORD_NEEDED = 400040,
  CODE_INVALID = 400050,
  PASSWORD_HASH_INVALID = 400051,
  NEW_PASSWORD_BAD = 400052,
  NEW_SALT_INVALID = 400053,
  EMAIL_INVALID = 400054,
  EMAIL_UNCONFIRMED = 400055,
  USERNAME_INVALID = 400060,
  USERNAME_OCCUPIED = 400061,
  USERNAMES_UNAVAILABLE = 400062,
  USERNAME_NOT_MODIFIED = 400063,
  USERNAME_NOT_OCCUPIED = 400064,
  CHAT_ID_INVALID = 400070,
  CHAT_NOT_MODIFIED = 400071,
  PARTICIPANT_NOT_EXISTS = 400072,
  NO_EDIT_CHAT_PERMISSION = 400073,
  CHAT_TITLE_NOT_MODIFIED = 400074,
  NO_CHAT_TITLE = 400075,
  CHAT_ABOUT_NOT_MODIFIED = 400076,
  CHAT_ADMIN_REQUIRED = 400077,
  PARTICIPANT_EXISTED = 400078,
  CHANNEL_PRIVATE = 400080,
  CHANNEL_PUBLIC_GROUP_NA = 400081,
  USER_BANNED_IN_CHANNEL = 400082,
  CHANNELS_ADMIN_PUBLIC_TOO_MUCH = 40083,
  CHANNELS_TOO_MUCH = 400084,
  NO_INVITE_CHANNEL_PERMISSION = 400085,
  INVITE_HASH_EXPIRED = 400090,
  INVITE_HASH_INVALID = 400091,
  ACCESS_HASH_INVALID = 400200,
  INPUT_CHANNEL_EMPTY = 400201,
  USER_NOT_PARTICIPANT = 400202,
  PEER_ID_INVALID = 400203,
  CHANNEL_ID_INVALID = 400204,
  MESSAGE_ID_INVALID = 400210,
  MESSAGE_EDIT_TIME_EXPIRED = 400211,
  MESSAGE_NOT_MODIFIED = 400212,
  MESSAGE_EMPTY = 400213,
  USER_LEFT_CHAT = 400300,
  USER_KICKED = 400301,
  USER_ALREADY_PARTICIPANT = 400302,
  BAD_REQUEST = 400,
  AUTH_KEY_UNREGISTERED = 401000,
  AUTH_KEY_INVALID = 401001,
  USER_DEACTIVATED = 401002,
  SESSION_REVOKED = 401003,
  SESSION_EXPIRED = 401004,
  ACTIVE_USER_REQUIRED = 401005,
  AUTH_KEY_PERM_EMPTY = 401006,
  UNAUTHORIZED = 401,
  USER_PRIVACY_RESTRICTED = 403001,
  CALL_PROTOCOL_LAYER_INVALID = 403002,
  FORBIDDEN = 403,
  ERROR_LOCALIZED = 406000,
  LOCALIZED = 406,
  FLOOD_WAIT_X = 420000,
  FLOOD = 420,
  INTERNAL = 500,
  INTERNAL_SERVER_ERROR = 500000,
  OTHER = 501,
  OTHER2 = 502,
  DBERR = 600,
  DBERR_SQL = 600000,
  DBERR_CONN = 600001,
  NOTRETURN_CLIENT = 700,
  TLRpcErrorCodes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TLRpcErrorCodes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TLRpcErrorCodes_IsValid(int value);
const TLRpcErrorCodes TLRpcErrorCodes_MIN = ERROR_CODE_OK;
const TLRpcErrorCodes TLRpcErrorCodes_MAX = DBERR_CONN;
const int TLRpcErrorCodes_ARRAYSIZE = TLRpcErrorCodes_MAX + 1;

const ::google::protobuf::EnumDescriptor* TLRpcErrorCodes_descriptor();
inline const ::std::string& TLRpcErrorCodes_Name(TLRpcErrorCodes value) {
  return ::google::protobuf::internal::NameOfEnum(
    TLRpcErrorCodes_descriptor(), value);
}
inline bool TLRpcErrorCodes_Parse(
    const ::std::string& name, TLRpcErrorCodes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TLRpcErrorCodes>(
    TLRpcErrorCodes_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace mtproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mtproto::TLRpcErrorCodes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mtproto::TLRpcErrorCodes>() {
  return ::mtproto::TLRpcErrorCodes_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_5ferror_5fcodes_2eproto__INCLUDED
