// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.tl.proto

#ifndef PROTOBUF_service_2etl_2eproto__INCLUDED
#define PROTOBUF_service_2etl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "schema.tl.crc32.pb.h"
#include "schema.tl.core_types.pb.h"
#include "schema.tl.transport.pb.h"
#include "schema.tl.sync.pb.h"
// @@protoc_insertion_point(includes)
namespace mtproto {
class AuthKeyInfo;
class AuthKeyInfoDefaultTypeInternal;
extern AuthKeyInfoDefaultTypeInternal _AuthKeyInfo_default_instance_;
class AuthKeyInfo_Data;
class AuthKeyInfo_DataDefaultTypeInternal;
extern AuthKeyInfo_DataDefaultTypeInternal _AuthKeyInfo_Data_default_instance_;
class ClientSession;
class ClientSessionDefaultTypeInternal;
extern ClientSessionDefaultTypeInternal _ClientSession_default_instance_;
class ClientSession_Data;
class ClientSession_DataDefaultTypeInternal;
extern ClientSession_DataDefaultTypeInternal _ClientSession_Data_default_instance_;
class ConnectToServer;
class ConnectToServerDefaultTypeInternal;
extern ConnectToServerDefaultTypeInternal _ConnectToServer_default_instance_;
class ConnectToServer_Data;
class ConnectToServer_DataDefaultTypeInternal;
extern ConnectToServer_DataDefaultTypeInternal _ConnectToServer_Data_default_instance_;
class Int32;
class Int32DefaultTypeInternal;
extern Int32DefaultTypeInternal _Int32_default_instance_;
class Int32_Data;
class Int32_DataDefaultTypeInternal;
extern Int32_DataDefaultTypeInternal _Int32_Data_default_instance_;
class Int64;
class Int64DefaultTypeInternal;
extern Int64DefaultTypeInternal _Int64_default_instance_;
class Int64_Data;
class Int64_DataDefaultTypeInternal;
extern Int64_DataDefaultTypeInternal _Int64_Data_default_instance_;
class PushData;
class PushDataDefaultTypeInternal;
extern PushDataDefaultTypeInternal _PushData_default_instance_;
class PushData_Data;
class PushData_DataDefaultTypeInternal;
extern PushData_DataDefaultTypeInternal _PushData_Data_default_instance_;
class ServerConnected;
class ServerConnectedDefaultTypeInternal;
extern ServerConnectedDefaultTypeInternal _ServerConnected_default_instance_;
class ServerConnected_Data;
class ServerConnected_DataDefaultTypeInternal;
extern ServerConnected_DataDefaultTypeInternal _ServerConnected_Data_default_instance_;
class TL_authKeyInfo;
class TL_authKeyInfoDefaultTypeInternal;
extern TL_authKeyInfoDefaultTypeInternal _TL_authKeyInfo_default_instance_;
class TL_clientSessionInfo;
class TL_clientSessionInfoDefaultTypeInternal;
extern TL_clientSessionInfoDefaultTypeInternal _TL_clientSessionInfo_default_instance_;
class TL_int32;
class TL_int32DefaultTypeInternal;
extern TL_int32DefaultTypeInternal _TL_int32_default_instance_;
class TL_long;
class TL_longDefaultTypeInternal;
extern TL_longDefaultTypeInternal _TL_long_default_instance_;
class TL_session_bindAuthKeyUser;
class TL_session_bindAuthKeyUserDefaultTypeInternal;
extern TL_session_bindAuthKeyUserDefaultTypeInternal _TL_session_bindAuthKeyUser_default_instance_;
class TL_session_getAuthorizations;
class TL_session_getAuthorizationsDefaultTypeInternal;
extern TL_session_getAuthorizationsDefaultTypeInternal _TL_session_getAuthorizations_default_instance_;
class TL_session_getLayer;
class TL_session_getLayerDefaultTypeInternal;
extern TL_session_getLayerDefaultTypeInternal _TL_session_getLayer_default_instance_;
class TL_session_getUserId;
class TL_session_getUserIdDefaultTypeInternal;
extern TL_session_getUserIdDefaultTypeInternal _TL_session_getUserId_default_instance_;
class TL_session_queryAuthKey;
class TL_session_queryAuthKeyDefaultTypeInternal;
extern TL_session_queryAuthKeyDefaultTypeInternal _TL_session_queryAuthKey_default_instance_;
class TL_session_resetAuthorization;
class TL_session_resetAuthorizationDefaultTypeInternal;
extern TL_session_resetAuthorizationDefaultTypeInternal _TL_session_resetAuthorization_default_instance_;
class TL_session_setAuthKey;
class TL_session_setAuthKeyDefaultTypeInternal;
extern TL_session_setAuthKeyDefaultTypeInternal _TL_session_setAuthKey_default_instance_;
class TL_session_setClientSessionInfo;
class TL_session_setClientSessionInfoDefaultTypeInternal;
extern TL_session_setClientSessionInfoDefaultTypeInternal _TL_session_setClientSessionInfo_default_instance_;
class TL_session_unbindAuthKeyUser;
class TL_session_unbindAuthKeyUserDefaultTypeInternal;
extern TL_session_unbindAuthKeyUserDefaultTypeInternal _TL_session_unbindAuthKeyUser_default_instance_;
class TL_sync_connectToSessionServer;
class TL_sync_connectToSessionServerDefaultTypeInternal;
extern TL_sync_connectToSessionServerDefaultTypeInternal _TL_sync_connectToSessionServer_default_instance_;
class TL_sync_getChannelDifference;
class TL_sync_getChannelDifferenceDefaultTypeInternal;
extern TL_sync_getChannelDifferenceDefaultTypeInternal _TL_sync_getChannelDifference_default_instance_;
class TL_sync_getDifference;
class TL_sync_getDifferenceDefaultTypeInternal;
extern TL_sync_getDifferenceDefaultTypeInternal _TL_sync_getDifference_default_instance_;
class TL_sync_getState;
class TL_sync_getStateDefaultTypeInternal;
extern TL_sync_getStateDefaultTypeInternal _TL_sync_getState_default_instance_;
class TL_sync_pushChannelUpdates;
class TL_sync_pushChannelUpdatesDefaultTypeInternal;
extern TL_sync_pushChannelUpdatesDefaultTypeInternal _TL_sync_pushChannelUpdates_default_instance_;
class TL_sync_pushRpcResult;
class TL_sync_pushRpcResultDefaultTypeInternal;
extern TL_sync_pushRpcResultDefaultTypeInternal _TL_sync_pushRpcResult_default_instance_;
class TL_sync_pushRpcResultData;
class TL_sync_pushRpcResultDataDefaultTypeInternal;
extern TL_sync_pushRpcResultDataDefaultTypeInternal _TL_sync_pushRpcResultData_default_instance_;
class TL_sync_pushUpdates;
class TL_sync_pushUpdatesDefaultTypeInternal;
extern TL_sync_pushUpdatesDefaultTypeInternal _TL_sync_pushUpdates_default_instance_;
class TL_sync_pushUpdatesData;
class TL_sync_pushUpdatesDataDefaultTypeInternal;
extern TL_sync_pushUpdatesDataDefaultTypeInternal _TL_sync_pushUpdatesData_default_instance_;
class TL_sync_sessionServerConnected;
class TL_sync_sessionServerConnectedDefaultTypeInternal;
extern TL_sync_sessionServerConnectedDefaultTypeInternal _TL_sync_sessionServerConnected_default_instance_;
class TL_sync_syncChannelUpdates;
class TL_sync_syncChannelUpdatesDefaultTypeInternal;
extern TL_sync_syncChannelUpdatesDefaultTypeInternal _TL_sync_syncChannelUpdates_default_instance_;
class TL_sync_syncUpdates;
class TL_sync_syncUpdatesDefaultTypeInternal;
extern TL_sync_syncUpdatesDefaultTypeInternal _TL_sync_syncUpdates_default_instance_;
}  // namespace mtproto

namespace mtproto {

namespace protobuf_service_2etl_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_service_2etl_2eproto

// ===================================================================

class ConnectToServer_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.ConnectToServer_Data) */ {
 public:
  ConnectToServer_Data();
  virtual ~ConnectToServer_Data();

  ConnectToServer_Data(const ConnectToServer_Data& from);

  inline ConnectToServer_Data& operator=(const ConnectToServer_Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectToServer_Data(ConnectToServer_Data&& from) noexcept
    : ConnectToServer_Data() {
    *this = ::std::move(from);
  }

  inline ConnectToServer_Data& operator=(ConnectToServer_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectToServer_Data& default_instance();

  static inline const ConnectToServer_Data* internal_default_instance() {
    return reinterpret_cast<const ConnectToServer_Data*>(
               &_ConnectToServer_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ConnectToServer_Data* other);
  friend void swap(ConnectToServer_Data& a, ConnectToServer_Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectToServer_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectToServer_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectToServer_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sync_server_id = 1;
  void clear_sync_server_id();
  static const int kSyncServerIdFieldNumber = 1;
  ::google::protobuf::int32 sync_server_id() const;
  void set_sync_server_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.ConnectToServer_Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sync_server_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectToServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.ConnectToServer) */ {
 public:
  ConnectToServer();
  virtual ~ConnectToServer();

  ConnectToServer(const ConnectToServer& from);

  inline ConnectToServer& operator=(const ConnectToServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectToServer(ConnectToServer&& from) noexcept
    : ConnectToServer() {
    *this = ::std::move(from);
  }

  inline ConnectToServer& operator=(ConnectToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectToServer& default_instance();

  static inline const ConnectToServer* internal_default_instance() {
    return reinterpret_cast<const ConnectToServer*>(
               &_ConnectToServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ConnectToServer* other);
  friend void swap(ConnectToServer& a, ConnectToServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectToServer* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectToServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectToServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.ConnectToServer_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::ConnectToServer_Data& data2() const;
  ::mtproto::ConnectToServer_Data* mutable_data2();
  ::mtproto::ConnectToServer_Data* release_data2();
  void set_allocated_data2(::mtproto::ConnectToServer_Data* data2);

  // .mtproto.TLConstructor constructor = 1;
  void clear_constructor();
  static const int kConstructorFieldNumber = 1;
  ::mtproto::TLConstructor constructor() const;
  void set_constructor(::mtproto::TLConstructor value);

  // @@protoc_insertion_point(class_scope:mtproto.ConnectToServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::ConnectToServer_Data* data2_;
  int constructor_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_connectToSessionServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_connectToSessionServer) */ {
 public:
  TL_sync_connectToSessionServer();
  virtual ~TL_sync_connectToSessionServer();

  TL_sync_connectToSessionServer(const TL_sync_connectToSessionServer& from);

  inline TL_sync_connectToSessionServer& operator=(const TL_sync_connectToSessionServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_connectToSessionServer(TL_sync_connectToSessionServer&& from) noexcept
    : TL_sync_connectToSessionServer() {
    *this = ::std::move(from);
  }

  inline TL_sync_connectToSessionServer& operator=(TL_sync_connectToSessionServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_connectToSessionServer& default_instance();

  static inline const TL_sync_connectToSessionServer* internal_default_instance() {
    return reinterpret_cast<const TL_sync_connectToSessionServer*>(
               &_TL_sync_connectToSessionServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TL_sync_connectToSessionServer* other);
  friend void swap(TL_sync_connectToSessionServer& a, TL_sync_connectToSessionServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_connectToSessionServer* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_connectToSessionServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_connectToSessionServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.ConnectToServer_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::ConnectToServer_Data& data2() const;
  ::mtproto::ConnectToServer_Data* mutable_data2();
  ::mtproto::ConnectToServer_Data* release_data2();
  void set_allocated_data2(::mtproto::ConnectToServer_Data* data2);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_connectToSessionServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::ConnectToServer_Data* data2_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerConnected_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.ServerConnected_Data) */ {
 public:
  ServerConnected_Data();
  virtual ~ServerConnected_Data();

  ServerConnected_Data(const ServerConnected_Data& from);

  inline ServerConnected_Data& operator=(const ServerConnected_Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerConnected_Data(ServerConnected_Data&& from) noexcept
    : ServerConnected_Data() {
    *this = ::std::move(from);
  }

  inline ServerConnected_Data& operator=(ServerConnected_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConnected_Data& default_instance();

  static inline const ServerConnected_Data* internal_default_instance() {
    return reinterpret_cast<const ServerConnected_Data*>(
               &_ServerConnected_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ServerConnected_Data* other);
  friend void swap(ServerConnected_Data& a, ServerConnected_Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerConnected_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerConnected_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerConnected_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // int32 session_server_id = 1;
  void clear_session_server_id();
  static const int kSessionServerIdFieldNumber = 1;
  ::google::protobuf::int32 session_server_id() const;
  void set_session_server_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.ServerConnected_Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::int32 session_server_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.ServerConnected) */ {
 public:
  ServerConnected();
  virtual ~ServerConnected();

  ServerConnected(const ServerConnected& from);

  inline ServerConnected& operator=(const ServerConnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerConnected(ServerConnected&& from) noexcept
    : ServerConnected() {
    *this = ::std::move(from);
  }

  inline ServerConnected& operator=(ServerConnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConnected& default_instance();

  static inline const ServerConnected* internal_default_instance() {
    return reinterpret_cast<const ServerConnected*>(
               &_ServerConnected_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ServerConnected* other);
  friend void swap(ServerConnected& a, ServerConnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerConnected* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerConnected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerConnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.ServerConnected_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::ServerConnected_Data& data2() const;
  ::mtproto::ServerConnected_Data* mutable_data2();
  ::mtproto::ServerConnected_Data* release_data2();
  void set_allocated_data2(::mtproto::ServerConnected_Data* data2);

  // .mtproto.TLConstructor constructor = 1;
  void clear_constructor();
  static const int kConstructorFieldNumber = 1;
  ::mtproto::TLConstructor constructor() const;
  void set_constructor(::mtproto::TLConstructor value);

  // @@protoc_insertion_point(class_scope:mtproto.ServerConnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::ServerConnected_Data* data2_;
  int constructor_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_sessionServerConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_sessionServerConnected) */ {
 public:
  TL_sync_sessionServerConnected();
  virtual ~TL_sync_sessionServerConnected();

  TL_sync_sessionServerConnected(const TL_sync_sessionServerConnected& from);

  inline TL_sync_sessionServerConnected& operator=(const TL_sync_sessionServerConnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_sessionServerConnected(TL_sync_sessionServerConnected&& from) noexcept
    : TL_sync_sessionServerConnected() {
    *this = ::std::move(from);
  }

  inline TL_sync_sessionServerConnected& operator=(TL_sync_sessionServerConnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_sessionServerConnected& default_instance();

  static inline const TL_sync_sessionServerConnected* internal_default_instance() {
    return reinterpret_cast<const TL_sync_sessionServerConnected*>(
               &_TL_sync_sessionServerConnected_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TL_sync_sessionServerConnected* other);
  friend void swap(TL_sync_sessionServerConnected& a, TL_sync_sessionServerConnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_sessionServerConnected* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_sessionServerConnected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_sessionServerConnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.ServerConnected_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::ServerConnected_Data& data2() const;
  ::mtproto::ServerConnected_Data* mutable_data2();
  ::mtproto::ServerConnected_Data* release_data2();
  void set_allocated_data2(::mtproto::ServerConnected_Data* data2);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_sessionServerConnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::ServerConnected_Data* data2_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushData_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.PushData_Data) */ {
 public:
  PushData_Data();
  virtual ~PushData_Data();

  PushData_Data(const PushData_Data& from);

  inline PushData_Data& operator=(const PushData_Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushData_Data(PushData_Data&& from) noexcept
    : PushData_Data() {
    *this = ::std::move(from);
  }

  inline PushData_Data& operator=(PushData_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushData_Data& default_instance();

  static inline const PushData_Data* internal_default_instance() {
    return reinterpret_cast<const PushData_Data*>(
               &_PushData_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PushData_Data* other);
  friend void swap(PushData_Data& a, PushData_Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushData_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  PushData_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PushData_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes result = 4;
  void clear_result();
  static const int kResultFieldNumber = 4;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // .mtproto.Updates updates = 2;
  bool has_updates() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  const ::mtproto::Updates& updates() const;
  ::mtproto::Updates* mutable_updates();
  ::mtproto::Updates* release_updates();
  void set_allocated_updates(::mtproto::Updates* updates);

  // int64 auth_key_id = 1;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 1;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int64 client_req_msg_id = 3;
  void clear_client_req_msg_id();
  static const int kClientReqMsgIdFieldNumber = 3;
  ::google::protobuf::int64 client_req_msg_id() const;
  void set_client_req_msg_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mtproto.PushData_Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::mtproto::Updates* updates_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int64 client_req_msg_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.PushData) */ {
 public:
  PushData();
  virtual ~PushData();

  PushData(const PushData& from);

  inline PushData& operator=(const PushData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushData(PushData&& from) noexcept
    : PushData() {
    *this = ::std::move(from);
  }

  inline PushData& operator=(PushData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushData& default_instance();

  static inline const PushData* internal_default_instance() {
    return reinterpret_cast<const PushData*>(
               &_PushData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PushData* other);
  friend void swap(PushData& a, PushData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushData* New() const PROTOBUF_FINAL { return New(NULL); }

  PushData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PushData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.PushData_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::PushData_Data& data2() const;
  ::mtproto::PushData_Data* mutable_data2();
  ::mtproto::PushData_Data* release_data2();
  void set_allocated_data2(::mtproto::PushData_Data* data2);

  // .mtproto.TLConstructor constructor = 1;
  void clear_constructor();
  static const int kConstructorFieldNumber = 1;
  ::mtproto::TLConstructor constructor() const;
  void set_constructor(::mtproto::TLConstructor value);

  // @@protoc_insertion_point(class_scope:mtproto.PushData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::PushData_Data* data2_;
  int constructor_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_pushUpdatesData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_pushUpdatesData) */ {
 public:
  TL_sync_pushUpdatesData();
  virtual ~TL_sync_pushUpdatesData();

  TL_sync_pushUpdatesData(const TL_sync_pushUpdatesData& from);

  inline TL_sync_pushUpdatesData& operator=(const TL_sync_pushUpdatesData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_pushUpdatesData(TL_sync_pushUpdatesData&& from) noexcept
    : TL_sync_pushUpdatesData() {
    *this = ::std::move(from);
  }

  inline TL_sync_pushUpdatesData& operator=(TL_sync_pushUpdatesData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_pushUpdatesData& default_instance();

  static inline const TL_sync_pushUpdatesData* internal_default_instance() {
    return reinterpret_cast<const TL_sync_pushUpdatesData*>(
               &_TL_sync_pushUpdatesData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TL_sync_pushUpdatesData* other);
  friend void swap(TL_sync_pushUpdatesData& a, TL_sync_pushUpdatesData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_pushUpdatesData* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_pushUpdatesData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_pushUpdatesData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.PushData_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::PushData_Data& data2() const;
  ::mtproto::PushData_Data* mutable_data2();
  ::mtproto::PushData_Data* release_data2();
  void set_allocated_data2(::mtproto::PushData_Data* data2);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_pushUpdatesData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::PushData_Data* data2_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_pushRpcResultData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_pushRpcResultData) */ {
 public:
  TL_sync_pushRpcResultData();
  virtual ~TL_sync_pushRpcResultData();

  TL_sync_pushRpcResultData(const TL_sync_pushRpcResultData& from);

  inline TL_sync_pushRpcResultData& operator=(const TL_sync_pushRpcResultData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_pushRpcResultData(TL_sync_pushRpcResultData&& from) noexcept
    : TL_sync_pushRpcResultData() {
    *this = ::std::move(from);
  }

  inline TL_sync_pushRpcResultData& operator=(TL_sync_pushRpcResultData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_pushRpcResultData& default_instance();

  static inline const TL_sync_pushRpcResultData* internal_default_instance() {
    return reinterpret_cast<const TL_sync_pushRpcResultData*>(
               &_TL_sync_pushRpcResultData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TL_sync_pushRpcResultData* other);
  friend void swap(TL_sync_pushRpcResultData& a, TL_sync_pushRpcResultData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_pushRpcResultData* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_pushRpcResultData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_pushRpcResultData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.PushData_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::PushData_Data& data2() const;
  ::mtproto::PushData_Data* mutable_data2();
  ::mtproto::PushData_Data* release_data2();
  void set_allocated_data2(::mtproto::PushData_Data* data2);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_pushRpcResultData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::PushData_Data* data2_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Int32_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.Int32_Data) */ {
 public:
  Int32_Data();
  virtual ~Int32_Data();

  Int32_Data(const Int32_Data& from);

  inline Int32_Data& operator=(const Int32_Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Int32_Data(Int32_Data&& from) noexcept
    : Int32_Data() {
    *this = ::std::move(from);
  }

  inline Int32_Data& operator=(Int32_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Int32_Data& default_instance();

  static inline const Int32_Data* internal_default_instance() {
    return reinterpret_cast<const Int32_Data*>(
               &_Int32_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Int32_Data* other);
  friend void swap(Int32_Data& a, Int32_Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Int32_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  Int32_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Int32_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 v = 1;
  void clear_v();
  static const int kVFieldNumber = 1;
  ::google::protobuf::int32 v() const;
  void set_v(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.Int32_Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 v_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Int32 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.Int32) */ {
 public:
  Int32();
  virtual ~Int32();

  Int32(const Int32& from);

  inline Int32& operator=(const Int32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Int32(Int32&& from) noexcept
    : Int32() {
    *this = ::std::move(from);
  }

  inline Int32& operator=(Int32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Int32& default_instance();

  static inline const Int32* internal_default_instance() {
    return reinterpret_cast<const Int32*>(
               &_Int32_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Int32* other);
  friend void swap(Int32& a, Int32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Int32* New() const PROTOBUF_FINAL { return New(NULL); }

  Int32* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Int32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.Int32_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::Int32_Data& data2() const;
  ::mtproto::Int32_Data* mutable_data2();
  ::mtproto::Int32_Data* release_data2();
  void set_allocated_data2(::mtproto::Int32_Data* data2);

  // .mtproto.TLConstructor constructor = 1;
  void clear_constructor();
  static const int kConstructorFieldNumber = 1;
  ::mtproto::TLConstructor constructor() const;
  void set_constructor(::mtproto::TLConstructor value);

  // @@protoc_insertion_point(class_scope:mtproto.Int32)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::Int32_Data* data2_;
  int constructor_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_int32 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_int32) */ {
 public:
  TL_int32();
  virtual ~TL_int32();

  TL_int32(const TL_int32& from);

  inline TL_int32& operator=(const TL_int32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_int32(TL_int32&& from) noexcept
    : TL_int32() {
    *this = ::std::move(from);
  }

  inline TL_int32& operator=(TL_int32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_int32& default_instance();

  static inline const TL_int32* internal_default_instance() {
    return reinterpret_cast<const TL_int32*>(
               &_TL_int32_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TL_int32* other);
  friend void swap(TL_int32& a, TL_int32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_int32* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_int32* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_int32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.Int32_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::Int32_Data& data2() const;
  ::mtproto::Int32_Data* mutable_data2();
  ::mtproto::Int32_Data* release_data2();
  void set_allocated_data2(::mtproto::Int32_Data* data2);

  // @@protoc_insertion_point(class_scope:mtproto.TL_int32)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::Int32_Data* data2_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Int64_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.Int64_Data) */ {
 public:
  Int64_Data();
  virtual ~Int64_Data();

  Int64_Data(const Int64_Data& from);

  inline Int64_Data& operator=(const Int64_Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Int64_Data(Int64_Data&& from) noexcept
    : Int64_Data() {
    *this = ::std::move(from);
  }

  inline Int64_Data& operator=(Int64_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Int64_Data& default_instance();

  static inline const Int64_Data* internal_default_instance() {
    return reinterpret_cast<const Int64_Data*>(
               &_Int64_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Int64_Data* other);
  friend void swap(Int64_Data& a, Int64_Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Int64_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  Int64_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Int64_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 v = 1;
  void clear_v();
  static const int kVFieldNumber = 1;
  ::google::protobuf::int64 v() const;
  void set_v(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mtproto.Int64_Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 v_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Int64 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.Int64) */ {
 public:
  Int64();
  virtual ~Int64();

  Int64(const Int64& from);

  inline Int64& operator=(const Int64& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Int64(Int64&& from) noexcept
    : Int64() {
    *this = ::std::move(from);
  }

  inline Int64& operator=(Int64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Int64& default_instance();

  static inline const Int64* internal_default_instance() {
    return reinterpret_cast<const Int64*>(
               &_Int64_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Int64* other);
  friend void swap(Int64& a, Int64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Int64* New() const PROTOBUF_FINAL { return New(NULL); }

  Int64* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Int64* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.Int64_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::Int64_Data& data2() const;
  ::mtproto::Int64_Data* mutable_data2();
  ::mtproto::Int64_Data* release_data2();
  void set_allocated_data2(::mtproto::Int64_Data* data2);

  // .mtproto.TLConstructor constructor = 1;
  void clear_constructor();
  static const int kConstructorFieldNumber = 1;
  ::mtproto::TLConstructor constructor() const;
  void set_constructor(::mtproto::TLConstructor value);

  // @@protoc_insertion_point(class_scope:mtproto.Int64)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::Int64_Data* data2_;
  int constructor_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_long : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_long) */ {
 public:
  TL_long();
  virtual ~TL_long();

  TL_long(const TL_long& from);

  inline TL_long& operator=(const TL_long& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_long(TL_long&& from) noexcept
    : TL_long() {
    *this = ::std::move(from);
  }

  inline TL_long& operator=(TL_long&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_long& default_instance();

  static inline const TL_long* internal_default_instance() {
    return reinterpret_cast<const TL_long*>(
               &_TL_long_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(TL_long* other);
  friend void swap(TL_long& a, TL_long& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_long* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_long* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_long* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.Int64_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::Int64_Data& data2() const;
  ::mtproto::Int64_Data* mutable_data2();
  ::mtproto::Int64_Data* release_data2();
  void set_allocated_data2(::mtproto::Int64_Data* data2);

  // @@protoc_insertion_point(class_scope:mtproto.TL_long)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::Int64_Data* data2_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthKeyInfo_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.AuthKeyInfo_Data) */ {
 public:
  AuthKeyInfo_Data();
  virtual ~AuthKeyInfo_Data();

  AuthKeyInfo_Data(const AuthKeyInfo_Data& from);

  inline AuthKeyInfo_Data& operator=(const AuthKeyInfo_Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthKeyInfo_Data(AuthKeyInfo_Data&& from) noexcept
    : AuthKeyInfo_Data() {
    *this = ::std::move(from);
  }

  inline AuthKeyInfo_Data& operator=(AuthKeyInfo_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthKeyInfo_Data& default_instance();

  static inline const AuthKeyInfo_Data* internal_default_instance() {
    return reinterpret_cast<const AuthKeyInfo_Data*>(
               &_AuthKeyInfo_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(AuthKeyInfo_Data* other);
  friend void swap(AuthKeyInfo_Data& a, AuthKeyInfo_Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthKeyInfo_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthKeyInfo_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthKeyInfo_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes auth_key = 2;
  void clear_auth_key();
  static const int kAuthKeyFieldNumber = 2;
  const ::std::string& auth_key() const;
  void set_auth_key(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_key(::std::string&& value);
  #endif
  void set_auth_key(const char* value);
  void set_auth_key(const void* value, size_t size);
  ::std::string* mutable_auth_key();
  ::std::string* release_auth_key();
  void set_allocated_auth_key(::std::string* auth_key);

  // .mtproto.FutureSalt future_salt = 3;
  bool has_future_salt() const;
  void clear_future_salt();
  static const int kFutureSaltFieldNumber = 3;
  const ::mtproto::FutureSalt& future_salt() const;
  ::mtproto::FutureSalt* mutable_future_salt();
  ::mtproto::FutureSalt* release_future_salt();
  void set_allocated_future_salt(::mtproto::FutureSalt* future_salt);

  // int64 auth_key_id = 1;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 1;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mtproto.AuthKeyInfo_Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr auth_key_;
  ::mtproto::FutureSalt* future_salt_;
  ::google::protobuf::int64 auth_key_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthKeyInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.AuthKeyInfo) */ {
 public:
  AuthKeyInfo();
  virtual ~AuthKeyInfo();

  AuthKeyInfo(const AuthKeyInfo& from);

  inline AuthKeyInfo& operator=(const AuthKeyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthKeyInfo(AuthKeyInfo&& from) noexcept
    : AuthKeyInfo() {
    *this = ::std::move(from);
  }

  inline AuthKeyInfo& operator=(AuthKeyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthKeyInfo& default_instance();

  static inline const AuthKeyInfo* internal_default_instance() {
    return reinterpret_cast<const AuthKeyInfo*>(
               &_AuthKeyInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(AuthKeyInfo* other);
  friend void swap(AuthKeyInfo& a, AuthKeyInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthKeyInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthKeyInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthKeyInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.AuthKeyInfo_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::AuthKeyInfo_Data& data2() const;
  ::mtproto::AuthKeyInfo_Data* mutable_data2();
  ::mtproto::AuthKeyInfo_Data* release_data2();
  void set_allocated_data2(::mtproto::AuthKeyInfo_Data* data2);

  // .mtproto.TLConstructor constructor = 1;
  void clear_constructor();
  static const int kConstructorFieldNumber = 1;
  ::mtproto::TLConstructor constructor() const;
  void set_constructor(::mtproto::TLConstructor value);

  // @@protoc_insertion_point(class_scope:mtproto.AuthKeyInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::AuthKeyInfo_Data* data2_;
  int constructor_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_authKeyInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_authKeyInfo) */ {
 public:
  TL_authKeyInfo();
  virtual ~TL_authKeyInfo();

  TL_authKeyInfo(const TL_authKeyInfo& from);

  inline TL_authKeyInfo& operator=(const TL_authKeyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_authKeyInfo(TL_authKeyInfo&& from) noexcept
    : TL_authKeyInfo() {
    *this = ::std::move(from);
  }

  inline TL_authKeyInfo& operator=(TL_authKeyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_authKeyInfo& default_instance();

  static inline const TL_authKeyInfo* internal_default_instance() {
    return reinterpret_cast<const TL_authKeyInfo*>(
               &_TL_authKeyInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(TL_authKeyInfo* other);
  friend void swap(TL_authKeyInfo& a, TL_authKeyInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_authKeyInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_authKeyInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_authKeyInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.AuthKeyInfo_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::AuthKeyInfo_Data& data2() const;
  ::mtproto::AuthKeyInfo_Data* mutable_data2();
  ::mtproto::AuthKeyInfo_Data* release_data2();
  void set_allocated_data2(::mtproto::AuthKeyInfo_Data* data2);

  // @@protoc_insertion_point(class_scope:mtproto.TL_authKeyInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::AuthKeyInfo_Data* data2_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientSession_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.ClientSession_Data) */ {
 public:
  ClientSession_Data();
  virtual ~ClientSession_Data();

  ClientSession_Data(const ClientSession_Data& from);

  inline ClientSession_Data& operator=(const ClientSession_Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientSession_Data(ClientSession_Data&& from) noexcept
    : ClientSession_Data() {
    *this = ::std::move(from);
  }

  inline ClientSession_Data& operator=(ClientSession_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientSession_Data& default_instance();

  static inline const ClientSession_Data* internal_default_instance() {
    return reinterpret_cast<const ClientSession_Data*>(
               &_ClientSession_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ClientSession_Data* other);
  friend void swap(ClientSession_Data& a, ClientSession_Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientSession_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientSession_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientSession_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string device_model = 5;
  void clear_device_model();
  static const int kDeviceModelFieldNumber = 5;
  const ::std::string& device_model() const;
  void set_device_model(const ::std::string& value);
  #if LANG_CXX11
  void set_device_model(::std::string&& value);
  #endif
  void set_device_model(const char* value);
  void set_device_model(const char* value, size_t size);
  ::std::string* mutable_device_model();
  ::std::string* release_device_model();
  void set_allocated_device_model(::std::string* device_model);

  // string system_version = 6;
  void clear_system_version();
  static const int kSystemVersionFieldNumber = 6;
  const ::std::string& system_version() const;
  void set_system_version(const ::std::string& value);
  #if LANG_CXX11
  void set_system_version(::std::string&& value);
  #endif
  void set_system_version(const char* value);
  void set_system_version(const char* value, size_t size);
  ::std::string* mutable_system_version();
  ::std::string* release_system_version();
  void set_allocated_system_version(::std::string* system_version);

  // string app_version = 7;
  void clear_app_version();
  static const int kAppVersionFieldNumber = 7;
  const ::std::string& app_version() const;
  void set_app_version(const ::std::string& value);
  #if LANG_CXX11
  void set_app_version(::std::string&& value);
  #endif
  void set_app_version(const char* value);
  void set_app_version(const char* value, size_t size);
  ::std::string* mutable_app_version();
  ::std::string* release_app_version();
  void set_allocated_app_version(::std::string* app_version);

  // string system_lang_code = 8;
  void clear_system_lang_code();
  static const int kSystemLangCodeFieldNumber = 8;
  const ::std::string& system_lang_code() const;
  void set_system_lang_code(const ::std::string& value);
  #if LANG_CXX11
  void set_system_lang_code(::std::string&& value);
  #endif
  void set_system_lang_code(const char* value);
  void set_system_lang_code(const char* value, size_t size);
  ::std::string* mutable_system_lang_code();
  ::std::string* release_system_lang_code();
  void set_allocated_system_lang_code(::std::string* system_lang_code);

  // string lang_pack = 9;
  void clear_lang_pack();
  static const int kLangPackFieldNumber = 9;
  const ::std::string& lang_pack() const;
  void set_lang_pack(const ::std::string& value);
  #if LANG_CXX11
  void set_lang_pack(::std::string&& value);
  #endif
  void set_lang_pack(const char* value);
  void set_lang_pack(const char* value, size_t size);
  ::std::string* mutable_lang_pack();
  ::std::string* release_lang_pack();
  void set_allocated_lang_pack(::std::string* lang_pack);

  // string lang_code = 10;
  void clear_lang_code();
  static const int kLangCodeFieldNumber = 10;
  const ::std::string& lang_code() const;
  void set_lang_code(const ::std::string& value);
  #if LANG_CXX11
  void set_lang_code(::std::string&& value);
  #endif
  void set_lang_code(const char* value);
  void set_lang_code(const char* value, size_t size);
  ::std::string* mutable_lang_code();
  ::std::string* release_lang_code();
  void set_allocated_lang_code(::std::string* lang_code);

  // int64 auth_key_id = 1;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 1;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int32 layer = 3;
  void clear_layer();
  static const int kLayerFieldNumber = 3;
  ::google::protobuf::int32 layer() const;
  void set_layer(::google::protobuf::int32 value);

  // int32 api_id = 4;
  void clear_api_id();
  static const int kApiIdFieldNumber = 4;
  ::google::protobuf::int32 api_id() const;
  void set_api_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.ClientSession_Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr device_model_;
  ::google::protobuf::internal::ArenaStringPtr system_version_;
  ::google::protobuf::internal::ArenaStringPtr app_version_;
  ::google::protobuf::internal::ArenaStringPtr system_lang_code_;
  ::google::protobuf::internal::ArenaStringPtr lang_pack_;
  ::google::protobuf::internal::ArenaStringPtr lang_code_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int32 api_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.ClientSession) */ {
 public:
  ClientSession();
  virtual ~ClientSession();

  ClientSession(const ClientSession& from);

  inline ClientSession& operator=(const ClientSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientSession(ClientSession&& from) noexcept
    : ClientSession() {
    *this = ::std::move(from);
  }

  inline ClientSession& operator=(ClientSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientSession& default_instance();

  static inline const ClientSession* internal_default_instance() {
    return reinterpret_cast<const ClientSession*>(
               &_ClientSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ClientSession* other);
  friend void swap(ClientSession& a, ClientSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientSession* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.ClientSession_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::ClientSession_Data& data2() const;
  ::mtproto::ClientSession_Data* mutable_data2();
  ::mtproto::ClientSession_Data* release_data2();
  void set_allocated_data2(::mtproto::ClientSession_Data* data2);

  // .mtproto.TLConstructor constructor = 1;
  void clear_constructor();
  static const int kConstructorFieldNumber = 1;
  ::mtproto::TLConstructor constructor() const;
  void set_constructor(::mtproto::TLConstructor value);

  // @@protoc_insertion_point(class_scope:mtproto.ClientSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::ClientSession_Data* data2_;
  int constructor_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_clientSessionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_clientSessionInfo) */ {
 public:
  TL_clientSessionInfo();
  virtual ~TL_clientSessionInfo();

  TL_clientSessionInfo(const TL_clientSessionInfo& from);

  inline TL_clientSessionInfo& operator=(const TL_clientSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_clientSessionInfo(TL_clientSessionInfo&& from) noexcept
    : TL_clientSessionInfo() {
    *this = ::std::move(from);
  }

  inline TL_clientSessionInfo& operator=(TL_clientSessionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_clientSessionInfo& default_instance();

  static inline const TL_clientSessionInfo* internal_default_instance() {
    return reinterpret_cast<const TL_clientSessionInfo*>(
               &_TL_clientSessionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(TL_clientSessionInfo* other);
  friend void swap(TL_clientSessionInfo& a, TL_clientSessionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_clientSessionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_clientSessionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_clientSessionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.ClientSession_Data data2 = 2;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 2;
  const ::mtproto::ClientSession_Data& data2() const;
  ::mtproto::ClientSession_Data* mutable_data2();
  ::mtproto::ClientSession_Data* release_data2();
  void set_allocated_data2(::mtproto::ClientSession_Data* data2);

  // @@protoc_insertion_point(class_scope:mtproto.TL_clientSessionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::ClientSession_Data* data2_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_session_setClientSessionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_session_setClientSessionInfo) */ {
 public:
  TL_session_setClientSessionInfo();
  virtual ~TL_session_setClientSessionInfo();

  TL_session_setClientSessionInfo(const TL_session_setClientSessionInfo& from);

  inline TL_session_setClientSessionInfo& operator=(const TL_session_setClientSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_session_setClientSessionInfo(TL_session_setClientSessionInfo&& from) noexcept
    : TL_session_setClientSessionInfo() {
    *this = ::std::move(from);
  }

  inline TL_session_setClientSessionInfo& operator=(TL_session_setClientSessionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_session_setClientSessionInfo& default_instance();

  static inline const TL_session_setClientSessionInfo* internal_default_instance() {
    return reinterpret_cast<const TL_session_setClientSessionInfo*>(
               &_TL_session_setClientSessionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(TL_session_setClientSessionInfo* other);
  friend void swap(TL_session_setClientSessionInfo& a, TL_session_setClientSessionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_session_setClientSessionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_session_setClientSessionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_session_setClientSessionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.ClientSession session = 1;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  const ::mtproto::ClientSession& session() const;
  ::mtproto::ClientSession* mutable_session();
  ::mtproto::ClientSession* release_session();
  void set_allocated_session(::mtproto::ClientSession* session);

  // @@protoc_insertion_point(class_scope:mtproto.TL_session_setClientSessionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::ClientSession* session_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_session_getAuthorizations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_session_getAuthorizations) */ {
 public:
  TL_session_getAuthorizations();
  virtual ~TL_session_getAuthorizations();

  TL_session_getAuthorizations(const TL_session_getAuthorizations& from);

  inline TL_session_getAuthorizations& operator=(const TL_session_getAuthorizations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_session_getAuthorizations(TL_session_getAuthorizations&& from) noexcept
    : TL_session_getAuthorizations() {
    *this = ::std::move(from);
  }

  inline TL_session_getAuthorizations& operator=(TL_session_getAuthorizations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_session_getAuthorizations& default_instance();

  static inline const TL_session_getAuthorizations* internal_default_instance() {
    return reinterpret_cast<const TL_session_getAuthorizations*>(
               &_TL_session_getAuthorizations_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(TL_session_getAuthorizations* other);
  friend void swap(TL_session_getAuthorizations& a, TL_session_getAuthorizations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_session_getAuthorizations* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_session_getAuthorizations* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_session_getAuthorizations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_session_getAuthorizations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_session_resetAuthorization : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_session_resetAuthorization) */ {
 public:
  TL_session_resetAuthorization();
  virtual ~TL_session_resetAuthorization();

  TL_session_resetAuthorization(const TL_session_resetAuthorization& from);

  inline TL_session_resetAuthorization& operator=(const TL_session_resetAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_session_resetAuthorization(TL_session_resetAuthorization&& from) noexcept
    : TL_session_resetAuthorization() {
    *this = ::std::move(from);
  }

  inline TL_session_resetAuthorization& operator=(TL_session_resetAuthorization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_session_resetAuthorization& default_instance();

  static inline const TL_session_resetAuthorization* internal_default_instance() {
    return reinterpret_cast<const TL_session_resetAuthorization*>(
               &_TL_session_resetAuthorization_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(TL_session_resetAuthorization* other);
  friend void swap(TL_session_resetAuthorization& a, TL_session_resetAuthorization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_session_resetAuthorization* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_session_resetAuthorization* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_session_resetAuthorization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  ::google::protobuf::int64 hash() const;
  void set_hash(::google::protobuf::int64 value);

  // int32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_session_resetAuthorization)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 hash_;
  ::google::protobuf::int32 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_session_getLayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_session_getLayer) */ {
 public:
  TL_session_getLayer();
  virtual ~TL_session_getLayer();

  TL_session_getLayer(const TL_session_getLayer& from);

  inline TL_session_getLayer& operator=(const TL_session_getLayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_session_getLayer(TL_session_getLayer&& from) noexcept
    : TL_session_getLayer() {
    *this = ::std::move(from);
  }

  inline TL_session_getLayer& operator=(TL_session_getLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_session_getLayer& default_instance();

  static inline const TL_session_getLayer* internal_default_instance() {
    return reinterpret_cast<const TL_session_getLayer*>(
               &_TL_session_getLayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(TL_session_getLayer* other);
  friend void swap(TL_session_getLayer& a, TL_session_getLayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_session_getLayer* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_session_getLayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_session_getLayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 auth_key_id = 1;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 1;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_session_getLayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 auth_key_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_session_getUserId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_session_getUserId) */ {
 public:
  TL_session_getUserId();
  virtual ~TL_session_getUserId();

  TL_session_getUserId(const TL_session_getUserId& from);

  inline TL_session_getUserId& operator=(const TL_session_getUserId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_session_getUserId(TL_session_getUserId&& from) noexcept
    : TL_session_getUserId() {
    *this = ::std::move(from);
  }

  inline TL_session_getUserId& operator=(TL_session_getUserId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_session_getUserId& default_instance();

  static inline const TL_session_getUserId* internal_default_instance() {
    return reinterpret_cast<const TL_session_getUserId*>(
               &_TL_session_getUserId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(TL_session_getUserId* other);
  friend void swap(TL_session_getUserId& a, TL_session_getUserId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_session_getUserId* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_session_getUserId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_session_getUserId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 auth_key_id = 1;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 1;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_session_getUserId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 auth_key_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_session_queryAuthKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_session_queryAuthKey) */ {
 public:
  TL_session_queryAuthKey();
  virtual ~TL_session_queryAuthKey();

  TL_session_queryAuthKey(const TL_session_queryAuthKey& from);

  inline TL_session_queryAuthKey& operator=(const TL_session_queryAuthKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_session_queryAuthKey(TL_session_queryAuthKey&& from) noexcept
    : TL_session_queryAuthKey() {
    *this = ::std::move(from);
  }

  inline TL_session_queryAuthKey& operator=(TL_session_queryAuthKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_session_queryAuthKey& default_instance();

  static inline const TL_session_queryAuthKey* internal_default_instance() {
    return reinterpret_cast<const TL_session_queryAuthKey*>(
               &_TL_session_queryAuthKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(TL_session_queryAuthKey* other);
  friend void swap(TL_session_queryAuthKey& a, TL_session_queryAuthKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_session_queryAuthKey* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_session_queryAuthKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_session_queryAuthKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 auth_key_id = 1;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 1;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_session_queryAuthKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 auth_key_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_session_setAuthKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_session_setAuthKey) */ {
 public:
  TL_session_setAuthKey();
  virtual ~TL_session_setAuthKey();

  TL_session_setAuthKey(const TL_session_setAuthKey& from);

  inline TL_session_setAuthKey& operator=(const TL_session_setAuthKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_session_setAuthKey(TL_session_setAuthKey&& from) noexcept
    : TL_session_setAuthKey() {
    *this = ::std::move(from);
  }

  inline TL_session_setAuthKey& operator=(TL_session_setAuthKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_session_setAuthKey& default_instance();

  static inline const TL_session_setAuthKey* internal_default_instance() {
    return reinterpret_cast<const TL_session_setAuthKey*>(
               &_TL_session_setAuthKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(TL_session_setAuthKey* other);
  friend void swap(TL_session_setAuthKey& a, TL_session_setAuthKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_session_setAuthKey* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_session_setAuthKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_session_setAuthKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.AuthKeyInfo auth_key = 1;
  bool has_auth_key() const;
  void clear_auth_key();
  static const int kAuthKeyFieldNumber = 1;
  const ::mtproto::AuthKeyInfo& auth_key() const;
  ::mtproto::AuthKeyInfo* mutable_auth_key();
  ::mtproto::AuthKeyInfo* release_auth_key();
  void set_allocated_auth_key(::mtproto::AuthKeyInfo* auth_key);

  // @@protoc_insertion_point(class_scope:mtproto.TL_session_setAuthKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::AuthKeyInfo* auth_key_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_session_bindAuthKeyUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_session_bindAuthKeyUser) */ {
 public:
  TL_session_bindAuthKeyUser();
  virtual ~TL_session_bindAuthKeyUser();

  TL_session_bindAuthKeyUser(const TL_session_bindAuthKeyUser& from);

  inline TL_session_bindAuthKeyUser& operator=(const TL_session_bindAuthKeyUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_session_bindAuthKeyUser(TL_session_bindAuthKeyUser&& from) noexcept
    : TL_session_bindAuthKeyUser() {
    *this = ::std::move(from);
  }

  inline TL_session_bindAuthKeyUser& operator=(TL_session_bindAuthKeyUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_session_bindAuthKeyUser& default_instance();

  static inline const TL_session_bindAuthKeyUser* internal_default_instance() {
    return reinterpret_cast<const TL_session_bindAuthKeyUser*>(
               &_TL_session_bindAuthKeyUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(TL_session_bindAuthKeyUser* other);
  friend void swap(TL_session_bindAuthKeyUser& a, TL_session_bindAuthKeyUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_session_bindAuthKeyUser* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_session_bindAuthKeyUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_session_bindAuthKeyUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 auth_key_id = 1;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 1;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_session_bindAuthKeyUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int32 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_session_unbindAuthKeyUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_session_unbindAuthKeyUser) */ {
 public:
  TL_session_unbindAuthKeyUser();
  virtual ~TL_session_unbindAuthKeyUser();

  TL_session_unbindAuthKeyUser(const TL_session_unbindAuthKeyUser& from);

  inline TL_session_unbindAuthKeyUser& operator=(const TL_session_unbindAuthKeyUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_session_unbindAuthKeyUser(TL_session_unbindAuthKeyUser&& from) noexcept
    : TL_session_unbindAuthKeyUser() {
    *this = ::std::move(from);
  }

  inline TL_session_unbindAuthKeyUser& operator=(TL_session_unbindAuthKeyUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_session_unbindAuthKeyUser& default_instance();

  static inline const TL_session_unbindAuthKeyUser* internal_default_instance() {
    return reinterpret_cast<const TL_session_unbindAuthKeyUser*>(
               &_TL_session_unbindAuthKeyUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(TL_session_unbindAuthKeyUser* other);
  friend void swap(TL_session_unbindAuthKeyUser& a, TL_session_unbindAuthKeyUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_session_unbindAuthKeyUser* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_session_unbindAuthKeyUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_session_unbindAuthKeyUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 auth_key_id = 1;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 1;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_session_unbindAuthKeyUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int32 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_syncUpdates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_syncUpdates) */ {
 public:
  TL_sync_syncUpdates();
  virtual ~TL_sync_syncUpdates();

  TL_sync_syncUpdates(const TL_sync_syncUpdates& from);

  inline TL_sync_syncUpdates& operator=(const TL_sync_syncUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_syncUpdates(TL_sync_syncUpdates&& from) noexcept
    : TL_sync_syncUpdates() {
    *this = ::std::move(from);
  }

  inline TL_sync_syncUpdates& operator=(TL_sync_syncUpdates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_syncUpdates& default_instance();

  static inline const TL_sync_syncUpdates* internal_default_instance() {
    return reinterpret_cast<const TL_sync_syncUpdates*>(
               &_TL_sync_syncUpdates_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(TL_sync_syncUpdates* other);
  friend void swap(TL_sync_syncUpdates& a, TL_sync_syncUpdates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_syncUpdates* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_syncUpdates* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_syncUpdates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.Updates updates = 5;
  bool has_updates() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 5;
  const ::mtproto::Updates& updates() const;
  ::mtproto::Updates* mutable_updates();
  ::mtproto::Updates* release_updates();
  void set_allocated_updates(::mtproto::Updates* updates);

  // int64 auth_key_id = 3;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 3;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 server_id = 4;
  void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_syncUpdates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::Updates* updates_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 server_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_pushUpdates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_pushUpdates) */ {
 public:
  TL_sync_pushUpdates();
  virtual ~TL_sync_pushUpdates();

  TL_sync_pushUpdates(const TL_sync_pushUpdates& from);

  inline TL_sync_pushUpdates& operator=(const TL_sync_pushUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_pushUpdates(TL_sync_pushUpdates&& from) noexcept
    : TL_sync_pushUpdates() {
    *this = ::std::move(from);
  }

  inline TL_sync_pushUpdates& operator=(TL_sync_pushUpdates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_pushUpdates& default_instance();

  static inline const TL_sync_pushUpdates* internal_default_instance() {
    return reinterpret_cast<const TL_sync_pushUpdates*>(
               &_TL_sync_pushUpdates_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(TL_sync_pushUpdates* other);
  friend void swap(TL_sync_pushUpdates& a, TL_sync_pushUpdates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_pushUpdates* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_pushUpdates* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_pushUpdates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.Updates updates = 2;
  bool has_updates() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  const ::mtproto::Updates& updates() const;
  ::mtproto::Updates* mutable_updates();
  ::mtproto::Updates* release_updates();
  void set_allocated_updates(::mtproto::Updates* updates);

  // int32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_pushUpdates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::Updates* updates_;
  ::google::protobuf::int32 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_syncChannelUpdates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_syncChannelUpdates) */ {
 public:
  TL_sync_syncChannelUpdates();
  virtual ~TL_sync_syncChannelUpdates();

  TL_sync_syncChannelUpdates(const TL_sync_syncChannelUpdates& from);

  inline TL_sync_syncChannelUpdates& operator=(const TL_sync_syncChannelUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_syncChannelUpdates(TL_sync_syncChannelUpdates&& from) noexcept
    : TL_sync_syncChannelUpdates() {
    *this = ::std::move(from);
  }

  inline TL_sync_syncChannelUpdates& operator=(TL_sync_syncChannelUpdates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_syncChannelUpdates& default_instance();

  static inline const TL_sync_syncChannelUpdates* internal_default_instance() {
    return reinterpret_cast<const TL_sync_syncChannelUpdates*>(
               &_TL_sync_syncChannelUpdates_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(TL_sync_syncChannelUpdates* other);
  friend void swap(TL_sync_syncChannelUpdates& a, TL_sync_syncChannelUpdates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_syncChannelUpdates* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_syncChannelUpdates* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_syncChannelUpdates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.Updates updates = 6;
  bool has_updates() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 6;
  const ::mtproto::Updates& updates() const;
  ::mtproto::Updates* mutable_updates();
  ::mtproto::Updates* release_updates();
  void set_allocated_updates(::mtproto::Updates* updates);

  // int32 channel_id = 2;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  ::google::protobuf::int32 channel_id() const;
  void set_channel_id(::google::protobuf::int32 value);

  // int32 user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int64 auth_key_id = 4;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 4;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int32 server_id = 5;
  void clear_server_id();
  static const int kServerIdFieldNumber = 5;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_syncChannelUpdates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::Updates* updates_;
  ::google::protobuf::int32 channel_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int32 server_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_pushChannelUpdates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_pushChannelUpdates) */ {
 public:
  TL_sync_pushChannelUpdates();
  virtual ~TL_sync_pushChannelUpdates();

  TL_sync_pushChannelUpdates(const TL_sync_pushChannelUpdates& from);

  inline TL_sync_pushChannelUpdates& operator=(const TL_sync_pushChannelUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_pushChannelUpdates(TL_sync_pushChannelUpdates&& from) noexcept
    : TL_sync_pushChannelUpdates() {
    *this = ::std::move(from);
  }

  inline TL_sync_pushChannelUpdates& operator=(TL_sync_pushChannelUpdates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_pushChannelUpdates& default_instance();

  static inline const TL_sync_pushChannelUpdates* internal_default_instance() {
    return reinterpret_cast<const TL_sync_pushChannelUpdates*>(
               &_TL_sync_pushChannelUpdates_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(TL_sync_pushChannelUpdates* other);
  friend void swap(TL_sync_pushChannelUpdates& a, TL_sync_pushChannelUpdates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_pushChannelUpdates* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_pushChannelUpdates* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_pushChannelUpdates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.Updates updates = 3;
  bool has_updates() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 3;
  const ::mtproto::Updates& updates() const;
  ::mtproto::Updates* mutable_updates();
  ::mtproto::Updates* release_updates();
  void set_allocated_updates(::mtproto::Updates* updates);

  // int32 channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::int32 channel_id() const;
  void set_channel_id(::google::protobuf::int32 value);

  // int32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_pushChannelUpdates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::Updates* updates_;
  ::google::protobuf::int32 channel_id_;
  ::google::protobuf::int32 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_pushRpcResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_pushRpcResult) */ {
 public:
  TL_sync_pushRpcResult();
  virtual ~TL_sync_pushRpcResult();

  TL_sync_pushRpcResult(const TL_sync_pushRpcResult& from);

  inline TL_sync_pushRpcResult& operator=(const TL_sync_pushRpcResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_pushRpcResult(TL_sync_pushRpcResult&& from) noexcept
    : TL_sync_pushRpcResult() {
    *this = ::std::move(from);
  }

  inline TL_sync_pushRpcResult& operator=(TL_sync_pushRpcResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_pushRpcResult& default_instance();

  static inline const TL_sync_pushRpcResult* internal_default_instance() {
    return reinterpret_cast<const TL_sync_pushRpcResult*>(
               &_TL_sync_pushRpcResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(TL_sync_pushRpcResult* other);
  friend void swap(TL_sync_pushRpcResult& a, TL_sync_pushRpcResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_pushRpcResult* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_pushRpcResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_pushRpcResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes result = 4;
  void clear_result();
  static const int kResultFieldNumber = 4;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // int64 auth_key_id = 2;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 2;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int64 req_msg_id = 3;
  void clear_req_msg_id();
  static const int kReqMsgIdFieldNumber = 3;
  ::google::protobuf::int64 req_msg_id() const;
  void set_req_msg_id(::google::protobuf::int64 value);

  // int32 server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_pushRpcResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int64 req_msg_id_;
  ::google::protobuf::int32 server_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_getState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_getState) */ {
 public:
  TL_sync_getState();
  virtual ~TL_sync_getState();

  TL_sync_getState(const TL_sync_getState& from);

  inline TL_sync_getState& operator=(const TL_sync_getState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_getState(TL_sync_getState&& from) noexcept
    : TL_sync_getState() {
    *this = ::std::move(from);
  }

  inline TL_sync_getState& operator=(TL_sync_getState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_getState& default_instance();

  static inline const TL_sync_getState* internal_default_instance() {
    return reinterpret_cast<const TL_sync_getState*>(
               &_TL_sync_getState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(TL_sync_getState* other);
  friend void swap(TL_sync_getState& a, TL_sync_getState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_getState* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_getState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_getState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 auth_key_id = 1;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 1;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_getState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int32 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_getDifference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_getDifference) */ {
 public:
  TL_sync_getDifference();
  virtual ~TL_sync_getDifference();

  TL_sync_getDifference(const TL_sync_getDifference& from);

  inline TL_sync_getDifference& operator=(const TL_sync_getDifference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_getDifference(TL_sync_getDifference&& from) noexcept
    : TL_sync_getDifference() {
    *this = ::std::move(from);
  }

  inline TL_sync_getDifference& operator=(TL_sync_getDifference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_getDifference& default_instance();

  static inline const TL_sync_getDifference* internal_default_instance() {
    return reinterpret_cast<const TL_sync_getDifference*>(
               &_TL_sync_getDifference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(TL_sync_getDifference* other);
  friend void swap(TL_sync_getDifference& a, TL_sync_getDifference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_getDifference* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_getDifference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_getDifference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 auth_key_id = 2;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 2;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int32 user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 pts = 4;
  void clear_pts();
  static const int kPtsFieldNumber = 4;
  ::google::protobuf::int32 pts() const;
  void set_pts(::google::protobuf::int32 value);

  // int32 pts_total_limit = 5;
  void clear_pts_total_limit();
  static const int kPtsTotalLimitFieldNumber = 5;
  ::google::protobuf::int32 pts_total_limit() const;
  void set_pts_total_limit(::google::protobuf::int32 value);

  // int32 date = 6;
  void clear_date();
  static const int kDateFieldNumber = 6;
  ::google::protobuf::int32 date() const;
  void set_date(::google::protobuf::int32 value);

  // int32 qts = 7;
  void clear_qts();
  static const int kQtsFieldNumber = 7;
  ::google::protobuf::int32 qts() const;
  void set_qts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_getDifference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 pts_;
  ::google::protobuf::int32 pts_total_limit_;
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 qts_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_sync_getChannelDifference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_sync_getChannelDifference) */ {
 public:
  TL_sync_getChannelDifference();
  virtual ~TL_sync_getChannelDifference();

  TL_sync_getChannelDifference(const TL_sync_getChannelDifference& from);

  inline TL_sync_getChannelDifference& operator=(const TL_sync_getChannelDifference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_sync_getChannelDifference(TL_sync_getChannelDifference&& from) noexcept
    : TL_sync_getChannelDifference() {
    *this = ::std::move(from);
  }

  inline TL_sync_getChannelDifference& operator=(TL_sync_getChannelDifference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_sync_getChannelDifference& default_instance();

  static inline const TL_sync_getChannelDifference* internal_default_instance() {
    return reinterpret_cast<const TL_sync_getChannelDifference*>(
               &_TL_sync_getChannelDifference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(TL_sync_getChannelDifference* other);
  friend void swap(TL_sync_getChannelDifference& a, TL_sync_getChannelDifference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_sync_getChannelDifference* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_sync_getChannelDifference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_sync_getChannelDifference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtproto.InputChannel channel = 5;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 5;
  const ::mtproto::InputChannel& channel() const;
  ::mtproto::InputChannel* mutable_channel();
  ::mtproto::InputChannel* release_channel();
  void set_allocated_channel(::mtproto::InputChannel* channel);

  // .mtproto.ChannelMessagesFilter filter = 6;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 6;
  const ::mtproto::ChannelMessagesFilter& filter() const;
  ::mtproto::ChannelMessagesFilter* mutable_filter();
  ::mtproto::ChannelMessagesFilter* release_filter();
  void set_allocated_filter(::mtproto::ChannelMessagesFilter* filter);

  // int64 auth_key_id = 2;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 2;
  ::google::protobuf::int64 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::int64 value);

  // int32 user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // bool force = 4;
  void clear_force();
  static const int kForceFieldNumber = 4;
  bool force() const;
  void set_force(bool value);

  // int32 pts = 7;
  void clear_pts();
  static const int kPtsFieldNumber = 7;
  ::google::protobuf::int32 pts() const;
  void set_pts(::google::protobuf::int32 value);

  // int32 limit = 8;
  void clear_limit();
  static const int kLimitFieldNumber = 8;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_sync_getChannelDifference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtproto::InputChannel* channel_;
  ::mtproto::ChannelMessagesFilter* filter_;
  ::google::protobuf::int64 auth_key_id_;
  ::google::protobuf::int32 user_id_;
  bool force_;
  ::google::protobuf::int32 pts_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend struct protobuf_service_2etl_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectToServer_Data

// int32 sync_server_id = 1;
inline void ConnectToServer_Data::clear_sync_server_id() {
  sync_server_id_ = 0;
}
inline ::google::protobuf::int32 ConnectToServer_Data::sync_server_id() const {
  // @@protoc_insertion_point(field_get:mtproto.ConnectToServer_Data.sync_server_id)
  return sync_server_id_;
}
inline void ConnectToServer_Data::set_sync_server_id(::google::protobuf::int32 value) {
  
  sync_server_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.ConnectToServer_Data.sync_server_id)
}

// -------------------------------------------------------------------

// ConnectToServer

// .mtproto.TLConstructor constructor = 1;
inline void ConnectToServer::clear_constructor() {
  constructor_ = 0;
}
inline ::mtproto::TLConstructor ConnectToServer::constructor() const {
  // @@protoc_insertion_point(field_get:mtproto.ConnectToServer.constructor)
  return static_cast< ::mtproto::TLConstructor >(constructor_);
}
inline void ConnectToServer::set_constructor(::mtproto::TLConstructor value) {
  
  constructor_ = value;
  // @@protoc_insertion_point(field_set:mtproto.ConnectToServer.constructor)
}

// .mtproto.ConnectToServer_Data data2 = 2;
inline bool ConnectToServer::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void ConnectToServer::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::ConnectToServer_Data& ConnectToServer::data2() const {
  const ::mtproto::ConnectToServer_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.ConnectToServer.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::ConnectToServer_Data*>(
      &::mtproto::_ConnectToServer_Data_default_instance_);
}
inline ::mtproto::ConnectToServer_Data* ConnectToServer::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::ConnectToServer_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.ConnectToServer.data2)
  return data2_;
}
inline ::mtproto::ConnectToServer_Data* ConnectToServer::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.ConnectToServer.data2)
  
  ::mtproto::ConnectToServer_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void ConnectToServer::set_allocated_data2(::mtproto::ConnectToServer_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.ConnectToServer.data2)
}

// -------------------------------------------------------------------

// TL_sync_connectToSessionServer

// .mtproto.ConnectToServer_Data data2 = 2;
inline bool TL_sync_connectToSessionServer::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void TL_sync_connectToSessionServer::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::ConnectToServer_Data& TL_sync_connectToSessionServer::data2() const {
  const ::mtproto::ConnectToServer_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_connectToSessionServer.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::ConnectToServer_Data*>(
      &::mtproto::_ConnectToServer_Data_default_instance_);
}
inline ::mtproto::ConnectToServer_Data* TL_sync_connectToSessionServer::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::ConnectToServer_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_connectToSessionServer.data2)
  return data2_;
}
inline ::mtproto::ConnectToServer_Data* TL_sync_connectToSessionServer::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_connectToSessionServer.data2)
  
  ::mtproto::ConnectToServer_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void TL_sync_connectToSessionServer::set_allocated_data2(::mtproto::ConnectToServer_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_connectToSessionServer.data2)
}

// -------------------------------------------------------------------

// ServerConnected_Data

// int32 session_server_id = 1;
inline void ServerConnected_Data::clear_session_server_id() {
  session_server_id_ = 0;
}
inline ::google::protobuf::int32 ServerConnected_Data::session_server_id() const {
  // @@protoc_insertion_point(field_get:mtproto.ServerConnected_Data.session_server_id)
  return session_server_id_;
}
inline void ServerConnected_Data::set_session_server_id(::google::protobuf::int32 value) {
  
  session_server_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.ServerConnected_Data.session_server_id)
}

// string server_name = 2;
inline void ServerConnected_Data::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerConnected_Data::server_name() const {
  // @@protoc_insertion_point(field_get:mtproto.ServerConnected_Data.server_name)
  return server_name_.GetNoArena();
}
inline void ServerConnected_Data::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.ServerConnected_Data.server_name)
}
#if LANG_CXX11
inline void ServerConnected_Data::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.ServerConnected_Data.server_name)
}
#endif
inline void ServerConnected_Data::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.ServerConnected_Data.server_name)
}
inline void ServerConnected_Data::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.ServerConnected_Data.server_name)
}
inline ::std::string* ServerConnected_Data::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.ServerConnected_Data.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConnected_Data::release_server_name() {
  // @@protoc_insertion_point(field_release:mtproto.ServerConnected_Data.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConnected_Data::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:mtproto.ServerConnected_Data.server_name)
}

// -------------------------------------------------------------------

// ServerConnected

// .mtproto.TLConstructor constructor = 1;
inline void ServerConnected::clear_constructor() {
  constructor_ = 0;
}
inline ::mtproto::TLConstructor ServerConnected::constructor() const {
  // @@protoc_insertion_point(field_get:mtproto.ServerConnected.constructor)
  return static_cast< ::mtproto::TLConstructor >(constructor_);
}
inline void ServerConnected::set_constructor(::mtproto::TLConstructor value) {
  
  constructor_ = value;
  // @@protoc_insertion_point(field_set:mtproto.ServerConnected.constructor)
}

// .mtproto.ServerConnected_Data data2 = 2;
inline bool ServerConnected::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void ServerConnected::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::ServerConnected_Data& ServerConnected::data2() const {
  const ::mtproto::ServerConnected_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.ServerConnected.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::ServerConnected_Data*>(
      &::mtproto::_ServerConnected_Data_default_instance_);
}
inline ::mtproto::ServerConnected_Data* ServerConnected::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::ServerConnected_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.ServerConnected.data2)
  return data2_;
}
inline ::mtproto::ServerConnected_Data* ServerConnected::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.ServerConnected.data2)
  
  ::mtproto::ServerConnected_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void ServerConnected::set_allocated_data2(::mtproto::ServerConnected_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.ServerConnected.data2)
}

// -------------------------------------------------------------------

// TL_sync_sessionServerConnected

// .mtproto.ServerConnected_Data data2 = 2;
inline bool TL_sync_sessionServerConnected::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void TL_sync_sessionServerConnected::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::ServerConnected_Data& TL_sync_sessionServerConnected::data2() const {
  const ::mtproto::ServerConnected_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_sessionServerConnected.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::ServerConnected_Data*>(
      &::mtproto::_ServerConnected_Data_default_instance_);
}
inline ::mtproto::ServerConnected_Data* TL_sync_sessionServerConnected::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::ServerConnected_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_sessionServerConnected.data2)
  return data2_;
}
inline ::mtproto::ServerConnected_Data* TL_sync_sessionServerConnected::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_sessionServerConnected.data2)
  
  ::mtproto::ServerConnected_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void TL_sync_sessionServerConnected::set_allocated_data2(::mtproto::ServerConnected_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_sessionServerConnected.data2)
}

// -------------------------------------------------------------------

// PushData_Data

// int64 auth_key_id = 1;
inline void PushData_Data::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PushData_Data::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.PushData_Data.auth_key_id)
  return auth_key_id_;
}
inline void PushData_Data::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.PushData_Data.auth_key_id)
}

// .mtproto.Updates updates = 2;
inline bool PushData_Data::has_updates() const {
  return this != internal_default_instance() && updates_ != NULL;
}
inline void PushData_Data::clear_updates() {
  if (GetArenaNoVirtual() == NULL && updates_ != NULL) delete updates_;
  updates_ = NULL;
}
inline const ::mtproto::Updates& PushData_Data::updates() const {
  const ::mtproto::Updates* p = updates_;
  // @@protoc_insertion_point(field_get:mtproto.PushData_Data.updates)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::Updates*>(
      &::mtproto::_Updates_default_instance_);
}
inline ::mtproto::Updates* PushData_Data::mutable_updates() {
  
  if (updates_ == NULL) {
    updates_ = new ::mtproto::Updates;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.PushData_Data.updates)
  return updates_;
}
inline ::mtproto::Updates* PushData_Data::release_updates() {
  // @@protoc_insertion_point(field_release:mtproto.PushData_Data.updates)
  
  ::mtproto::Updates* temp = updates_;
  updates_ = NULL;
  return temp;
}
inline void PushData_Data::set_allocated_updates(::mtproto::Updates* updates) {
  delete updates_;
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.PushData_Data.updates)
}

// int64 client_req_msg_id = 3;
inline void PushData_Data::clear_client_req_msg_id() {
  client_req_msg_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PushData_Data::client_req_msg_id() const {
  // @@protoc_insertion_point(field_get:mtproto.PushData_Data.client_req_msg_id)
  return client_req_msg_id_;
}
inline void PushData_Data::set_client_req_msg_id(::google::protobuf::int64 value) {
  
  client_req_msg_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.PushData_Data.client_req_msg_id)
}

// bytes result = 4;
inline void PushData_Data::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushData_Data::result() const {
  // @@protoc_insertion_point(field_get:mtproto.PushData_Data.result)
  return result_.GetNoArena();
}
inline void PushData_Data::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.PushData_Data.result)
}
#if LANG_CXX11
inline void PushData_Data::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.PushData_Data.result)
}
#endif
inline void PushData_Data::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.PushData_Data.result)
}
inline void PushData_Data::set_result(const void* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.PushData_Data.result)
}
inline ::std::string* PushData_Data::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.PushData_Data.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushData_Data::release_result() {
  // @@protoc_insertion_point(field_release:mtproto.PushData_Data.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushData_Data::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:mtproto.PushData_Data.result)
}

// -------------------------------------------------------------------

// PushData

// .mtproto.TLConstructor constructor = 1;
inline void PushData::clear_constructor() {
  constructor_ = 0;
}
inline ::mtproto::TLConstructor PushData::constructor() const {
  // @@protoc_insertion_point(field_get:mtproto.PushData.constructor)
  return static_cast< ::mtproto::TLConstructor >(constructor_);
}
inline void PushData::set_constructor(::mtproto::TLConstructor value) {
  
  constructor_ = value;
  // @@protoc_insertion_point(field_set:mtproto.PushData.constructor)
}

// .mtproto.PushData_Data data2 = 2;
inline bool PushData::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void PushData::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::PushData_Data& PushData::data2() const {
  const ::mtproto::PushData_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.PushData.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::PushData_Data*>(
      &::mtproto::_PushData_Data_default_instance_);
}
inline ::mtproto::PushData_Data* PushData::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::PushData_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.PushData.data2)
  return data2_;
}
inline ::mtproto::PushData_Data* PushData::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.PushData.data2)
  
  ::mtproto::PushData_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void PushData::set_allocated_data2(::mtproto::PushData_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.PushData.data2)
}

// -------------------------------------------------------------------

// TL_sync_pushUpdatesData

// .mtproto.PushData_Data data2 = 2;
inline bool TL_sync_pushUpdatesData::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void TL_sync_pushUpdatesData::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::PushData_Data& TL_sync_pushUpdatesData::data2() const {
  const ::mtproto::PushData_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushUpdatesData.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::PushData_Data*>(
      &::mtproto::_PushData_Data_default_instance_);
}
inline ::mtproto::PushData_Data* TL_sync_pushUpdatesData::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::PushData_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_pushUpdatesData.data2)
  return data2_;
}
inline ::mtproto::PushData_Data* TL_sync_pushUpdatesData::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_pushUpdatesData.data2)
  
  ::mtproto::PushData_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void TL_sync_pushUpdatesData::set_allocated_data2(::mtproto::PushData_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_pushUpdatesData.data2)
}

// -------------------------------------------------------------------

// TL_sync_pushRpcResultData

// .mtproto.PushData_Data data2 = 2;
inline bool TL_sync_pushRpcResultData::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void TL_sync_pushRpcResultData::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::PushData_Data& TL_sync_pushRpcResultData::data2() const {
  const ::mtproto::PushData_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushRpcResultData.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::PushData_Data*>(
      &::mtproto::_PushData_Data_default_instance_);
}
inline ::mtproto::PushData_Data* TL_sync_pushRpcResultData::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::PushData_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_pushRpcResultData.data2)
  return data2_;
}
inline ::mtproto::PushData_Data* TL_sync_pushRpcResultData::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_pushRpcResultData.data2)
  
  ::mtproto::PushData_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void TL_sync_pushRpcResultData::set_allocated_data2(::mtproto::PushData_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_pushRpcResultData.data2)
}

// -------------------------------------------------------------------

// Int32_Data

// int32 v = 1;
inline void Int32_Data::clear_v() {
  v_ = 0;
}
inline ::google::protobuf::int32 Int32_Data::v() const {
  // @@protoc_insertion_point(field_get:mtproto.Int32_Data.v)
  return v_;
}
inline void Int32_Data::set_v(::google::protobuf::int32 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:mtproto.Int32_Data.v)
}

// -------------------------------------------------------------------

// Int32

// .mtproto.TLConstructor constructor = 1;
inline void Int32::clear_constructor() {
  constructor_ = 0;
}
inline ::mtproto::TLConstructor Int32::constructor() const {
  // @@protoc_insertion_point(field_get:mtproto.Int32.constructor)
  return static_cast< ::mtproto::TLConstructor >(constructor_);
}
inline void Int32::set_constructor(::mtproto::TLConstructor value) {
  
  constructor_ = value;
  // @@protoc_insertion_point(field_set:mtproto.Int32.constructor)
}

// .mtproto.Int32_Data data2 = 2;
inline bool Int32::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void Int32::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::Int32_Data& Int32::data2() const {
  const ::mtproto::Int32_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.Int32.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::Int32_Data*>(
      &::mtproto::_Int32_Data_default_instance_);
}
inline ::mtproto::Int32_Data* Int32::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::Int32_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.Int32.data2)
  return data2_;
}
inline ::mtproto::Int32_Data* Int32::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.Int32.data2)
  
  ::mtproto::Int32_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void Int32::set_allocated_data2(::mtproto::Int32_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.Int32.data2)
}

// -------------------------------------------------------------------

// TL_int32

// .mtproto.Int32_Data data2 = 2;
inline bool TL_int32::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void TL_int32::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::Int32_Data& TL_int32::data2() const {
  const ::mtproto::Int32_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.TL_int32.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::Int32_Data*>(
      &::mtproto::_Int32_Data_default_instance_);
}
inline ::mtproto::Int32_Data* TL_int32::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::Int32_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_int32.data2)
  return data2_;
}
inline ::mtproto::Int32_Data* TL_int32::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.TL_int32.data2)
  
  ::mtproto::Int32_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void TL_int32::set_allocated_data2(::mtproto::Int32_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_int32.data2)
}

// -------------------------------------------------------------------

// Int64_Data

// int64 v = 1;
inline void Int64_Data::clear_v() {
  v_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Int64_Data::v() const {
  // @@protoc_insertion_point(field_get:mtproto.Int64_Data.v)
  return v_;
}
inline void Int64_Data::set_v(::google::protobuf::int64 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:mtproto.Int64_Data.v)
}

// -------------------------------------------------------------------

// Int64

// .mtproto.TLConstructor constructor = 1;
inline void Int64::clear_constructor() {
  constructor_ = 0;
}
inline ::mtproto::TLConstructor Int64::constructor() const {
  // @@protoc_insertion_point(field_get:mtproto.Int64.constructor)
  return static_cast< ::mtproto::TLConstructor >(constructor_);
}
inline void Int64::set_constructor(::mtproto::TLConstructor value) {
  
  constructor_ = value;
  // @@protoc_insertion_point(field_set:mtproto.Int64.constructor)
}

// .mtproto.Int64_Data data2 = 2;
inline bool Int64::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void Int64::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::Int64_Data& Int64::data2() const {
  const ::mtproto::Int64_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.Int64.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::Int64_Data*>(
      &::mtproto::_Int64_Data_default_instance_);
}
inline ::mtproto::Int64_Data* Int64::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::Int64_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.Int64.data2)
  return data2_;
}
inline ::mtproto::Int64_Data* Int64::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.Int64.data2)
  
  ::mtproto::Int64_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void Int64::set_allocated_data2(::mtproto::Int64_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.Int64.data2)
}

// -------------------------------------------------------------------

// TL_long

// .mtproto.Int64_Data data2 = 2;
inline bool TL_long::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void TL_long::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::Int64_Data& TL_long::data2() const {
  const ::mtproto::Int64_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.TL_long.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::Int64_Data*>(
      &::mtproto::_Int64_Data_default_instance_);
}
inline ::mtproto::Int64_Data* TL_long::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::Int64_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_long.data2)
  return data2_;
}
inline ::mtproto::Int64_Data* TL_long::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.TL_long.data2)
  
  ::mtproto::Int64_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void TL_long::set_allocated_data2(::mtproto::Int64_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_long.data2)
}

// -------------------------------------------------------------------

// AuthKeyInfo_Data

// int64 auth_key_id = 1;
inline void AuthKeyInfo_Data::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AuthKeyInfo_Data::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.AuthKeyInfo_Data.auth_key_id)
  return auth_key_id_;
}
inline void AuthKeyInfo_Data::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.AuthKeyInfo_Data.auth_key_id)
}

// bytes auth_key = 2;
inline void AuthKeyInfo_Data::clear_auth_key() {
  auth_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthKeyInfo_Data::auth_key() const {
  // @@protoc_insertion_point(field_get:mtproto.AuthKeyInfo_Data.auth_key)
  return auth_key_.GetNoArena();
}
inline void AuthKeyInfo_Data::set_auth_key(const ::std::string& value) {
  
  auth_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.AuthKeyInfo_Data.auth_key)
}
#if LANG_CXX11
inline void AuthKeyInfo_Data::set_auth_key(::std::string&& value) {
  
  auth_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.AuthKeyInfo_Data.auth_key)
}
#endif
inline void AuthKeyInfo_Data::set_auth_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  auth_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.AuthKeyInfo_Data.auth_key)
}
inline void AuthKeyInfo_Data::set_auth_key(const void* value, size_t size) {
  
  auth_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.AuthKeyInfo_Data.auth_key)
}
inline ::std::string* AuthKeyInfo_Data::mutable_auth_key() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.AuthKeyInfo_Data.auth_key)
  return auth_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthKeyInfo_Data::release_auth_key() {
  // @@protoc_insertion_point(field_release:mtproto.AuthKeyInfo_Data.auth_key)
  
  return auth_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthKeyInfo_Data::set_allocated_auth_key(::std::string* auth_key) {
  if (auth_key != NULL) {
    
  } else {
    
  }
  auth_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_key);
  // @@protoc_insertion_point(field_set_allocated:mtproto.AuthKeyInfo_Data.auth_key)
}

// .mtproto.FutureSalt future_salt = 3;
inline bool AuthKeyInfo_Data::has_future_salt() const {
  return this != internal_default_instance() && future_salt_ != NULL;
}
inline void AuthKeyInfo_Data::clear_future_salt() {
  if (GetArenaNoVirtual() == NULL && future_salt_ != NULL) delete future_salt_;
  future_salt_ = NULL;
}
inline const ::mtproto::FutureSalt& AuthKeyInfo_Data::future_salt() const {
  const ::mtproto::FutureSalt* p = future_salt_;
  // @@protoc_insertion_point(field_get:mtproto.AuthKeyInfo_Data.future_salt)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::FutureSalt*>(
      &::mtproto::_FutureSalt_default_instance_);
}
inline ::mtproto::FutureSalt* AuthKeyInfo_Data::mutable_future_salt() {
  
  if (future_salt_ == NULL) {
    future_salt_ = new ::mtproto::FutureSalt;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.AuthKeyInfo_Data.future_salt)
  return future_salt_;
}
inline ::mtproto::FutureSalt* AuthKeyInfo_Data::release_future_salt() {
  // @@protoc_insertion_point(field_release:mtproto.AuthKeyInfo_Data.future_salt)
  
  ::mtproto::FutureSalt* temp = future_salt_;
  future_salt_ = NULL;
  return temp;
}
inline void AuthKeyInfo_Data::set_allocated_future_salt(::mtproto::FutureSalt* future_salt) {
  delete future_salt_;
  future_salt_ = future_salt;
  if (future_salt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.AuthKeyInfo_Data.future_salt)
}

// -------------------------------------------------------------------

// AuthKeyInfo

// .mtproto.TLConstructor constructor = 1;
inline void AuthKeyInfo::clear_constructor() {
  constructor_ = 0;
}
inline ::mtproto::TLConstructor AuthKeyInfo::constructor() const {
  // @@protoc_insertion_point(field_get:mtproto.AuthKeyInfo.constructor)
  return static_cast< ::mtproto::TLConstructor >(constructor_);
}
inline void AuthKeyInfo::set_constructor(::mtproto::TLConstructor value) {
  
  constructor_ = value;
  // @@protoc_insertion_point(field_set:mtproto.AuthKeyInfo.constructor)
}

// .mtproto.AuthKeyInfo_Data data2 = 2;
inline bool AuthKeyInfo::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void AuthKeyInfo::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::AuthKeyInfo_Data& AuthKeyInfo::data2() const {
  const ::mtproto::AuthKeyInfo_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.AuthKeyInfo.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::AuthKeyInfo_Data*>(
      &::mtproto::_AuthKeyInfo_Data_default_instance_);
}
inline ::mtproto::AuthKeyInfo_Data* AuthKeyInfo::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::AuthKeyInfo_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.AuthKeyInfo.data2)
  return data2_;
}
inline ::mtproto::AuthKeyInfo_Data* AuthKeyInfo::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.AuthKeyInfo.data2)
  
  ::mtproto::AuthKeyInfo_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void AuthKeyInfo::set_allocated_data2(::mtproto::AuthKeyInfo_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.AuthKeyInfo.data2)
}

// -------------------------------------------------------------------

// TL_authKeyInfo

// .mtproto.AuthKeyInfo_Data data2 = 2;
inline bool TL_authKeyInfo::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void TL_authKeyInfo::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::AuthKeyInfo_Data& TL_authKeyInfo::data2() const {
  const ::mtproto::AuthKeyInfo_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.TL_authKeyInfo.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::AuthKeyInfo_Data*>(
      &::mtproto::_AuthKeyInfo_Data_default_instance_);
}
inline ::mtproto::AuthKeyInfo_Data* TL_authKeyInfo::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::AuthKeyInfo_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_authKeyInfo.data2)
  return data2_;
}
inline ::mtproto::AuthKeyInfo_Data* TL_authKeyInfo::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.TL_authKeyInfo.data2)
  
  ::mtproto::AuthKeyInfo_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void TL_authKeyInfo::set_allocated_data2(::mtproto::AuthKeyInfo_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_authKeyInfo.data2)
}

// -------------------------------------------------------------------

// ClientSession_Data

// int64 auth_key_id = 1;
inline void ClientSession_Data::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ClientSession_Data::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.auth_key_id)
  return auth_key_id_;
}
inline void ClientSession_Data::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.auth_key_id)
}

// string ip = 2;
inline void ClientSession_Data::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientSession_Data::ip() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.ip)
  return ip_.GetNoArena();
}
inline void ClientSession_Data::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.ip)
}
#if LANG_CXX11
inline void ClientSession_Data::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.ClientSession_Data.ip)
}
#endif
inline void ClientSession_Data::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.ClientSession_Data.ip)
}
inline void ClientSession_Data::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.ClientSession_Data.ip)
}
inline ::std::string* ClientSession_Data::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.ClientSession_Data.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientSession_Data::release_ip() {
  // @@protoc_insertion_point(field_release:mtproto.ClientSession_Data.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientSession_Data::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:mtproto.ClientSession_Data.ip)
}

// int32 layer = 3;
inline void ClientSession_Data::clear_layer() {
  layer_ = 0;
}
inline ::google::protobuf::int32 ClientSession_Data::layer() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.layer)
  return layer_;
}
inline void ClientSession_Data::set_layer(::google::protobuf::int32 value) {
  
  layer_ = value;
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.layer)
}

// int32 api_id = 4;
inline void ClientSession_Data::clear_api_id() {
  api_id_ = 0;
}
inline ::google::protobuf::int32 ClientSession_Data::api_id() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.api_id)
  return api_id_;
}
inline void ClientSession_Data::set_api_id(::google::protobuf::int32 value) {
  
  api_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.api_id)
}

// string device_model = 5;
inline void ClientSession_Data::clear_device_model() {
  device_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientSession_Data::device_model() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.device_model)
  return device_model_.GetNoArena();
}
inline void ClientSession_Data::set_device_model(const ::std::string& value) {
  
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.device_model)
}
#if LANG_CXX11
inline void ClientSession_Data::set_device_model(::std::string&& value) {
  
  device_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.ClientSession_Data.device_model)
}
#endif
inline void ClientSession_Data::set_device_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.ClientSession_Data.device_model)
}
inline void ClientSession_Data::set_device_model(const char* value, size_t size) {
  
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.ClientSession_Data.device_model)
}
inline ::std::string* ClientSession_Data::mutable_device_model() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.ClientSession_Data.device_model)
  return device_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientSession_Data::release_device_model() {
  // @@protoc_insertion_point(field_release:mtproto.ClientSession_Data.device_model)
  
  return device_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientSession_Data::set_allocated_device_model(::std::string* device_model) {
  if (device_model != NULL) {
    
  } else {
    
  }
  device_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_model);
  // @@protoc_insertion_point(field_set_allocated:mtproto.ClientSession_Data.device_model)
}

// string system_version = 6;
inline void ClientSession_Data::clear_system_version() {
  system_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientSession_Data::system_version() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.system_version)
  return system_version_.GetNoArena();
}
inline void ClientSession_Data::set_system_version(const ::std::string& value) {
  
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.system_version)
}
#if LANG_CXX11
inline void ClientSession_Data::set_system_version(::std::string&& value) {
  
  system_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.ClientSession_Data.system_version)
}
#endif
inline void ClientSession_Data::set_system_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.ClientSession_Data.system_version)
}
inline void ClientSession_Data::set_system_version(const char* value, size_t size) {
  
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.ClientSession_Data.system_version)
}
inline ::std::string* ClientSession_Data::mutable_system_version() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.ClientSession_Data.system_version)
  return system_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientSession_Data::release_system_version() {
  // @@protoc_insertion_point(field_release:mtproto.ClientSession_Data.system_version)
  
  return system_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientSession_Data::set_allocated_system_version(::std::string* system_version) {
  if (system_version != NULL) {
    
  } else {
    
  }
  system_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_version);
  // @@protoc_insertion_point(field_set_allocated:mtproto.ClientSession_Data.system_version)
}

// string app_version = 7;
inline void ClientSession_Data::clear_app_version() {
  app_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientSession_Data::app_version() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.app_version)
  return app_version_.GetNoArena();
}
inline void ClientSession_Data::set_app_version(const ::std::string& value) {
  
  app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.app_version)
}
#if LANG_CXX11
inline void ClientSession_Data::set_app_version(::std::string&& value) {
  
  app_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.ClientSession_Data.app_version)
}
#endif
inline void ClientSession_Data::set_app_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.ClientSession_Data.app_version)
}
inline void ClientSession_Data::set_app_version(const char* value, size_t size) {
  
  app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.ClientSession_Data.app_version)
}
inline ::std::string* ClientSession_Data::mutable_app_version() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.ClientSession_Data.app_version)
  return app_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientSession_Data::release_app_version() {
  // @@protoc_insertion_point(field_release:mtproto.ClientSession_Data.app_version)
  
  return app_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientSession_Data::set_allocated_app_version(::std::string* app_version) {
  if (app_version != NULL) {
    
  } else {
    
  }
  app_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_version);
  // @@protoc_insertion_point(field_set_allocated:mtproto.ClientSession_Data.app_version)
}

// string system_lang_code = 8;
inline void ClientSession_Data::clear_system_lang_code() {
  system_lang_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientSession_Data::system_lang_code() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.system_lang_code)
  return system_lang_code_.GetNoArena();
}
inline void ClientSession_Data::set_system_lang_code(const ::std::string& value) {
  
  system_lang_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.system_lang_code)
}
#if LANG_CXX11
inline void ClientSession_Data::set_system_lang_code(::std::string&& value) {
  
  system_lang_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.ClientSession_Data.system_lang_code)
}
#endif
inline void ClientSession_Data::set_system_lang_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_lang_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.ClientSession_Data.system_lang_code)
}
inline void ClientSession_Data::set_system_lang_code(const char* value, size_t size) {
  
  system_lang_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.ClientSession_Data.system_lang_code)
}
inline ::std::string* ClientSession_Data::mutable_system_lang_code() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.ClientSession_Data.system_lang_code)
  return system_lang_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientSession_Data::release_system_lang_code() {
  // @@protoc_insertion_point(field_release:mtproto.ClientSession_Data.system_lang_code)
  
  return system_lang_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientSession_Data::set_allocated_system_lang_code(::std::string* system_lang_code) {
  if (system_lang_code != NULL) {
    
  } else {
    
  }
  system_lang_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_lang_code);
  // @@protoc_insertion_point(field_set_allocated:mtproto.ClientSession_Data.system_lang_code)
}

// string lang_pack = 9;
inline void ClientSession_Data::clear_lang_pack() {
  lang_pack_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientSession_Data::lang_pack() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.lang_pack)
  return lang_pack_.GetNoArena();
}
inline void ClientSession_Data::set_lang_pack(const ::std::string& value) {
  
  lang_pack_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.lang_pack)
}
#if LANG_CXX11
inline void ClientSession_Data::set_lang_pack(::std::string&& value) {
  
  lang_pack_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.ClientSession_Data.lang_pack)
}
#endif
inline void ClientSession_Data::set_lang_pack(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_pack_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.ClientSession_Data.lang_pack)
}
inline void ClientSession_Data::set_lang_pack(const char* value, size_t size) {
  
  lang_pack_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.ClientSession_Data.lang_pack)
}
inline ::std::string* ClientSession_Data::mutable_lang_pack() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.ClientSession_Data.lang_pack)
  return lang_pack_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientSession_Data::release_lang_pack() {
  // @@protoc_insertion_point(field_release:mtproto.ClientSession_Data.lang_pack)
  
  return lang_pack_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientSession_Data::set_allocated_lang_pack(::std::string* lang_pack) {
  if (lang_pack != NULL) {
    
  } else {
    
  }
  lang_pack_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang_pack);
  // @@protoc_insertion_point(field_set_allocated:mtproto.ClientSession_Data.lang_pack)
}

// string lang_code = 10;
inline void ClientSession_Data::clear_lang_code() {
  lang_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientSession_Data::lang_code() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession_Data.lang_code)
  return lang_code_.GetNoArena();
}
inline void ClientSession_Data::set_lang_code(const ::std::string& value) {
  
  lang_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.ClientSession_Data.lang_code)
}
#if LANG_CXX11
inline void ClientSession_Data::set_lang_code(::std::string&& value) {
  
  lang_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.ClientSession_Data.lang_code)
}
#endif
inline void ClientSession_Data::set_lang_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.ClientSession_Data.lang_code)
}
inline void ClientSession_Data::set_lang_code(const char* value, size_t size) {
  
  lang_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.ClientSession_Data.lang_code)
}
inline ::std::string* ClientSession_Data::mutable_lang_code() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.ClientSession_Data.lang_code)
  return lang_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientSession_Data::release_lang_code() {
  // @@protoc_insertion_point(field_release:mtproto.ClientSession_Data.lang_code)
  
  return lang_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientSession_Data::set_allocated_lang_code(::std::string* lang_code) {
  if (lang_code != NULL) {
    
  } else {
    
  }
  lang_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang_code);
  // @@protoc_insertion_point(field_set_allocated:mtproto.ClientSession_Data.lang_code)
}

// -------------------------------------------------------------------

// ClientSession

// .mtproto.TLConstructor constructor = 1;
inline void ClientSession::clear_constructor() {
  constructor_ = 0;
}
inline ::mtproto::TLConstructor ClientSession::constructor() const {
  // @@protoc_insertion_point(field_get:mtproto.ClientSession.constructor)
  return static_cast< ::mtproto::TLConstructor >(constructor_);
}
inline void ClientSession::set_constructor(::mtproto::TLConstructor value) {
  
  constructor_ = value;
  // @@protoc_insertion_point(field_set:mtproto.ClientSession.constructor)
}

// .mtproto.ClientSession_Data data2 = 2;
inline bool ClientSession::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void ClientSession::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::ClientSession_Data& ClientSession::data2() const {
  const ::mtproto::ClientSession_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.ClientSession.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::ClientSession_Data*>(
      &::mtproto::_ClientSession_Data_default_instance_);
}
inline ::mtproto::ClientSession_Data* ClientSession::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::ClientSession_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.ClientSession.data2)
  return data2_;
}
inline ::mtproto::ClientSession_Data* ClientSession::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.ClientSession.data2)
  
  ::mtproto::ClientSession_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void ClientSession::set_allocated_data2(::mtproto::ClientSession_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.ClientSession.data2)
}

// -------------------------------------------------------------------

// TL_clientSessionInfo

// .mtproto.ClientSession_Data data2 = 2;
inline bool TL_clientSessionInfo::has_data2() const {
  return this != internal_default_instance() && data2_ != NULL;
}
inline void TL_clientSessionInfo::clear_data2() {
  if (GetArenaNoVirtual() == NULL && data2_ != NULL) delete data2_;
  data2_ = NULL;
}
inline const ::mtproto::ClientSession_Data& TL_clientSessionInfo::data2() const {
  const ::mtproto::ClientSession_Data* p = data2_;
  // @@protoc_insertion_point(field_get:mtproto.TL_clientSessionInfo.data2)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::ClientSession_Data*>(
      &::mtproto::_ClientSession_Data_default_instance_);
}
inline ::mtproto::ClientSession_Data* TL_clientSessionInfo::mutable_data2() {
  
  if (data2_ == NULL) {
    data2_ = new ::mtproto::ClientSession_Data;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_clientSessionInfo.data2)
  return data2_;
}
inline ::mtproto::ClientSession_Data* TL_clientSessionInfo::release_data2() {
  // @@protoc_insertion_point(field_release:mtproto.TL_clientSessionInfo.data2)
  
  ::mtproto::ClientSession_Data* temp = data2_;
  data2_ = NULL;
  return temp;
}
inline void TL_clientSessionInfo::set_allocated_data2(::mtproto::ClientSession_Data* data2) {
  delete data2_;
  data2_ = data2;
  if (data2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_clientSessionInfo.data2)
}

// -------------------------------------------------------------------

// TL_session_setClientSessionInfo

// .mtproto.ClientSession session = 1;
inline bool TL_session_setClientSessionInfo::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline void TL_session_setClientSessionInfo::clear_session() {
  if (GetArenaNoVirtual() == NULL && session_ != NULL) delete session_;
  session_ = NULL;
}
inline const ::mtproto::ClientSession& TL_session_setClientSessionInfo::session() const {
  const ::mtproto::ClientSession* p = session_;
  // @@protoc_insertion_point(field_get:mtproto.TL_session_setClientSessionInfo.session)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::ClientSession*>(
      &::mtproto::_ClientSession_default_instance_);
}
inline ::mtproto::ClientSession* TL_session_setClientSessionInfo::mutable_session() {
  
  if (session_ == NULL) {
    session_ = new ::mtproto::ClientSession;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_session_setClientSessionInfo.session)
  return session_;
}
inline ::mtproto::ClientSession* TL_session_setClientSessionInfo::release_session() {
  // @@protoc_insertion_point(field_release:mtproto.TL_session_setClientSessionInfo.session)
  
  ::mtproto::ClientSession* temp = session_;
  session_ = NULL;
  return temp;
}
inline void TL_session_setClientSessionInfo::set_allocated_session(::mtproto::ClientSession* session) {
  delete session_;
  session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_session_setClientSessionInfo.session)
}

// -------------------------------------------------------------------

// TL_session_getAuthorizations

// int32 user_id = 1;
inline void TL_session_getAuthorizations::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_session_getAuthorizations::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_getAuthorizations.user_id)
  return user_id_;
}
inline void TL_session_getAuthorizations::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_getAuthorizations.user_id)
}

// -------------------------------------------------------------------

// TL_session_resetAuthorization

// int32 user_id = 1;
inline void TL_session_resetAuthorization::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_session_resetAuthorization::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_resetAuthorization.user_id)
  return user_id_;
}
inline void TL_session_resetAuthorization::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_resetAuthorization.user_id)
}

// int64 hash = 2;
inline void TL_session_resetAuthorization::clear_hash() {
  hash_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_session_resetAuthorization::hash() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_resetAuthorization.hash)
  return hash_;
}
inline void TL_session_resetAuthorization::set_hash(::google::protobuf::int64 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_resetAuthorization.hash)
}

// -------------------------------------------------------------------

// TL_session_getLayer

// int64 auth_key_id = 1;
inline void TL_session_getLayer::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_session_getLayer::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_getLayer.auth_key_id)
  return auth_key_id_;
}
inline void TL_session_getLayer::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_getLayer.auth_key_id)
}

// -------------------------------------------------------------------

// TL_session_getUserId

// int64 auth_key_id = 1;
inline void TL_session_getUserId::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_session_getUserId::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_getUserId.auth_key_id)
  return auth_key_id_;
}
inline void TL_session_getUserId::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_getUserId.auth_key_id)
}

// -------------------------------------------------------------------

// TL_session_queryAuthKey

// int64 auth_key_id = 1;
inline void TL_session_queryAuthKey::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_session_queryAuthKey::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_queryAuthKey.auth_key_id)
  return auth_key_id_;
}
inline void TL_session_queryAuthKey::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_queryAuthKey.auth_key_id)
}

// -------------------------------------------------------------------

// TL_session_setAuthKey

// .mtproto.AuthKeyInfo auth_key = 1;
inline bool TL_session_setAuthKey::has_auth_key() const {
  return this != internal_default_instance() && auth_key_ != NULL;
}
inline void TL_session_setAuthKey::clear_auth_key() {
  if (GetArenaNoVirtual() == NULL && auth_key_ != NULL) delete auth_key_;
  auth_key_ = NULL;
}
inline const ::mtproto::AuthKeyInfo& TL_session_setAuthKey::auth_key() const {
  const ::mtproto::AuthKeyInfo* p = auth_key_;
  // @@protoc_insertion_point(field_get:mtproto.TL_session_setAuthKey.auth_key)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::AuthKeyInfo*>(
      &::mtproto::_AuthKeyInfo_default_instance_);
}
inline ::mtproto::AuthKeyInfo* TL_session_setAuthKey::mutable_auth_key() {
  
  if (auth_key_ == NULL) {
    auth_key_ = new ::mtproto::AuthKeyInfo;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_session_setAuthKey.auth_key)
  return auth_key_;
}
inline ::mtproto::AuthKeyInfo* TL_session_setAuthKey::release_auth_key() {
  // @@protoc_insertion_point(field_release:mtproto.TL_session_setAuthKey.auth_key)
  
  ::mtproto::AuthKeyInfo* temp = auth_key_;
  auth_key_ = NULL;
  return temp;
}
inline void TL_session_setAuthKey::set_allocated_auth_key(::mtproto::AuthKeyInfo* auth_key) {
  delete auth_key_;
  auth_key_ = auth_key;
  if (auth_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_session_setAuthKey.auth_key)
}

// -------------------------------------------------------------------

// TL_session_bindAuthKeyUser

// int64 auth_key_id = 1;
inline void TL_session_bindAuthKeyUser::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_session_bindAuthKeyUser::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_bindAuthKeyUser.auth_key_id)
  return auth_key_id_;
}
inline void TL_session_bindAuthKeyUser::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_bindAuthKeyUser.auth_key_id)
}

// int32 user_id = 2;
inline void TL_session_bindAuthKeyUser::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_session_bindAuthKeyUser::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_bindAuthKeyUser.user_id)
  return user_id_;
}
inline void TL_session_bindAuthKeyUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_bindAuthKeyUser.user_id)
}

// -------------------------------------------------------------------

// TL_session_unbindAuthKeyUser

// int64 auth_key_id = 1;
inline void TL_session_unbindAuthKeyUser::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_session_unbindAuthKeyUser::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_unbindAuthKeyUser.auth_key_id)
  return auth_key_id_;
}
inline void TL_session_unbindAuthKeyUser::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_unbindAuthKeyUser.auth_key_id)
}

// int32 user_id = 2;
inline void TL_session_unbindAuthKeyUser::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_session_unbindAuthKeyUser::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_session_unbindAuthKeyUser.user_id)
  return user_id_;
}
inline void TL_session_unbindAuthKeyUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_session_unbindAuthKeyUser.user_id)
}

// -------------------------------------------------------------------

// TL_sync_syncUpdates

// int32 user_id = 2;
inline void TL_sync_syncUpdates::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_syncUpdates::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_syncUpdates.user_id)
  return user_id_;
}
inline void TL_sync_syncUpdates::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_syncUpdates.user_id)
}

// int64 auth_key_id = 3;
inline void TL_sync_syncUpdates::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_sync_syncUpdates::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_syncUpdates.auth_key_id)
  return auth_key_id_;
}
inline void TL_sync_syncUpdates::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_syncUpdates.auth_key_id)
}

// int32 server_id = 4;
inline void TL_sync_syncUpdates::clear_server_id() {
  server_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_syncUpdates::server_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_syncUpdates.server_id)
  return server_id_;
}
inline void TL_sync_syncUpdates::set_server_id(::google::protobuf::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_syncUpdates.server_id)
}

// .mtproto.Updates updates = 5;
inline bool TL_sync_syncUpdates::has_updates() const {
  return this != internal_default_instance() && updates_ != NULL;
}
inline void TL_sync_syncUpdates::clear_updates() {
  if (GetArenaNoVirtual() == NULL && updates_ != NULL) delete updates_;
  updates_ = NULL;
}
inline const ::mtproto::Updates& TL_sync_syncUpdates::updates() const {
  const ::mtproto::Updates* p = updates_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_syncUpdates.updates)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::Updates*>(
      &::mtproto::_Updates_default_instance_);
}
inline ::mtproto::Updates* TL_sync_syncUpdates::mutable_updates() {
  
  if (updates_ == NULL) {
    updates_ = new ::mtproto::Updates;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_syncUpdates.updates)
  return updates_;
}
inline ::mtproto::Updates* TL_sync_syncUpdates::release_updates() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_syncUpdates.updates)
  
  ::mtproto::Updates* temp = updates_;
  updates_ = NULL;
  return temp;
}
inline void TL_sync_syncUpdates::set_allocated_updates(::mtproto::Updates* updates) {
  delete updates_;
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_syncUpdates.updates)
}

// -------------------------------------------------------------------

// TL_sync_pushUpdates

// int32 user_id = 1;
inline void TL_sync_pushUpdates::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_pushUpdates::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushUpdates.user_id)
  return user_id_;
}
inline void TL_sync_pushUpdates::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_pushUpdates.user_id)
}

// .mtproto.Updates updates = 2;
inline bool TL_sync_pushUpdates::has_updates() const {
  return this != internal_default_instance() && updates_ != NULL;
}
inline void TL_sync_pushUpdates::clear_updates() {
  if (GetArenaNoVirtual() == NULL && updates_ != NULL) delete updates_;
  updates_ = NULL;
}
inline const ::mtproto::Updates& TL_sync_pushUpdates::updates() const {
  const ::mtproto::Updates* p = updates_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushUpdates.updates)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::Updates*>(
      &::mtproto::_Updates_default_instance_);
}
inline ::mtproto::Updates* TL_sync_pushUpdates::mutable_updates() {
  
  if (updates_ == NULL) {
    updates_ = new ::mtproto::Updates;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_pushUpdates.updates)
  return updates_;
}
inline ::mtproto::Updates* TL_sync_pushUpdates::release_updates() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_pushUpdates.updates)
  
  ::mtproto::Updates* temp = updates_;
  updates_ = NULL;
  return temp;
}
inline void TL_sync_pushUpdates::set_allocated_updates(::mtproto::Updates* updates) {
  delete updates_;
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_pushUpdates.updates)
}

// -------------------------------------------------------------------

// TL_sync_syncChannelUpdates

// int32 channel_id = 2;
inline void TL_sync_syncChannelUpdates::clear_channel_id() {
  channel_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_syncChannelUpdates::channel_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_syncChannelUpdates.channel_id)
  return channel_id_;
}
inline void TL_sync_syncChannelUpdates::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_syncChannelUpdates.channel_id)
}

// int32 user_id = 3;
inline void TL_sync_syncChannelUpdates::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_syncChannelUpdates::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_syncChannelUpdates.user_id)
  return user_id_;
}
inline void TL_sync_syncChannelUpdates::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_syncChannelUpdates.user_id)
}

// int64 auth_key_id = 4;
inline void TL_sync_syncChannelUpdates::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_sync_syncChannelUpdates::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_syncChannelUpdates.auth_key_id)
  return auth_key_id_;
}
inline void TL_sync_syncChannelUpdates::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_syncChannelUpdates.auth_key_id)
}

// int32 server_id = 5;
inline void TL_sync_syncChannelUpdates::clear_server_id() {
  server_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_syncChannelUpdates::server_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_syncChannelUpdates.server_id)
  return server_id_;
}
inline void TL_sync_syncChannelUpdates::set_server_id(::google::protobuf::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_syncChannelUpdates.server_id)
}

// .mtproto.Updates updates = 6;
inline bool TL_sync_syncChannelUpdates::has_updates() const {
  return this != internal_default_instance() && updates_ != NULL;
}
inline void TL_sync_syncChannelUpdates::clear_updates() {
  if (GetArenaNoVirtual() == NULL && updates_ != NULL) delete updates_;
  updates_ = NULL;
}
inline const ::mtproto::Updates& TL_sync_syncChannelUpdates::updates() const {
  const ::mtproto::Updates* p = updates_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_syncChannelUpdates.updates)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::Updates*>(
      &::mtproto::_Updates_default_instance_);
}
inline ::mtproto::Updates* TL_sync_syncChannelUpdates::mutable_updates() {
  
  if (updates_ == NULL) {
    updates_ = new ::mtproto::Updates;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_syncChannelUpdates.updates)
  return updates_;
}
inline ::mtproto::Updates* TL_sync_syncChannelUpdates::release_updates() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_syncChannelUpdates.updates)
  
  ::mtproto::Updates* temp = updates_;
  updates_ = NULL;
  return temp;
}
inline void TL_sync_syncChannelUpdates::set_allocated_updates(::mtproto::Updates* updates) {
  delete updates_;
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_syncChannelUpdates.updates)
}

// -------------------------------------------------------------------

// TL_sync_pushChannelUpdates

// int32 channel_id = 1;
inline void TL_sync_pushChannelUpdates::clear_channel_id() {
  channel_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_pushChannelUpdates::channel_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushChannelUpdates.channel_id)
  return channel_id_;
}
inline void TL_sync_pushChannelUpdates::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_pushChannelUpdates.channel_id)
}

// int32 user_id = 2;
inline void TL_sync_pushChannelUpdates::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_pushChannelUpdates::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushChannelUpdates.user_id)
  return user_id_;
}
inline void TL_sync_pushChannelUpdates::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_pushChannelUpdates.user_id)
}

// .mtproto.Updates updates = 3;
inline bool TL_sync_pushChannelUpdates::has_updates() const {
  return this != internal_default_instance() && updates_ != NULL;
}
inline void TL_sync_pushChannelUpdates::clear_updates() {
  if (GetArenaNoVirtual() == NULL && updates_ != NULL) delete updates_;
  updates_ = NULL;
}
inline const ::mtproto::Updates& TL_sync_pushChannelUpdates::updates() const {
  const ::mtproto::Updates* p = updates_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushChannelUpdates.updates)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::Updates*>(
      &::mtproto::_Updates_default_instance_);
}
inline ::mtproto::Updates* TL_sync_pushChannelUpdates::mutable_updates() {
  
  if (updates_ == NULL) {
    updates_ = new ::mtproto::Updates;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_pushChannelUpdates.updates)
  return updates_;
}
inline ::mtproto::Updates* TL_sync_pushChannelUpdates::release_updates() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_pushChannelUpdates.updates)
  
  ::mtproto::Updates* temp = updates_;
  updates_ = NULL;
  return temp;
}
inline void TL_sync_pushChannelUpdates::set_allocated_updates(::mtproto::Updates* updates) {
  delete updates_;
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_pushChannelUpdates.updates)
}

// -------------------------------------------------------------------

// TL_sync_pushRpcResult

// int32 server_id = 1;
inline void TL_sync_pushRpcResult::clear_server_id() {
  server_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_pushRpcResult::server_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushRpcResult.server_id)
  return server_id_;
}
inline void TL_sync_pushRpcResult::set_server_id(::google::protobuf::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_pushRpcResult.server_id)
}

// int64 auth_key_id = 2;
inline void TL_sync_pushRpcResult::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_sync_pushRpcResult::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushRpcResult.auth_key_id)
  return auth_key_id_;
}
inline void TL_sync_pushRpcResult::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_pushRpcResult.auth_key_id)
}

// int64 req_msg_id = 3;
inline void TL_sync_pushRpcResult::clear_req_msg_id() {
  req_msg_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_sync_pushRpcResult::req_msg_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushRpcResult.req_msg_id)
  return req_msg_id_;
}
inline void TL_sync_pushRpcResult::set_req_msg_id(::google::protobuf::int64 value) {
  
  req_msg_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_pushRpcResult.req_msg_id)
}

// bytes result = 4;
inline void TL_sync_pushRpcResult::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_sync_pushRpcResult::result() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_pushRpcResult.result)
  return result_.GetNoArena();
}
inline void TL_sync_pushRpcResult::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_pushRpcResult.result)
}
#if LANG_CXX11
inline void TL_sync_pushRpcResult::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_sync_pushRpcResult.result)
}
#endif
inline void TL_sync_pushRpcResult::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_sync_pushRpcResult.result)
}
inline void TL_sync_pushRpcResult::set_result(const void* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_sync_pushRpcResult.result)
}
inline ::std::string* TL_sync_pushRpcResult::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_pushRpcResult.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_sync_pushRpcResult::release_result() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_pushRpcResult.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_sync_pushRpcResult::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_pushRpcResult.result)
}

// -------------------------------------------------------------------

// TL_sync_getState

// int64 auth_key_id = 1;
inline void TL_sync_getState::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_sync_getState::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getState.auth_key_id)
  return auth_key_id_;
}
inline void TL_sync_getState::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getState.auth_key_id)
}

// int32 user_id = 2;
inline void TL_sync_getState::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_getState::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getState.user_id)
  return user_id_;
}
inline void TL_sync_getState::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getState.user_id)
}

// -------------------------------------------------------------------

// TL_sync_getDifference

// int64 auth_key_id = 2;
inline void TL_sync_getDifference::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_sync_getDifference::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getDifference.auth_key_id)
  return auth_key_id_;
}
inline void TL_sync_getDifference::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getDifference.auth_key_id)
}

// int32 user_id = 3;
inline void TL_sync_getDifference::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_getDifference::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getDifference.user_id)
  return user_id_;
}
inline void TL_sync_getDifference::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getDifference.user_id)
}

// int32 pts = 4;
inline void TL_sync_getDifference::clear_pts() {
  pts_ = 0;
}
inline ::google::protobuf::int32 TL_sync_getDifference::pts() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getDifference.pts)
  return pts_;
}
inline void TL_sync_getDifference::set_pts(::google::protobuf::int32 value) {
  
  pts_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getDifference.pts)
}

// int32 pts_total_limit = 5;
inline void TL_sync_getDifference::clear_pts_total_limit() {
  pts_total_limit_ = 0;
}
inline ::google::protobuf::int32 TL_sync_getDifference::pts_total_limit() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getDifference.pts_total_limit)
  return pts_total_limit_;
}
inline void TL_sync_getDifference::set_pts_total_limit(::google::protobuf::int32 value) {
  
  pts_total_limit_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getDifference.pts_total_limit)
}

// int32 date = 6;
inline void TL_sync_getDifference::clear_date() {
  date_ = 0;
}
inline ::google::protobuf::int32 TL_sync_getDifference::date() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getDifference.date)
  return date_;
}
inline void TL_sync_getDifference::set_date(::google::protobuf::int32 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getDifference.date)
}

// int32 qts = 7;
inline void TL_sync_getDifference::clear_qts() {
  qts_ = 0;
}
inline ::google::protobuf::int32 TL_sync_getDifference::qts() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getDifference.qts)
  return qts_;
}
inline void TL_sync_getDifference::set_qts(::google::protobuf::int32 value) {
  
  qts_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getDifference.qts)
}

// -------------------------------------------------------------------

// TL_sync_getChannelDifference

// int64 auth_key_id = 2;
inline void TL_sync_getChannelDifference::clear_auth_key_id() {
  auth_key_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_sync_getChannelDifference::auth_key_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getChannelDifference.auth_key_id)
  return auth_key_id_;
}
inline void TL_sync_getChannelDifference::set_auth_key_id(::google::protobuf::int64 value) {
  
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getChannelDifference.auth_key_id)
}

// int32 user_id = 3;
inline void TL_sync_getChannelDifference::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 TL_sync_getChannelDifference::user_id() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getChannelDifference.user_id)
  return user_id_;
}
inline void TL_sync_getChannelDifference::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getChannelDifference.user_id)
}

// bool force = 4;
inline void TL_sync_getChannelDifference::clear_force() {
  force_ = false;
}
inline bool TL_sync_getChannelDifference::force() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getChannelDifference.force)
  return force_;
}
inline void TL_sync_getChannelDifference::set_force(bool value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getChannelDifference.force)
}

// .mtproto.InputChannel channel = 5;
inline bool TL_sync_getChannelDifference::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
inline void TL_sync_getChannelDifference::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) delete channel_;
  channel_ = NULL;
}
inline const ::mtproto::InputChannel& TL_sync_getChannelDifference::channel() const {
  const ::mtproto::InputChannel* p = channel_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getChannelDifference.channel)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::InputChannel*>(
      &::mtproto::_InputChannel_default_instance_);
}
inline ::mtproto::InputChannel* TL_sync_getChannelDifference::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::mtproto::InputChannel;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_getChannelDifference.channel)
  return channel_;
}
inline ::mtproto::InputChannel* TL_sync_getChannelDifference::release_channel() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_getChannelDifference.channel)
  
  ::mtproto::InputChannel* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline void TL_sync_getChannelDifference::set_allocated_channel(::mtproto::InputChannel* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_getChannelDifference.channel)
}

// .mtproto.ChannelMessagesFilter filter = 6;
inline bool TL_sync_getChannelDifference::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
inline void TL_sync_getChannelDifference::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
inline const ::mtproto::ChannelMessagesFilter& TL_sync_getChannelDifference::filter() const {
  const ::mtproto::ChannelMessagesFilter* p = filter_;
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getChannelDifference.filter)
  return p != NULL ? *p : *reinterpret_cast<const ::mtproto::ChannelMessagesFilter*>(
      &::mtproto::_ChannelMessagesFilter_default_instance_);
}
inline ::mtproto::ChannelMessagesFilter* TL_sync_getChannelDifference::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::mtproto::ChannelMessagesFilter;
  }
  // @@protoc_insertion_point(field_mutable:mtproto.TL_sync_getChannelDifference.filter)
  return filter_;
}
inline ::mtproto::ChannelMessagesFilter* TL_sync_getChannelDifference::release_filter() {
  // @@protoc_insertion_point(field_release:mtproto.TL_sync_getChannelDifference.filter)
  
  ::mtproto::ChannelMessagesFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void TL_sync_getChannelDifference::set_allocated_filter(::mtproto::ChannelMessagesFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_sync_getChannelDifference.filter)
}

// int32 pts = 7;
inline void TL_sync_getChannelDifference::clear_pts() {
  pts_ = 0;
}
inline ::google::protobuf::int32 TL_sync_getChannelDifference::pts() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getChannelDifference.pts)
  return pts_;
}
inline void TL_sync_getChannelDifference::set_pts(::google::protobuf::int32 value) {
  
  pts_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getChannelDifference.pts)
}

// int32 limit = 8;
inline void TL_sync_getChannelDifference::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 TL_sync_getChannelDifference::limit() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_sync_getChannelDifference.limit)
  return limit_;
}
inline void TL_sync_getChannelDifference::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_sync_getChannelDifference.limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace mtproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2etl_2eproto__INCLUDED
