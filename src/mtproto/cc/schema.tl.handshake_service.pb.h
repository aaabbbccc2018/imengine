// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.tl.handshake_service.proto

#ifndef PROTOBUF_schema_2etl_2ehandshake_5fservice_2eproto__INCLUDED
#define PROTOBUF_schema_2etl_2ehandshake_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "schema.tl.handshake.pb.h"
// @@protoc_insertion_point(includes)
namespace mtproto {
class TL_destroy_auth_key;
class TL_destroy_auth_keyDefaultTypeInternal;
extern TL_destroy_auth_keyDefaultTypeInternal _TL_destroy_auth_key_default_instance_;
class TL_req_DH_params;
class TL_req_DH_paramsDefaultTypeInternal;
extern TL_req_DH_paramsDefaultTypeInternal _TL_req_DH_params_default_instance_;
class TL_req_pq;
class TL_req_pqDefaultTypeInternal;
extern TL_req_pqDefaultTypeInternal _TL_req_pq_default_instance_;
class TL_req_pq_multi;
class TL_req_pq_multiDefaultTypeInternal;
extern TL_req_pq_multiDefaultTypeInternal _TL_req_pq_multi_default_instance_;
class TL_set_client_DH_params;
class TL_set_client_DH_paramsDefaultTypeInternal;
extern TL_set_client_DH_paramsDefaultTypeInternal _TL_set_client_DH_params_default_instance_;
}  // namespace mtproto

namespace mtproto {

namespace protobuf_schema_2etl_2ehandshake_5fservice_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_schema_2etl_2ehandshake_5fservice_2eproto

// ===================================================================

class TL_req_pq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_req_pq) */ {
 public:
  TL_req_pq();
  virtual ~TL_req_pq();

  TL_req_pq(const TL_req_pq& from);

  inline TL_req_pq& operator=(const TL_req_pq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_req_pq(TL_req_pq&& from) noexcept
    : TL_req_pq() {
    *this = ::std::move(from);
  }

  inline TL_req_pq& operator=(TL_req_pq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_req_pq& default_instance();

  static inline const TL_req_pq* internal_default_instance() {
    return reinterpret_cast<const TL_req_pq*>(
               &_TL_req_pq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TL_req_pq* other);
  friend void swap(TL_req_pq& a, TL_req_pq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_req_pq* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_req_pq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_req_pq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // @@protoc_insertion_point(class_scope:mtproto.TL_req_pq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  mutable int _cached_size_;
  friend struct protobuf_schema_2etl_2ehandshake_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_req_pq_multi : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_req_pq_multi) */ {
 public:
  TL_req_pq_multi();
  virtual ~TL_req_pq_multi();

  TL_req_pq_multi(const TL_req_pq_multi& from);

  inline TL_req_pq_multi& operator=(const TL_req_pq_multi& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_req_pq_multi(TL_req_pq_multi&& from) noexcept
    : TL_req_pq_multi() {
    *this = ::std::move(from);
  }

  inline TL_req_pq_multi& operator=(TL_req_pq_multi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_req_pq_multi& default_instance();

  static inline const TL_req_pq_multi* internal_default_instance() {
    return reinterpret_cast<const TL_req_pq_multi*>(
               &_TL_req_pq_multi_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TL_req_pq_multi* other);
  friend void swap(TL_req_pq_multi& a, TL_req_pq_multi& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_req_pq_multi* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_req_pq_multi* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_req_pq_multi* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // @@protoc_insertion_point(class_scope:mtproto.TL_req_pq_multi)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  mutable int _cached_size_;
  friend struct protobuf_schema_2etl_2ehandshake_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_req_DH_params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_req_DH_params) */ {
 public:
  TL_req_DH_params();
  virtual ~TL_req_DH_params();

  TL_req_DH_params(const TL_req_DH_params& from);

  inline TL_req_DH_params& operator=(const TL_req_DH_params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_req_DH_params(TL_req_DH_params&& from) noexcept
    : TL_req_DH_params() {
    *this = ::std::move(from);
  }

  inline TL_req_DH_params& operator=(TL_req_DH_params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_req_DH_params& default_instance();

  static inline const TL_req_DH_params* internal_default_instance() {
    return reinterpret_cast<const TL_req_DH_params*>(
               &_TL_req_DH_params_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TL_req_DH_params* other);
  friend void swap(TL_req_DH_params& a, TL_req_DH_params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_req_DH_params* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_req_DH_params* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_req_DH_params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bytes server_nonce = 2;
  void clear_server_nonce();
  static const int kServerNonceFieldNumber = 2;
  const ::std::string& server_nonce() const;
  void set_server_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_server_nonce(::std::string&& value);
  #endif
  void set_server_nonce(const char* value);
  void set_server_nonce(const void* value, size_t size);
  ::std::string* mutable_server_nonce();
  ::std::string* release_server_nonce();
  void set_allocated_server_nonce(::std::string* server_nonce);

  // string p = 3;
  void clear_p();
  static const int kPFieldNumber = 3;
  const ::std::string& p() const;
  void set_p(const ::std::string& value);
  #if LANG_CXX11
  void set_p(::std::string&& value);
  #endif
  void set_p(const char* value);
  void set_p(const char* value, size_t size);
  ::std::string* mutable_p();
  ::std::string* release_p();
  void set_allocated_p(::std::string* p);

  // string q = 4;
  void clear_q();
  static const int kQFieldNumber = 4;
  const ::std::string& q() const;
  void set_q(const ::std::string& value);
  #if LANG_CXX11
  void set_q(::std::string&& value);
  #endif
  void set_q(const char* value);
  void set_q(const char* value, size_t size);
  ::std::string* mutable_q();
  ::std::string* release_q();
  void set_allocated_q(::std::string* q);

  // string encrypted_data = 6;
  void clear_encrypted_data();
  static const int kEncryptedDataFieldNumber = 6;
  const ::std::string& encrypted_data() const;
  void set_encrypted_data(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypted_data(::std::string&& value);
  #endif
  void set_encrypted_data(const char* value);
  void set_encrypted_data(const char* value, size_t size);
  ::std::string* mutable_encrypted_data();
  ::std::string* release_encrypted_data();
  void set_allocated_encrypted_data(::std::string* encrypted_data);

  // int64 public_key_fingerprint = 5;
  void clear_public_key_fingerprint();
  static const int kPublicKeyFingerprintFieldNumber = 5;
  ::google::protobuf::int64 public_key_fingerprint() const;
  void set_public_key_fingerprint(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mtproto.TL_req_DH_params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr server_nonce_;
  ::google::protobuf::internal::ArenaStringPtr p_;
  ::google::protobuf::internal::ArenaStringPtr q_;
  ::google::protobuf::internal::ArenaStringPtr encrypted_data_;
  ::google::protobuf::int64 public_key_fingerprint_;
  mutable int _cached_size_;
  friend struct protobuf_schema_2etl_2ehandshake_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_set_client_DH_params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_set_client_DH_params) */ {
 public:
  TL_set_client_DH_params();
  virtual ~TL_set_client_DH_params();

  TL_set_client_DH_params(const TL_set_client_DH_params& from);

  inline TL_set_client_DH_params& operator=(const TL_set_client_DH_params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_set_client_DH_params(TL_set_client_DH_params&& from) noexcept
    : TL_set_client_DH_params() {
    *this = ::std::move(from);
  }

  inline TL_set_client_DH_params& operator=(TL_set_client_DH_params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_set_client_DH_params& default_instance();

  static inline const TL_set_client_DH_params* internal_default_instance() {
    return reinterpret_cast<const TL_set_client_DH_params*>(
               &_TL_set_client_DH_params_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TL_set_client_DH_params* other);
  friend void swap(TL_set_client_DH_params& a, TL_set_client_DH_params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_set_client_DH_params* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_set_client_DH_params* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_set_client_DH_params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bytes server_nonce = 2;
  void clear_server_nonce();
  static const int kServerNonceFieldNumber = 2;
  const ::std::string& server_nonce() const;
  void set_server_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_server_nonce(::std::string&& value);
  #endif
  void set_server_nonce(const char* value);
  void set_server_nonce(const void* value, size_t size);
  ::std::string* mutable_server_nonce();
  ::std::string* release_server_nonce();
  void set_allocated_server_nonce(::std::string* server_nonce);

  // string encrypted_data = 3;
  void clear_encrypted_data();
  static const int kEncryptedDataFieldNumber = 3;
  const ::std::string& encrypted_data() const;
  void set_encrypted_data(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypted_data(::std::string&& value);
  #endif
  void set_encrypted_data(const char* value);
  void set_encrypted_data(const char* value, size_t size);
  ::std::string* mutable_encrypted_data();
  ::std::string* release_encrypted_data();
  void set_allocated_encrypted_data(::std::string* encrypted_data);

  // @@protoc_insertion_point(class_scope:mtproto.TL_set_client_DH_params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr server_nonce_;
  ::google::protobuf::internal::ArenaStringPtr encrypted_data_;
  mutable int _cached_size_;
  friend struct protobuf_schema_2etl_2ehandshake_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TL_destroy_auth_key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtproto.TL_destroy_auth_key) */ {
 public:
  TL_destroy_auth_key();
  virtual ~TL_destroy_auth_key();

  TL_destroy_auth_key(const TL_destroy_auth_key& from);

  inline TL_destroy_auth_key& operator=(const TL_destroy_auth_key& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TL_destroy_auth_key(TL_destroy_auth_key&& from) noexcept
    : TL_destroy_auth_key() {
    *this = ::std::move(from);
  }

  inline TL_destroy_auth_key& operator=(TL_destroy_auth_key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TL_destroy_auth_key& default_instance();

  static inline const TL_destroy_auth_key* internal_default_instance() {
    return reinterpret_cast<const TL_destroy_auth_key*>(
               &_TL_destroy_auth_key_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TL_destroy_auth_key* other);
  friend void swap(TL_destroy_auth_key& a, TL_destroy_auth_key& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TL_destroy_auth_key* New() const PROTOBUF_FINAL { return New(NULL); }

  TL_destroy_auth_key* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TL_destroy_auth_key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mtproto.TL_destroy_auth_key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_schema_2etl_2ehandshake_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TL_req_pq

// bytes nonce = 1;
inline void TL_req_pq::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_req_pq::nonce() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_req_pq.nonce)
  return nonce_.GetNoArena();
}
inline void TL_req_pq::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_req_pq.nonce)
}
#if LANG_CXX11
inline void TL_req_pq::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_req_pq.nonce)
}
#endif
inline void TL_req_pq::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_req_pq.nonce)
}
inline void TL_req_pq::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_req_pq.nonce)
}
inline ::std::string* TL_req_pq::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_req_pq.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_req_pq::release_nonce() {
  // @@protoc_insertion_point(field_release:mtproto.TL_req_pq.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_req_pq::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_req_pq.nonce)
}

// -------------------------------------------------------------------

// TL_req_pq_multi

// bytes nonce = 1;
inline void TL_req_pq_multi::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_req_pq_multi::nonce() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_req_pq_multi.nonce)
  return nonce_.GetNoArena();
}
inline void TL_req_pq_multi::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_req_pq_multi.nonce)
}
#if LANG_CXX11
inline void TL_req_pq_multi::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_req_pq_multi.nonce)
}
#endif
inline void TL_req_pq_multi::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_req_pq_multi.nonce)
}
inline void TL_req_pq_multi::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_req_pq_multi.nonce)
}
inline ::std::string* TL_req_pq_multi::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_req_pq_multi.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_req_pq_multi::release_nonce() {
  // @@protoc_insertion_point(field_release:mtproto.TL_req_pq_multi.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_req_pq_multi::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_req_pq_multi.nonce)
}

// -------------------------------------------------------------------

// TL_req_DH_params

// bytes nonce = 1;
inline void TL_req_DH_params::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_req_DH_params::nonce() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_req_DH_params.nonce)
  return nonce_.GetNoArena();
}
inline void TL_req_DH_params::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_req_DH_params.nonce)
}
#if LANG_CXX11
inline void TL_req_DH_params::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_req_DH_params.nonce)
}
#endif
inline void TL_req_DH_params::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_req_DH_params.nonce)
}
inline void TL_req_DH_params::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_req_DH_params.nonce)
}
inline ::std::string* TL_req_DH_params::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_req_DH_params.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_req_DH_params::release_nonce() {
  // @@protoc_insertion_point(field_release:mtproto.TL_req_DH_params.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_req_DH_params::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_req_DH_params.nonce)
}

// bytes server_nonce = 2;
inline void TL_req_DH_params::clear_server_nonce() {
  server_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_req_DH_params::server_nonce() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_req_DH_params.server_nonce)
  return server_nonce_.GetNoArena();
}
inline void TL_req_DH_params::set_server_nonce(const ::std::string& value) {
  
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_req_DH_params.server_nonce)
}
#if LANG_CXX11
inline void TL_req_DH_params::set_server_nonce(::std::string&& value) {
  
  server_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_req_DH_params.server_nonce)
}
#endif
inline void TL_req_DH_params::set_server_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_req_DH_params.server_nonce)
}
inline void TL_req_DH_params::set_server_nonce(const void* value, size_t size) {
  
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_req_DH_params.server_nonce)
}
inline ::std::string* TL_req_DH_params::mutable_server_nonce() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_req_DH_params.server_nonce)
  return server_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_req_DH_params::release_server_nonce() {
  // @@protoc_insertion_point(field_release:mtproto.TL_req_DH_params.server_nonce)
  
  return server_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_req_DH_params::set_allocated_server_nonce(::std::string* server_nonce) {
  if (server_nonce != NULL) {
    
  } else {
    
  }
  server_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_nonce);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_req_DH_params.server_nonce)
}

// string p = 3;
inline void TL_req_DH_params::clear_p() {
  p_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_req_DH_params::p() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_req_DH_params.p)
  return p_.GetNoArena();
}
inline void TL_req_DH_params::set_p(const ::std::string& value) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_req_DH_params.p)
}
#if LANG_CXX11
inline void TL_req_DH_params::set_p(::std::string&& value) {
  
  p_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_req_DH_params.p)
}
#endif
inline void TL_req_DH_params::set_p(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_req_DH_params.p)
}
inline void TL_req_DH_params::set_p(const char* value, size_t size) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_req_DH_params.p)
}
inline ::std::string* TL_req_DH_params::mutable_p() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_req_DH_params.p)
  return p_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_req_DH_params::release_p() {
  // @@protoc_insertion_point(field_release:mtproto.TL_req_DH_params.p)
  
  return p_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_req_DH_params::set_allocated_p(::std::string* p) {
  if (p != NULL) {
    
  } else {
    
  }
  p_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_req_DH_params.p)
}

// string q = 4;
inline void TL_req_DH_params::clear_q() {
  q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_req_DH_params::q() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_req_DH_params.q)
  return q_.GetNoArena();
}
inline void TL_req_DH_params::set_q(const ::std::string& value) {
  
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_req_DH_params.q)
}
#if LANG_CXX11
inline void TL_req_DH_params::set_q(::std::string&& value) {
  
  q_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_req_DH_params.q)
}
#endif
inline void TL_req_DH_params::set_q(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_req_DH_params.q)
}
inline void TL_req_DH_params::set_q(const char* value, size_t size) {
  
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_req_DH_params.q)
}
inline ::std::string* TL_req_DH_params::mutable_q() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_req_DH_params.q)
  return q_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_req_DH_params::release_q() {
  // @@protoc_insertion_point(field_release:mtproto.TL_req_DH_params.q)
  
  return q_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_req_DH_params::set_allocated_q(::std::string* q) {
  if (q != NULL) {
    
  } else {
    
  }
  q_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), q);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_req_DH_params.q)
}

// int64 public_key_fingerprint = 5;
inline void TL_req_DH_params::clear_public_key_fingerprint() {
  public_key_fingerprint_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TL_req_DH_params::public_key_fingerprint() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_req_DH_params.public_key_fingerprint)
  return public_key_fingerprint_;
}
inline void TL_req_DH_params::set_public_key_fingerprint(::google::protobuf::int64 value) {
  
  public_key_fingerprint_ = value;
  // @@protoc_insertion_point(field_set:mtproto.TL_req_DH_params.public_key_fingerprint)
}

// string encrypted_data = 6;
inline void TL_req_DH_params::clear_encrypted_data() {
  encrypted_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_req_DH_params::encrypted_data() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_req_DH_params.encrypted_data)
  return encrypted_data_.GetNoArena();
}
inline void TL_req_DH_params::set_encrypted_data(const ::std::string& value) {
  
  encrypted_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_req_DH_params.encrypted_data)
}
#if LANG_CXX11
inline void TL_req_DH_params::set_encrypted_data(::std::string&& value) {
  
  encrypted_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_req_DH_params.encrypted_data)
}
#endif
inline void TL_req_DH_params::set_encrypted_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encrypted_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_req_DH_params.encrypted_data)
}
inline void TL_req_DH_params::set_encrypted_data(const char* value, size_t size) {
  
  encrypted_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_req_DH_params.encrypted_data)
}
inline ::std::string* TL_req_DH_params::mutable_encrypted_data() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_req_DH_params.encrypted_data)
  return encrypted_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_req_DH_params::release_encrypted_data() {
  // @@protoc_insertion_point(field_release:mtproto.TL_req_DH_params.encrypted_data)
  
  return encrypted_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_req_DH_params::set_allocated_encrypted_data(::std::string* encrypted_data) {
  if (encrypted_data != NULL) {
    
  } else {
    
  }
  encrypted_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_data);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_req_DH_params.encrypted_data)
}

// -------------------------------------------------------------------

// TL_set_client_DH_params

// bytes nonce = 1;
inline void TL_set_client_DH_params::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_set_client_DH_params::nonce() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_set_client_DH_params.nonce)
  return nonce_.GetNoArena();
}
inline void TL_set_client_DH_params::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_set_client_DH_params.nonce)
}
#if LANG_CXX11
inline void TL_set_client_DH_params::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_set_client_DH_params.nonce)
}
#endif
inline void TL_set_client_DH_params::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_set_client_DH_params.nonce)
}
inline void TL_set_client_DH_params::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_set_client_DH_params.nonce)
}
inline ::std::string* TL_set_client_DH_params::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_set_client_DH_params.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_set_client_DH_params::release_nonce() {
  // @@protoc_insertion_point(field_release:mtproto.TL_set_client_DH_params.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_set_client_DH_params::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_set_client_DH_params.nonce)
}

// bytes server_nonce = 2;
inline void TL_set_client_DH_params::clear_server_nonce() {
  server_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_set_client_DH_params::server_nonce() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_set_client_DH_params.server_nonce)
  return server_nonce_.GetNoArena();
}
inline void TL_set_client_DH_params::set_server_nonce(const ::std::string& value) {
  
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_set_client_DH_params.server_nonce)
}
#if LANG_CXX11
inline void TL_set_client_DH_params::set_server_nonce(::std::string&& value) {
  
  server_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_set_client_DH_params.server_nonce)
}
#endif
inline void TL_set_client_DH_params::set_server_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_set_client_DH_params.server_nonce)
}
inline void TL_set_client_DH_params::set_server_nonce(const void* value, size_t size) {
  
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_set_client_DH_params.server_nonce)
}
inline ::std::string* TL_set_client_DH_params::mutable_server_nonce() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_set_client_DH_params.server_nonce)
  return server_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_set_client_DH_params::release_server_nonce() {
  // @@protoc_insertion_point(field_release:mtproto.TL_set_client_DH_params.server_nonce)
  
  return server_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_set_client_DH_params::set_allocated_server_nonce(::std::string* server_nonce) {
  if (server_nonce != NULL) {
    
  } else {
    
  }
  server_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_nonce);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_set_client_DH_params.server_nonce)
}

// string encrypted_data = 3;
inline void TL_set_client_DH_params::clear_encrypted_data() {
  encrypted_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TL_set_client_DH_params::encrypted_data() const {
  // @@protoc_insertion_point(field_get:mtproto.TL_set_client_DH_params.encrypted_data)
  return encrypted_data_.GetNoArena();
}
inline void TL_set_client_DH_params::set_encrypted_data(const ::std::string& value) {
  
  encrypted_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtproto.TL_set_client_DH_params.encrypted_data)
}
#if LANG_CXX11
inline void TL_set_client_DH_params::set_encrypted_data(::std::string&& value) {
  
  encrypted_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtproto.TL_set_client_DH_params.encrypted_data)
}
#endif
inline void TL_set_client_DH_params::set_encrypted_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encrypted_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtproto.TL_set_client_DH_params.encrypted_data)
}
inline void TL_set_client_DH_params::set_encrypted_data(const char* value, size_t size) {
  
  encrypted_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtproto.TL_set_client_DH_params.encrypted_data)
}
inline ::std::string* TL_set_client_DH_params::mutable_encrypted_data() {
  
  // @@protoc_insertion_point(field_mutable:mtproto.TL_set_client_DH_params.encrypted_data)
  return encrypted_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TL_set_client_DH_params::release_encrypted_data() {
  // @@protoc_insertion_point(field_release:mtproto.TL_set_client_DH_params.encrypted_data)
  
  return encrypted_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TL_set_client_DH_params::set_allocated_encrypted_data(::std::string* encrypted_data) {
  if (encrypted_data != NULL) {
    
  } else {
    
  }
  encrypted_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_data);
  // @@protoc_insertion_point(field_set_allocated:mtproto.TL_set_client_DH_params.encrypted_data)
}

// -------------------------------------------------------------------

// TL_destroy_auth_key

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace mtproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_schema_2etl_2ehandshake_5fservice_2eproto__INCLUDED
